/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type _013_PtJakart$ContractId = string;
/**
 * The fitness, or score, of a block, that allow the Tezos to decide which chain is the best. A fitness value is a list of byte sequences. They are compared as follows: shortest lists are smaller; lists of the same length are compared according to the lexicographical order.
 */
export type BlockFitness = string[];
export type _013_PtJakart$LiquidityBakingToggleVote = "off" | "on" | "pass";
export type TestChainStatus = NotRunning | Forking | Running;
export type Proposal = "proposal";
export type Exploration = "exploration";
export type Cooldown = "cooldown";
export type Promotion = "promotion";
export type Adoption = "adoption";
export type None = null;
/**
 * Decimal representation of a positive big number
 */
export type PositiveBigNumber = string;
/**
 * Decimal representation of 64 bit integers
 */
export type BitIntegers = string;
export type BlockApplication = "block";
export type ProtocolMigration = "migration";
export type Subsidy = "subsidy";
export type Simulation = "simulation";
export type BlockApplication1 = "block";
export type ProtocolMigration1 = "migration";
export type Subsidy1 = "subsidy";
export type Simulation1 = "simulation";
export type BlockApplication2 = "block";
export type ProtocolMigration2 = "migration";
export type Subsidy2 = "subsidy";
export type Simulation2 = "simulation";
export type BlockApplication3 = "block";
export type ProtocolMigration3 = "migration";
export type Subsidy3 = "subsidy";
export type Simulation3 = "simulation";
export type BlockApplication4 = "block";
export type ProtocolMigration4 = "migration";
export type Subsidy4 = "subsidy";
export type Simulation4 = "simulation";
export type BlockApplication5 = "block";
export type ProtocolMigration5 = "migration";
export type Subsidy5 = "subsidy";
export type Simulation5 = "simulation";
export type BlockApplication6 = "block";
export type ProtocolMigration6 = "migration";
export type Subsidy6 = "subsidy";
export type Simulation6 = "simulation";
export type BlockApplication7 = "block";
export type ProtocolMigration7 = "migration";
export type Subsidy7 = "subsidy";
export type Simulation7 = "simulation";
export type BlockApplication8 = "block";
export type ProtocolMigration8 = "migration";
export type Subsidy8 = "subsidy";
export type Simulation8 = "simulation";
export type BlockApplication9 = "block";
export type ProtocolMigration9 = "migration";
export type Subsidy9 = "subsidy";
export type Simulation9 = "simulation";
export type BlockApplication10 = "block";
export type ProtocolMigration10 = "migration";
export type Subsidy10 = "subsidy";
export type Simulation10 = "simulation";
export type BlockApplication11 = "block";
export type ProtocolMigration11 = "migration";
export type Subsidy11 = "subsidy";
export type Simulation11 = "simulation";
export type BlockApplication12 = "block";
export type ProtocolMigration12 = "migration";
export type Subsidy12 = "subsidy";
export type Simulation12 = "simulation";
export type BlockApplication13 = "block";
export type ProtocolMigration13 = "migration";
export type Subsidy13 = "subsidy";
export type Simulation13 = "simulation";
export type BlockApplication14 = "block";
export type ProtocolMigration14 = "migration";
export type Subsidy14 = "subsidy";
export type Simulation14 = "simulation";
export type BlockApplication15 = "block";
export type ProtocolMigration15 = "migration";
export type Subsidy15 = "subsidy";
export type Simulation15 = "simulation";
export type BlockApplication16 = "block";
export type ProtocolMigration16 = "migration";
export type Subsidy16 = "subsidy";
export type Simulation16 = "simulation";
export type BlockApplication17 = "block";
export type ProtocolMigration17 = "migration";
export type Subsidy17 = "subsidy";
export type Simulation17 = "simulation";
export type _013_PtJakart$BondId = TxRollupBondId;
export type BlockApplication18 = "block";
export type ProtocolMigration18 = "migration";
export type Subsidy18 = "subsidy";
export type Simulation18 = "simulation";
export type BlockApplication19 = "block";
export type ProtocolMigration19 = "migration";
export type Subsidy19 = "subsidy";
export type Simulation19 = "simulation";
export type BlockApplication20 = "block";
export type ProtocolMigration20 = "migration";
export type Subsidy20 = "subsidy";
export type Simulation20 = "simulation";
export type _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates = (
  | Contract
  | BlockFees
  | Deposits
  | NonceRevelationRewards
  | DoubleSigningEvidenceRewards
  | EndorsingRewards
  | BakingRewards
  | BakingBonuses
  | StorageFees
  | DoubleSigningPunishments
  | LostEndorsingRewards
  | LiquidityBakingSubsidies
  | Burned
  | Commitments
  | Bootstrap
  | Invoice
  | InitialCommitments
  | Minted
  | FrozenBonds
  | TxRollupRejectionRewards
  | TxRollupRejectionPunishments
)[];
export type _013_PtJakart$Operation$Alpha$SuccessfulManagerOperationResult =
  | Reveal
  | (ToContract | ToTxRollup)
  | Origination
  | Delegation
  | SetDepositsLimit
  | ScRollupOriginate;
/**
 * Decimal representation of a big number
 */
export type BigNumber = string;
export type Micheline$013_PtJakart$MichelsonV1$Expression = Int1 | String1 | Bytes1 | Sequence1 | Prim_Generic;
export type Sequence1 = Micheline$013_PtJakart$MichelsonV1$Expression[];
export type _013_PtJakart$Michelson$V1$Primitives =
  | "ABS"
  | "IF"
  | "SOURCE"
  | "DUG"
  | "False"
  | "DIG"
  | "SAPLING_VERIFY_UPDATE"
  | "bls12_381_g2"
  | "BLAKE2B"
  | "lambda"
  | "sapling_state"
  | "Pair"
  | "INT"
  | "big_map"
  | "sapling_transaction_deprecated"
  | "storage"
  | "RIGHT"
  | "view"
  | "SHA256"
  | "AND"
  | "VIEW"
  | "string"
  | "NIL"
  | "list"
  | "STEPS_TO_QUOTA"
  | "RENAME"
  | "CHECK_SIGNATURE"
  | "NEVER"
  | "unit"
  | "MAP"
  | "nat"
  | "never"
  | "ADD"
  | "IMPLICIT_ACCOUNT"
  | "SHA512"
  | "contract"
  | "LSL"
  | "constant"
  | "chain_id"
  | "bls12_381_g1"
  | "address"
  | "COMPARE"
  | "SUB_MUTEZ"
  | "SLICE"
  | "DROP"
  | "or"
  | "BALANCE"
  | "CONCAT"
  | "chest_key"
  | "MUL"
  | "FAILWITH"
  | "Elt"
  | "key_hash"
  | "MIN_BLOCK_TIME"
  | "DIP"
  | "MEM"
  | "XOR"
  | "key"
  | "UPDATE"
  | "Some"
  | "parameter"
  | "operation"
  | "EMPTY_MAP"
  | "None"
  | "SWAP"
  | "option"
  | "AMOUNT"
  | "set"
  | "KECCAK"
  | "signature"
  | "CHAIN_ID"
  | "HASH_KEY"
  | "IF_LEFT"
  | "CREATE_ACCOUNT"
  | "LT"
  | "VOTING_POWER"
  | "UNPACK"
  | "TICKET"
  | "SELF"
  | "mutez"
  | "TRANSFER_TOKENS"
  | "LE"
  | "SOME"
  | "CREATE_CONTRACT"
  | "Unit"
  | "SAPLING_EMPTY_STATE"
  | "NONE"
  | "ADDRESS"
  | "GE"
  | "SIZE"
  | "int"
  | "SENDER"
  | "pair"
  | "CAR"
  | "NOT"
  | "timestamp"
  | "CDR"
  | "ITER"
  | "SHA3"
  | "PUSH"
  | "LEFT"
  | "ISNAT"
  | "True"
  | "Right"
  | "PACK"
  | "IF_CONS"
  | "TOTAL_VOTING_POWER"
  | "bls12_381_fr"
  | "SET_DELEGATE"
  | "EMPTY_SET"
  | "NEQ"
  | "LAMBDA"
  | "bytes"
  | "PAIRING_CHECK"
  | "LOOP"
  | "Left"
  | "bool"
  | "LSR"
  | "EMPTY_BIG_MAP"
  | "SPLIT_TICKET"
  | "tx_rollup_l2_address"
  | "LEVEL"
  | "PAIR"
  | "READ_TICKET"
  | "map"
  | "UNPAIR"
  | "GT"
  | "ticket"
  | "sapling_transaction"
  | "NOW"
  | "IF_NONE"
  | "OR"
  | "GET_AND_UPDATE"
  | "UNIT"
  | "CONTRACT"
  | "CAST"
  | "JOIN_TICKETS"
  | "EDIV"
  | "EQ"
  | "LOOP_LEFT"
  | "chest"
  | "OPEN_CHEST"
  | "EXEC"
  | "GET"
  | "NEG"
  | "SELF_ADDRESS"
  | "DUP"
  | "CONS"
  | "SUB"
  | "APPLY"
  | "code";
export type Sequence = Micheline$013_PtJakart$MichelsonV1$Expression[];
export type Sequence2 = Micheline$013_PtJakart$MichelsonV1$Expression[];
export type Sequence3 = Micheline$013_PtJakart$MichelsonV1$Expression[];
export type Sequence4 = Micheline$013_PtJakart$MichelsonV1$Expression[];
export type Sequence5 = Micheline$013_PtJakart$MichelsonV1$Expression[];
export type Sequence6 = Micheline$013_PtJakart$MichelsonV1$Expression[];
export type Sequence7 = Micheline$013_PtJakart$MichelsonV1$Expression[];
export type Sequence8 = Micheline$013_PtJakart$MichelsonV1$Expression[];
export type Sequence9 = Micheline$013_PtJakart$MichelsonV1$Expression[];
export type Sapling$Transaction$Commitment = string;
export type Sapling$Transaction$CommitmentValue = string;
export type Sapling$DH$Epk = string;
export type Sapling$Transaction$Nullifier = string;
export type _013_PtJakart$LazyStorageDiff = (BigMap | SaplingState)[];
export type Operation =
  | {
      protocol: "PtJakart2xVj7pYXJBXrqHgd82rdkLey5ZeeGwDgPp9rhQUbSqY";
      chain_id: _013_PtJakart$ContractId;
      hash: _013_PtJakart$ContractId;
      branch: _013_PtJakart$ContractId;
      contents: _013_PtJakart$Operation$Alpha$Contents[];
      signature: _013_PtJakart$ContractId;
      metadata: "too large";
    }
  | {
      protocol: "PtJakart2xVj7pYXJBXrqHgd82rdkLey5ZeeGwDgPp9rhQUbSqY";
      chain_id: _013_PtJakart$ContractId;
      hash: _013_PtJakart$ContractId;
      branch: _013_PtJakart$ContractId;
      contents: _013_PtJakart$Operation$Alpha$Contents[];
      signature: _013_PtJakart$ContractId;
    }
  | {
      protocol: "PtJakart2xVj7pYXJBXrqHgd82rdkLey5ZeeGwDgPp9rhQUbSqY";
      chain_id: _013_PtJakart$ContractId;
      hash: _013_PtJakart$ContractId;
      branch: _013_PtJakart$ContractId;
      contents: _013_PtJakart$Operation$Alpha$OperationContentsAndResult[];
      signature?: _013_PtJakart$ContractId;
    }
  | {
      protocol: "PtJakart2xVj7pYXJBXrqHgd82rdkLey5ZeeGwDgPp9rhQUbSqY";
      chain_id: _013_PtJakart$ContractId;
      hash: _013_PtJakart$ContractId;
      branch: _013_PtJakart$ContractId;
      contents: _013_PtJakart$Operation$Alpha$Contents[];
      signature?: _013_PtJakart$ContractId;
    };
export type _013_PtJakart$Operation$Alpha$Contents =
  | Endorsement
  | Preendorsement
  | SeedNonceRevelation
  | DoubleEndorsementEvidence
  | DoublePreendorsementEvidence
  | DoubleBakingEvidence
  | ActivateAccount
  | Proposals
  | Ballot
  | Reveal1
  | Transaction
  | Origination1
  | Delegation1
  | SetDepositsLimit1
  | FailingNoop
  | RegisterGlobalConstant
  | TxRollupOrigination
  | TxRollupSubmitBatch
  | TxRollupCommit
  | TxRollupReturnBond
  | TxRollupFinalizeCommitment
  | TxRollupRemoveCommitment
  | TxRollupRejection
  | TxRollupDispatchTickets
  | TransferTicket
  | ScRollupOriginate1
  | ScRollupAddMessages
  | ScRollupCement
  | ScRollupPublish;
export type _013_PtJakart$Inlined$EndorsementMempool$Contents = Endorsement1;
export type _013_PtJakart$Inlined$Preendorsement$Contents = Preendorsement1;
export type _013_PtJakart$Entrypoint = Default | Root | Do | SetDelegate | RemoveDelegate | Named;
export type Default = "default";
export type Root = "root";
export type Do = "do";
export type SetDelegate = "set_delegate";
export type RemoveDelegate = "remove_delegate";
export type Named = string;
export type Sequence10 = Micheline$013_PtJakart$MichelsonV1$Expression[];
export type Sequence11 = Micheline$013_PtJakart$MichelsonV1$Expression[];
export type Sequence12 = Micheline$013_PtJakart$MichelsonV1$Expression[];
export type Sequence13 = Micheline$013_PtJakart$MichelsonV1$Expression[];
export type None1 = null;
export type None2 = null;
export type None3 = null;
export type ShortBytes = string;
export type MediumBytes = string;
export type UnlimitedBytes = string;
export type Sequence14 = Micheline$013_PtJakart$MichelsonV1$Expression[];
export type Sequence15 = Micheline$013_PtJakart$MichelsonV1$Expression[];
export type Sequence16 = Micheline$013_PtJakart$MichelsonV1$Expression[];
export type Sequence17 = Micheline$013_PtJakart$MichelsonV1$Expression[];
export type _013_PtJakart$Operation$Alpha$OperationContentsAndResult =
  | SeedNonceRevelation1
  | Endorsement2
  | Preendorsement2
  | DoublePreendorsementEvidence1
  | DoubleEndorsementEvidence1
  | DoubleBakingEvidence1
  | ActivateAccount1
  | Proposals1
  | Ballot1
  | Reveal2
  | Transaction2
  | Origination3
  | Delegation3
  | RegisterGlobalConstant1
  | SetDepositsLimit2
  | TxRollupOrigination1
  | TxRollupSubmitBatch1
  | TxRollupCommit1
  | TxRollupReturnBond1
  | TxRollupFinalizeCommitment1
  | TxRollupRemoveCommitment1
  | TxRollupRejection1
  | TransferTicket1
  | TxRollupDispatchTickets1
  | ScRollupOriginate2
  | ScRollupAddMessages1
  | ScRollupCement1
  | ScRollupPublish1;
export type _013_PtJakart$Operation$Alpha$OperationResult$Reveal = Applied | Failed | Skipped | Backtracked;
export type _013_PtJakart$ApplyResults$Alpha$OperationResult = Transaction1 | Origination2 | Delegation2;
export type Sequence18 = Micheline$013_PtJakart$MichelsonV1$Expression[];
export type _013_PtJakart$Operation$Alpha$OperationResult$Transaction =
  | (ToContract1 | ToTxRollup1)
  | Failed1
  | Skipped1
  | (ToContract2 | ToTxRollup2);
export type Sequence19 = Micheline$013_PtJakart$MichelsonV1$Expression[];
export type Sequence20 = Micheline$013_PtJakart$MichelsonV1$Expression[];
export type _013_PtJakart$Operation$Alpha$OperationResult$Origination = Applied1 | Failed2 | Skipped2 | Backtracked1;
export type _013_PtJakart$Operation$Alpha$OperationResult$Delegation = Applied2 | Failed3 | Skipped3 | Backtracked2;
export type Sequence21 = Micheline$013_PtJakart$MichelsonV1$Expression[];
export type Sequence22 = Micheline$013_PtJakart$MichelsonV1$Expression[];
export type _013_PtJakart$Operation$Alpha$OperationResult$RegisterGlobalConstant =
  | Applied3
  | Failed4
  | Skipped4
  | Backtracked3;
export type _013_PtJakart$Operation$Alpha$OperationResult$SetDepositsLimit =
  | Applied4
  | Failed5
  | Skipped5
  | Backtracked4;
export type _013_PtJakart$Operation$Alpha$OperationResult$TxRollupOrigination =
  | Applied5
  | Failed6
  | Skipped6
  | Backtracked5;
export type _013_PtJakart$Operation$Alpha$OperationResult$TxRollupSubmitBatch =
  | Applied6
  | Failed7
  | Skipped7
  | Backtracked6;
export type None4 = null;
export type _013_PtJakart$Operation$Alpha$OperationResult$TxRollupCommit = Applied7 | Failed8 | Skipped8 | Backtracked7;
export type _013_PtJakart$Operation$Alpha$OperationResult$TxRollupReturnBond =
  | Applied8
  | Failed9
  | Skipped9
  | Backtracked8;
export type _013_PtJakart$Operation$Alpha$OperationResult$TxRollupFinalizeCommitment =
  | Applied9
  | Failed10
  | Skipped10
  | Backtracked9;
export type _013_PtJakart$Operation$Alpha$OperationResult$TxRollupRemoveCommitment =
  | Applied10
  | Failed11
  | Skipped11
  | Backtracked10;
export type None5 = null;
export type None6 = null;
export type ShortBytes1 = string;
export type MediumBytes1 = string;
export type UnlimitedBytes1 = string;
export type _013_PtJakart$Operation$Alpha$OperationResult$TxRollupRejection =
  | Applied11
  | Failed12
  | Skipped12
  | Backtracked11;
export type Sequence23 = Micheline$013_PtJakart$MichelsonV1$Expression[];
export type Sequence24 = Micheline$013_PtJakart$MichelsonV1$Expression[];
export type _013_PtJakart$Operation$Alpha$OperationResult$TransferTicket =
  | Applied12
  | Failed13
  | Skipped13
  | Backtracked12;
export type Sequence25 = Micheline$013_PtJakart$MichelsonV1$Expression[];
export type Sequence26 = Micheline$013_PtJakart$MichelsonV1$Expression[];
export type _013_PtJakart$Operation$Alpha$OperationResult$TxRollupDispatchTickets =
  | Applied13
  | Failed14
  | Skipped14
  | Backtracked13;
export type _013_PtJakart$Operation$Alpha$OperationResult$ScRollupOriginate =
  | Applied14
  | Failed15
  | Skipped15
  | Backtracked14;
export type _013_PtJakart$Operation$Alpha$OperationResult$ScRollupAddMessages =
  | Applied15
  | Failed16
  | Skipped16
  | Backtracked15;
export type _013_PtJakart$Operation$Alpha$OperationResult$ScRollupCement =
  | Applied16
  | Failed17
  | Skipped17
  | Backtracked16;
export type _013_PtJakart$Operation$Alpha$OperationResult$ScRollupPublish =
  | Applied17
  | Failed18
  | Skipped18
  | Backtracked17;

export interface Block {
  protocol: "PtJakart2xVj7pYXJBXrqHgd82rdkLey5ZeeGwDgPp9rhQUbSqY";
  chain_id: _013_PtJakart$ContractId;
  hash: _013_PtJakart$ContractId;
  header: ShellHeader;
  metadata?: BlockHeaderMetadata;
  operations: Operation[][];
}
/**
 * Block header's shell-related content. It contains information such as the block level, its predecessor and timestamp.
 */
export interface ShellHeader {
  level: number;
  proto: number;
  predecessor: _013_PtJakart$ContractId;
  timestamp: _013_PtJakart$ContractId;
  validation_pass: number;
  operations_hash: _013_PtJakart$ContractId;
  fitness: BlockFitness;
  context: _013_PtJakart$ContractId;
  payload_hash: _013_PtJakart$ContractId;
  payload_round: number;
  proof_of_work_nonce: string;
  seed_nonce_hash?: _013_PtJakart$ContractId;
  liquidity_baking_toggle_vote: _013_PtJakart$LiquidityBakingToggleVote;
  signature: _013_PtJakart$ContractId;
}
export interface BlockHeaderMetadata {
  protocol: "PtJakart2xVj7pYXJBXrqHgd82rdkLey5ZeeGwDgPp9rhQUbSqY";
  next_protocol: "PtJakart2xVj7pYXJBXrqHgd82rdkLey5ZeeGwDgPp9rhQUbSqY";
  test_chain_status: TestChainStatus;
  max_operations_ttl: number;
  max_operation_data_length: number;
  max_block_header_length: number;
  max_operation_list_length: {
    max_size: number;
    max_op?: number;
  }[];
  proposer: _013_PtJakart$ContractId;
  baker: _013_PtJakart$ContractId;
  level_info: {
    /**
     * The level of the block relative to genesis. This is also the Shell's notion of level.
     */
    level: number;
    /**
     * The level of the block relative to the successor of the genesis block. More precisely, it is the position of the block relative to the block that starts the "Alpha family" of protocols, which includes all protocols except Genesis (that is, from 001 onwards).
     */
    level_position: number;
    /**
     * The current cycle's number. Note that cycles are a protocol-specific notion. As a result, the cycle number starts at 0 with the first block of the Alpha family of protocols.
     */
    cycle: number;
    /**
     * The current level of the block relative to the first block of the current cycle.
     */
    cycle_position: number;
    /**
     * Tells whether the baker of this block has to commit a seed nonce hash.
     */
    expected_commitment: boolean;
  };
  voting_period_info: {
    /**
     * The voting period to which the block belongs.
     */
    voting_period: {
      /**
       * The voting period's index. Starts at 0 with the first block of the Alpha family of protocols.
       */
      index: number;
      kind: Proposal | Exploration | Cooldown | Promotion | Adoption;
      /**
       * The relative position of the first level of the period with respect to the first level of the Alpha family of protocols.
       */
      start_position: number;
    };
    /**
     * The position of the block within the voting period.
     */
    position: number;
    /**
     * The number of blocks remaining till the end of the voting period.
     */
    remaining: number;
  };
  nonce_hash: _013_PtJakart$ContractId | None;
  consumed_gas: PositiveBigNumber;
  deactivated: _013_PtJakart$ContractId[];
  balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  liquidity_baking_toggle_ema: number;
  implicit_operations_results: _013_PtJakart$Operation$Alpha$SuccessfulManagerOperationResult[];
  consumed_milligas: PositiveBigNumber;
}
export interface NotRunning {
  status: "not_running";
}
export interface Forking {
  status: "forking";
  protocol: _013_PtJakart$ContractId;
  expiration: _013_PtJakart$ContractId;
}
export interface Running {
  status: "running";
  chain_id: _013_PtJakart$ContractId;
  genesis: _013_PtJakart$ContractId;
  protocol: _013_PtJakart$ContractId;
  expiration: _013_PtJakart$ContractId;
}
export interface Contract {
  kind: "contract";
  contract: _013_PtJakart$ContractId;
  change: BitIntegers;
  origin: BlockApplication | ProtocolMigration | Subsidy | Simulation;
}
export interface BlockFees {
  kind: "accumulator";
  category: "block fees";
  change: BitIntegers;
  origin: BlockApplication1 | ProtocolMigration1 | Subsidy1 | Simulation1;
}
export interface Deposits {
  kind: "freezer";
  category: "deposits";
  delegate: _013_PtJakart$ContractId;
  change: BitIntegers;
  origin: BlockApplication2 | ProtocolMigration2 | Subsidy2 | Simulation2;
}
export interface NonceRevelationRewards {
  kind: "minted";
  category: "nonce revelation rewards";
  change: BitIntegers;
  origin: BlockApplication3 | ProtocolMigration3 | Subsidy3 | Simulation3;
}
export interface DoubleSigningEvidenceRewards {
  kind: "minted";
  category: "double signing evidence rewards";
  change: BitIntegers;
  origin: BlockApplication4 | ProtocolMigration4 | Subsidy4 | Simulation4;
}
export interface EndorsingRewards {
  kind: "minted";
  category: "endorsing rewards";
  change: BitIntegers;
  origin: BlockApplication5 | ProtocolMigration5 | Subsidy5 | Simulation5;
}
export interface BakingRewards {
  kind: "minted";
  category: "baking rewards";
  change: BitIntegers;
  origin: BlockApplication6 | ProtocolMigration6 | Subsidy6 | Simulation6;
}
export interface BakingBonuses {
  kind: "minted";
  category: "baking bonuses";
  change: BitIntegers;
  origin: BlockApplication7 | ProtocolMigration7 | Subsidy7 | Simulation7;
}
export interface StorageFees {
  kind: "burned";
  category: "storage fees";
  change: BitIntegers;
  origin: BlockApplication8 | ProtocolMigration8 | Subsidy8 | Simulation8;
}
export interface DoubleSigningPunishments {
  kind: "burned";
  category: "punishments";
  change: BitIntegers;
  origin: BlockApplication9 | ProtocolMigration9 | Subsidy9 | Simulation9;
}
export interface LostEndorsingRewards {
  kind: "burned";
  category: "lost endorsing rewards";
  delegate: _013_PtJakart$ContractId;
  participation: boolean;
  revelation: boolean;
  change: BitIntegers;
  origin: BlockApplication10 | ProtocolMigration10 | Subsidy10 | Simulation10;
}
export interface LiquidityBakingSubsidies {
  kind: "minted";
  category: "subsidy";
  change: BitIntegers;
  origin: BlockApplication11 | ProtocolMigration11 | Subsidy11 | Simulation11;
}
export interface Burned {
  kind: "burned";
  category: "burned";
  change: BitIntegers;
  origin: BlockApplication12 | ProtocolMigration12 | Subsidy12 | Simulation12;
}
export interface Commitments {
  kind: "commitment";
  category: "commitment";
  committer: _013_PtJakart$ContractId;
  change: BitIntegers;
  origin: BlockApplication13 | ProtocolMigration13 | Subsidy13 | Simulation13;
}
export interface Bootstrap {
  kind: "minted";
  category: "bootstrap";
  change: BitIntegers;
  origin: BlockApplication14 | ProtocolMigration14 | Subsidy14 | Simulation14;
}
export interface Invoice {
  kind: "minted";
  category: "invoice";
  change: BitIntegers;
  origin: BlockApplication15 | ProtocolMigration15 | Subsidy15 | Simulation15;
}
export interface InitialCommitments {
  kind: "minted";
  category: "commitment";
  change: BitIntegers;
  origin: BlockApplication16 | ProtocolMigration16 | Subsidy16 | Simulation16;
}
export interface Minted {
  kind: "minted";
  category: "minted";
  change: BitIntegers;
  origin: BlockApplication17 | ProtocolMigration17 | Subsidy17 | Simulation17;
}
export interface FrozenBonds {
  kind: "freezer";
  category: "bonds";
  contract: _013_PtJakart$ContractId;
  bond_id: _013_PtJakart$BondId;
  change: BitIntegers;
  origin: BlockApplication18 | ProtocolMigration18 | Subsidy18 | Simulation18;
}
export interface TxRollupBondId {
  tx_rollup: _013_PtJakart$ContractId;
}
export interface TxRollupRejectionRewards {
  kind: "minted";
  category: "tx_rollup_rejection_rewards";
  change: BitIntegers;
  origin: BlockApplication19 | ProtocolMigration19 | Subsidy19 | Simulation19;
}
export interface TxRollupRejectionPunishments {
  kind: "burned";
  category: "tx_rollup_rejection_punishments";
  change: BitIntegers;
  origin: BlockApplication20 | ProtocolMigration20 | Subsidy20 | Simulation20;
}
export interface Reveal {
  kind: "reveal";
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface ToContract {
  kind: "transaction";
  storage?: Int | String | Bytes | Sequence | Prim_Generic1;
  balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _013_PtJakart$ContractId[];
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  allocated_destination_contract?: boolean;
  lazy_storage_diff?: _013_PtJakart$LazyStorageDiff;
}
export interface Int {
  int: BigNumber;
}
export interface String {
  string: _013_PtJakart$ContractId;
}
export interface Bytes {
  bytes: string;
}
export interface Int1 {
  int: BigNumber;
}
export interface String1 {
  string: _013_PtJakart$ContractId;
}
export interface Bytes1 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic {
  prim: _013_PtJakart$Michelson$V1$Primitives;
  args?: Micheline$013_PtJakart$MichelsonV1$Expression[];
  annots?: string[];
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic1 {
  prim: _013_PtJakart$Michelson$V1$Primitives;
  args?: Micheline$013_PtJakart$MichelsonV1$Expression[];
  annots?: string[];
}
export interface BigMap {
  kind: "big_map";
  id: BigNumber;
  diff: Update | Remove | Copy | Alloc;
}
export interface Update {
  action: "update";
  updates: {
    key_hash: _013_PtJakart$ContractId;
    key: Int2 | String2 | Bytes2 | Sequence2 | Prim_Generic2;
    value?: Int3 | String3 | Bytes3 | Sequence3 | Prim_Generic3;
  }[];
}
export interface Int2 {
  int: BigNumber;
}
export interface String2 {
  string: _013_PtJakart$ContractId;
}
export interface Bytes2 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic2 {
  prim: _013_PtJakart$Michelson$V1$Primitives;
  args?: Micheline$013_PtJakart$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int3 {
  int: BigNumber;
}
export interface String3 {
  string: _013_PtJakart$ContractId;
}
export interface Bytes3 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic3 {
  prim: _013_PtJakart$Michelson$V1$Primitives;
  args?: Micheline$013_PtJakart$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Remove {
  action: "remove";
}
export interface Copy {
  action: "copy";
  source: BigNumber;
  updates: {
    key_hash: _013_PtJakart$ContractId;
    key: Int4 | String4 | Bytes4 | Sequence4 | Prim_Generic4;
    value?: Int5 | String5 | Bytes5 | Sequence5 | Prim_Generic5;
  }[];
}
export interface Int4 {
  int: BigNumber;
}
export interface String4 {
  string: _013_PtJakart$ContractId;
}
export interface Bytes4 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic4 {
  prim: _013_PtJakart$Michelson$V1$Primitives;
  args?: Micheline$013_PtJakart$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int5 {
  int: BigNumber;
}
export interface String5 {
  string: _013_PtJakart$ContractId;
}
export interface Bytes5 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic5 {
  prim: _013_PtJakart$Michelson$V1$Primitives;
  args?: Micheline$013_PtJakart$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Alloc {
  action: "alloc";
  updates: {
    key_hash: _013_PtJakart$ContractId;
    key: Int6 | String6 | Bytes6 | Sequence6 | Prim_Generic6;
    value?: Int7 | String7 | Bytes7 | Sequence7 | Prim_Generic7;
  }[];
  key_type: Int8 | String8 | Bytes8 | Sequence8 | Prim_Generic8;
  value_type: Int9 | String9 | Bytes9 | Sequence9 | Prim_Generic9;
}
export interface Int6 {
  int: BigNumber;
}
export interface String6 {
  string: _013_PtJakart$ContractId;
}
export interface Bytes6 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic6 {
  prim: _013_PtJakart$Michelson$V1$Primitives;
  args?: Micheline$013_PtJakart$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int7 {
  int: BigNumber;
}
export interface String7 {
  string: _013_PtJakart$ContractId;
}
export interface Bytes7 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic7 {
  prim: _013_PtJakart$Michelson$V1$Primitives;
  args?: Micheline$013_PtJakart$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int8 {
  int: BigNumber;
}
export interface String8 {
  string: _013_PtJakart$ContractId;
}
export interface Bytes8 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic8 {
  prim: _013_PtJakart$Michelson$V1$Primitives;
  args?: Micheline$013_PtJakart$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int9 {
  int: BigNumber;
}
export interface String9 {
  string: _013_PtJakart$ContractId;
}
export interface Bytes9 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic9 {
  prim: _013_PtJakart$Michelson$V1$Primitives;
  args?: Micheline$013_PtJakart$MichelsonV1$Expression[];
  annots?: string[];
}
export interface SaplingState {
  kind: "sapling_state";
  id: BigNumber;
  diff: Update1 | Remove1 | Copy1 | Alloc1;
}
export interface Update1 {
  action: "update";
  updates: {
    commitments_and_ciphertexts:
      | []
      | [Sapling$Transaction$Commitment]
      | [Sapling$Transaction$Commitment, Sapling$Transaction$Ciphertext][];
    nullifiers: Sapling$Transaction$Nullifier[];
  };
}
export interface Sapling$Transaction$Ciphertext {
  cv: Sapling$Transaction$CommitmentValue;
  epk: Sapling$DH$Epk;
  payload_enc: string;
  nonce_enc: string;
  payload_out: string;
  nonce_out: string;
}
export interface Remove1 {
  action: "remove";
}
export interface Copy1 {
  action: "copy";
  source: BigNumber;
  updates: {
    commitments_and_ciphertexts:
      | []
      | [Sapling$Transaction$Commitment]
      | [Sapling$Transaction$Commitment, Sapling$Transaction$Ciphertext][];
    nullifiers: Sapling$Transaction$Nullifier[];
  };
}
export interface Alloc1 {
  action: "alloc";
  updates: {
    commitments_and_ciphertexts:
      | []
      | [Sapling$Transaction$Commitment]
      | [Sapling$Transaction$Commitment, Sapling$Transaction$Ciphertext][];
    nullifiers: Sapling$Transaction$Nullifier[];
  };
  memo_size: number;
}
export interface ToTxRollup {
  kind: "transaction";
  balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  ticket_hash: _013_PtJakart$ContractId;
  paid_storage_size_diff: PositiveBigNumber;
}
export interface Origination {
  kind: "origination";
  balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _013_PtJakart$ContractId[];
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  lazy_storage_diff?: _013_PtJakart$LazyStorageDiff;
}
export interface Delegation {
  kind: "delegation";
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface SetDepositsLimit {
  kind: "set_deposits_limit";
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface ScRollupOriginate {
  kind: "sc_rollup_originate";
  balance_updates: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  address: _013_PtJakart$ContractId;
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  size: BigNumber;
}
export interface Endorsement {
  kind: "endorsement";
  slot: number;
  level: number;
  round: number;
  block_payload_hash: _013_PtJakart$ContractId;
}
export interface Preendorsement {
  kind: "preendorsement";
  slot: number;
  level: number;
  round: number;
  block_payload_hash: _013_PtJakart$ContractId;
}
export interface SeedNonceRevelation {
  kind: "seed_nonce_revelation";
  level: number;
  nonce: string;
}
export interface DoubleEndorsementEvidence {
  kind: "double_endorsement_evidence";
  op1: _013_PtJakart$Inlined$Endorsement;
  op2: _013_PtJakart$Inlined$Endorsement;
}
/**
 * An operation's shell header.
 */
export interface _013_PtJakart$Inlined$Endorsement {
  branch: _013_PtJakart$ContractId;
  operations: _013_PtJakart$Inlined$EndorsementMempool$Contents;
  signature?: _013_PtJakart$ContractId;
}
export interface Endorsement1 {
  kind: "endorsement";
  slot: number;
  level: number;
  round: number;
  block_payload_hash: _013_PtJakart$ContractId;
}
export interface DoublePreendorsementEvidence {
  kind: "double_preendorsement_evidence";
  op1: _013_PtJakart$Inlined$Preendorsement;
  op2: _013_PtJakart$Inlined$Preendorsement;
}
/**
 * An operation's shell header.
 */
export interface _013_PtJakart$Inlined$Preendorsement {
  branch: _013_PtJakart$ContractId;
  operations: _013_PtJakart$Inlined$Preendorsement$Contents;
  signature?: _013_PtJakart$ContractId;
}
export interface Preendorsement1 {
  kind: "preendorsement";
  slot: number;
  level: number;
  round: number;
  block_payload_hash: _013_PtJakart$ContractId;
}
export interface DoubleBakingEvidence {
  kind: "double_baking_evidence";
  bh1: ShellHeader1;
  bh2: ShellHeader1;
}
/**
 * Block header's shell-related content. It contains information such as the block level, its predecessor and timestamp.
 */
export interface ShellHeader1 {
  level: number;
  proto: number;
  predecessor: _013_PtJakart$ContractId;
  timestamp: _013_PtJakart$ContractId;
  validation_pass: number;
  operations_hash: _013_PtJakart$ContractId;
  fitness: BlockFitness;
  context: _013_PtJakart$ContractId;
  payload_hash: _013_PtJakart$ContractId;
  payload_round: number;
  proof_of_work_nonce: string;
  seed_nonce_hash?: _013_PtJakart$ContractId;
  liquidity_baking_toggle_vote: _013_PtJakart$LiquidityBakingToggleVote;
  signature: _013_PtJakart$ContractId;
}
export interface ActivateAccount {
  kind: "activate_account";
  pkh: _013_PtJakart$ContractId;
  secret: string;
}
export interface Proposals {
  kind: "proposals";
  source: _013_PtJakart$ContractId;
  period: number;
  proposals: _013_PtJakart$ContractId[];
}
export interface Ballot {
  kind: "ballot";
  source: _013_PtJakart$ContractId;
  period: number;
  proposal: _013_PtJakart$ContractId;
  ballot: "nay" | "yay" | "pass";
}
export interface Reveal1 {
  kind: "reveal";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  public_key: _013_PtJakart$ContractId;
}
export interface Transaction {
  kind: "transaction";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  amount: PositiveBigNumber;
  destination: _013_PtJakart$ContractId;
  parameters?: {
    entrypoint: _013_PtJakart$Entrypoint;
    value: Int10 | String10 | Bytes10 | Sequence10 | Prim_Generic10;
  };
}
export interface Int10 {
  int: BigNumber;
}
export interface String10 {
  string: _013_PtJakart$ContractId;
}
export interface Bytes10 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic10 {
  prim: _013_PtJakart$Michelson$V1$Primitives;
  args?: Micheline$013_PtJakart$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Origination1 {
  kind: "origination";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  balance: PositiveBigNumber;
  delegate?: _013_PtJakart$ContractId;
  script: _013_PtJakart$Scripted$Contracts;
}
export interface _013_PtJakart$Scripted$Contracts {
  code: Int11 | String11 | Bytes11 | Sequence11 | Prim_Generic11;
  storage: Int12 | String12 | Bytes12 | Sequence12 | Prim_Generic12;
}
export interface Int11 {
  int: BigNumber;
}
export interface String11 {
  string: _013_PtJakart$ContractId;
}
export interface Bytes11 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic11 {
  prim: _013_PtJakart$Michelson$V1$Primitives;
  args?: Micheline$013_PtJakart$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int12 {
  int: BigNumber;
}
export interface String12 {
  string: _013_PtJakart$ContractId;
}
export interface Bytes12 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic12 {
  prim: _013_PtJakart$Michelson$V1$Primitives;
  args?: Micheline$013_PtJakart$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Delegation1 {
  kind: "delegation";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  delegate?: _013_PtJakart$ContractId;
}
export interface SetDepositsLimit1 {
  kind: "set_deposits_limit";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  limit?: PositiveBigNumber;
}
export interface FailingNoop {
  kind: "failing_noop";
  arbitrary: _013_PtJakart$ContractId;
}
export interface RegisterGlobalConstant {
  kind: "register_global_constant";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  value: Int13 | String13 | Bytes13 | Sequence13 | Prim_Generic13;
}
export interface Int13 {
  int: BigNumber;
}
export interface String13 {
  string: _013_PtJakart$ContractId;
}
export interface Bytes13 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic13 {
  prim: _013_PtJakart$Michelson$V1$Primitives;
  args?: Micheline$013_PtJakart$MichelsonV1$Expression[];
  annots?: string[];
}
export interface TxRollupOrigination {
  kind: "tx_rollup_origination";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  tx_rollup_origination: unknown;
}
export interface TxRollupSubmitBatch {
  kind: "tx_rollup_submit_batch";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _013_PtJakart$ContractId;
  content: string;
  burn_limit?: PositiveBigNumber;
}
export interface TxRollupCommit {
  kind: "tx_rollup_commit";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _013_PtJakart$ContractId;
  commitment: {
    level: number;
    messages: _013_PtJakart$ContractId[];
    predecessor: _013_PtJakart$ContractId | None1;
    inbox_merkle_root: _013_PtJakart$ContractId;
  };
}
export interface TxRollupReturnBond {
  kind: "tx_rollup_return_bond";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _013_PtJakart$ContractId;
}
export interface TxRollupFinalizeCommitment {
  kind: "tx_rollup_finalize_commitment";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _013_PtJakart$ContractId;
}
export interface TxRollupRemoveCommitment {
  kind: "tx_rollup_remove_commitment";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _013_PtJakart$ContractId;
}
export interface TxRollupRejection {
  kind: "tx_rollup_rejection";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _013_PtJakart$ContractId;
  level: number;
  message: Batch | Deposit;
  message_position: PositiveBigNumber;
  message_path: _013_PtJakart$ContractId[];
  message_result_hash: _013_PtJakart$ContractId;
  message_result_path: _013_PtJakart$ContractId[];
  previous_message_result: {
    context_hash: _013_PtJakart$ContractId;
    withdraw_list_hash: _013_PtJakart$ContractId;
  };
  previous_message_result_path: _013_PtJakart$ContractId[];
  proof: {
    version: number;
    before: Value | Node;
    after: Value1 | Node1;
    state: (Inode | OtherElts)[];
  };
}
export interface Batch {
  batch: string;
}
export interface Deposit {
  deposit: {
    sender: _013_PtJakart$ContractId;
    destination: _013_PtJakart$ContractId;
    ticket_hash: _013_PtJakart$ContractId;
    amount: BitIntegers;
  };
}
export interface Value {
  value: _013_PtJakart$ContractId;
}
export interface Node {
  node: _013_PtJakart$ContractId;
}
export interface Value1 {
  value: _013_PtJakart$ContractId;
}
export interface Node1 {
  node: _013_PtJakart$ContractId;
}
export interface Inode {
  inode: {
    length: BitIntegers;
    proofs:
      | []
      | [None2 | _013_PtJakart$ContractId]
      | [None2 | _013_PtJakart$ContractId, None3 | _013_PtJakart$ContractId];
  };
}
export interface OtherElts {
  other_elts: Node2 | OtherElts1;
}
export interface Node2 {
  node: [] | [string] | [string, Value2 | Node3][];
}
export interface Value2 {
  value: _013_PtJakart$ContractId;
}
export interface Node3 {
  node: _013_PtJakart$ContractId;
}
export interface OtherElts1 {
  other_elts: Value3 | InodeExtender;
}
export interface Value3 {
  value: ShortBytes | MediumBytes | LongBytes | UnlimitedBytes;
}
/**
 * This case is void. No data is accepted.
 */
export interface LongBytes {
  [k: string]: unknown;
}
export interface InodeExtender {
  inode_extender: {
    length: BitIntegers;
    segment: string;
    proof: _013_PtJakart$ContractId;
  };
}
export interface TxRollupDispatchTickets {
  kind: "tx_rollup_dispatch_tickets";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  tx_rollup: _013_PtJakart$ContractId;
  level: number;
  context_hash: _013_PtJakart$ContractId;
  message_index: number;
  message_result_path: _013_PtJakart$ContractId[];
  tickets_info: {
    contents: Int14 | String14 | Bytes14 | Sequence14 | Prim_Generic14;
    ty: Int15 | String15 | Bytes15 | Sequence15 | Prim_Generic15;
    ticketer: _013_PtJakart$ContractId;
    amount: BitIntegers;
    claimer: _013_PtJakart$ContractId;
  }[];
}
export interface Int14 {
  int: BigNumber;
}
export interface String14 {
  string: _013_PtJakart$ContractId;
}
export interface Bytes14 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic14 {
  prim: _013_PtJakart$Michelson$V1$Primitives;
  args?: Micheline$013_PtJakart$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int15 {
  int: BigNumber;
}
export interface String15 {
  string: _013_PtJakart$ContractId;
}
export interface Bytes15 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic15 {
  prim: _013_PtJakart$Michelson$V1$Primitives;
  args?: Micheline$013_PtJakart$MichelsonV1$Expression[];
  annots?: string[];
}
export interface TransferTicket {
  kind: "transfer_ticket";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  ticket_contents: Int16 | String16 | Bytes16 | Sequence16 | Prim_Generic16;
  ticket_ty: Int17 | String17 | Bytes17 | Sequence17 | Prim_Generic17;
  ticket_ticketer: _013_PtJakart$ContractId;
  ticket_amount: PositiveBigNumber;
  destination: _013_PtJakart$ContractId;
  entrypoint: _013_PtJakart$ContractId;
}
export interface Int16 {
  int: BigNumber;
}
export interface String16 {
  string: _013_PtJakart$ContractId;
}
export interface Bytes16 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic16 {
  prim: _013_PtJakart$Michelson$V1$Primitives;
  args?: Micheline$013_PtJakart$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int17 {
  int: BigNumber;
}
export interface String17 {
  string: _013_PtJakart$ContractId;
}
export interface Bytes17 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic17 {
  prim: _013_PtJakart$Michelson$V1$Primitives;
  args?: Micheline$013_PtJakart$MichelsonV1$Expression[];
  annots?: string[];
}
export interface ScRollupOriginate1 {
  kind: ExampleArithSmartContractRollupKind;
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  boot_sector: _013_PtJakart$ContractId;
}
export interface ExampleArithSmartContractRollupKind {
  [k: string]: unknown;
}
export interface ScRollupAddMessages {
  kind: "sc_rollup_add_messages";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _013_PtJakart$ContractId;
  message: _013_PtJakart$ContractId[];
}
export interface ScRollupCement {
  kind: "sc_rollup_cement";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _013_PtJakart$ContractId;
  commitment: _013_PtJakart$ContractId;
}
export interface ScRollupPublish {
  kind: "sc_rollup_publish";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _013_PtJakart$ContractId;
  commitment: {
    compressed_state: _013_PtJakart$ContractId;
    inbox_level: number;
    predecessor: _013_PtJakart$ContractId;
    number_of_messages: number;
    number_of_ticks: number;
  };
}
export interface SeedNonceRevelation1 {
  kind: "seed_nonce_revelation";
  level: number;
  nonce: string;
  metadata: {
    balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  };
}
export interface Endorsement2 {
  kind: "endorsement";
  slot: number;
  level: number;
  round: number;
  block_payload_hash: _013_PtJakart$ContractId;
  metadata: {
    balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
    delegate: _013_PtJakart$ContractId;
    endorsement_power: number;
  };
}
export interface Preendorsement2 {
  kind: "preendorsement";
  slot: number;
  level: number;
  round: number;
  block_payload_hash: _013_PtJakart$ContractId;
  metadata: {
    balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
    delegate: _013_PtJakart$ContractId;
    preendorsement_power: number;
  };
}
export interface DoublePreendorsementEvidence1 {
  kind: "double_preendorsement_evidence";
  op1: _013_PtJakart$Inlined$Preendorsement;
  op2: _013_PtJakart$Inlined$Preendorsement;
  metadata: {
    balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  };
}
export interface DoubleEndorsementEvidence1 {
  kind: "double_endorsement_evidence";
  op1: _013_PtJakart$Inlined$Endorsement;
  op2: _013_PtJakart$Inlined$Endorsement;
  metadata: {
    balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  };
}
export interface DoubleBakingEvidence1 {
  kind: "double_baking_evidence";
  bh1: ShellHeader1;
  bh2: ShellHeader1;
  metadata: {
    balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  };
}
export interface ActivateAccount1 {
  kind: "activate_account";
  pkh: _013_PtJakart$ContractId;
  secret: string;
  metadata: {
    balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  };
}
export interface Proposals1 {
  kind: "proposals";
  source: _013_PtJakart$ContractId;
  period: number;
  proposals: _013_PtJakart$ContractId[];
  metadata: {};
}
export interface Ballot1 {
  kind: "ballot";
  source: _013_PtJakart$ContractId;
  period: number;
  proposal: _013_PtJakart$ContractId;
  ballot: "nay" | "yay" | "pass";
  metadata: {};
}
export interface Reveal2 {
  kind: "reveal";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  public_key: _013_PtJakart$ContractId;
  metadata: {
    balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _013_PtJakart$Operation$Alpha$OperationResult$Reveal;
    internal_operation_results?: _013_PtJakart$ApplyResults$Alpha$OperationResult[];
  };
}
export interface Applied {
  status: "applied";
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed {
  status: "failed";
  errors: _013_PtJakart$Error[];
}
/**
 * The full list of RPC errors would be too long to include.
 * It is available at RPC `/errors` (GET).
 * Errors specific to protocol Alpha have an id that starts with `proto.alpha`.
 */
export interface _013_PtJakart$Error {
  [k: string]: unknown;
}
export interface Skipped {
  status: "skipped";
}
export interface Backtracked {
  status: "backtracked";
  errors?: _013_PtJakart$Error[];
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface Transaction1 {
  kind: "transaction";
  source: _013_PtJakart$ContractId;
  nonce: number;
  amount: PositiveBigNumber;
  destination: _013_PtJakart$ContractId;
  parameters?: {
    entrypoint: _013_PtJakart$Entrypoint;
    value: Int18 | String18 | Bytes18 | Sequence18 | Prim_Generic18;
  };
  result: _013_PtJakart$Operation$Alpha$OperationResult$Transaction;
}
export interface Int18 {
  int: BigNumber;
}
export interface String18 {
  string: _013_PtJakart$ContractId;
}
export interface Bytes18 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic18 {
  prim: _013_PtJakart$Michelson$V1$Primitives;
  args?: Micheline$013_PtJakart$MichelsonV1$Expression[];
  annots?: string[];
}
export interface ToContract1 {
  status: "applied";
  storage?: Int19 | String19 | Bytes19 | Sequence19 | Prim_Generic19;
  balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _013_PtJakart$ContractId[];
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  allocated_destination_contract?: boolean;
  lazy_storage_diff?: _013_PtJakart$LazyStorageDiff;
}
export interface Int19 {
  int: BigNumber;
}
export interface String19 {
  string: _013_PtJakart$ContractId;
}
export interface Bytes19 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic19 {
  prim: _013_PtJakart$Michelson$V1$Primitives;
  args?: Micheline$013_PtJakart$MichelsonV1$Expression[];
  annots?: string[];
}
export interface ToTxRollup1 {
  status: "applied";
  balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  ticket_hash: _013_PtJakart$ContractId;
  paid_storage_size_diff: PositiveBigNumber;
}
export interface Failed1 {
  status: "failed";
  errors: _013_PtJakart$Error[];
}
export interface Skipped1 {
  status: "skipped";
}
export interface ToContract2 {
  status: "backtracked";
  errors?: _013_PtJakart$Error[];
  storage?: Int20 | String20 | Bytes20 | Sequence20 | Prim_Generic20;
  balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _013_PtJakart$ContractId[];
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  allocated_destination_contract?: boolean;
  lazy_storage_diff?: _013_PtJakart$LazyStorageDiff;
}
export interface Int20 {
  int: BigNumber;
}
export interface String20 {
  string: _013_PtJakart$ContractId;
}
export interface Bytes20 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic20 {
  prim: _013_PtJakart$Michelson$V1$Primitives;
  args?: Micheline$013_PtJakart$MichelsonV1$Expression[];
  annots?: string[];
}
export interface ToTxRollup2 {
  status: "backtracked";
  errors?: _013_PtJakart$Error[];
  balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  ticket_hash: _013_PtJakart$ContractId;
  paid_storage_size_diff: PositiveBigNumber;
}
export interface Origination2 {
  kind: "origination";
  source: _013_PtJakart$ContractId;
  nonce: number;
  balance: PositiveBigNumber;
  delegate?: _013_PtJakart$ContractId;
  script: _013_PtJakart$Scripted$Contracts;
  result: _013_PtJakart$Operation$Alpha$OperationResult$Origination;
}
export interface Applied1 {
  status: "applied";
  balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _013_PtJakart$ContractId[];
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  lazy_storage_diff?: _013_PtJakart$LazyStorageDiff;
}
export interface Failed2 {
  status: "failed";
  errors: _013_PtJakart$Error[];
}
export interface Skipped2 {
  status: "skipped";
}
export interface Backtracked1 {
  status: "backtracked";
  errors?: _013_PtJakart$Error[];
  balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _013_PtJakart$ContractId[];
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  lazy_storage_diff?: _013_PtJakart$LazyStorageDiff;
}
export interface Delegation2 {
  kind: "delegation";
  source: _013_PtJakart$ContractId;
  nonce: number;
  delegate?: _013_PtJakart$ContractId;
  result: _013_PtJakart$Operation$Alpha$OperationResult$Delegation;
}
export interface Applied2 {
  status: "applied";
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed3 {
  status: "failed";
  errors: _013_PtJakart$Error[];
}
export interface Skipped3 {
  status: "skipped";
}
export interface Backtracked2 {
  status: "backtracked";
  errors?: _013_PtJakart$Error[];
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface Transaction2 {
  kind: "transaction";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  amount: PositiveBigNumber;
  destination: _013_PtJakart$ContractId;
  parameters?: {
    entrypoint: _013_PtJakart$Entrypoint;
    value: Int21 | String21 | Bytes21 | Sequence21 | Prim_Generic21;
  };
  metadata: {
    balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _013_PtJakart$Operation$Alpha$OperationResult$Transaction;
    internal_operation_results?: _013_PtJakart$ApplyResults$Alpha$OperationResult[];
  };
}
export interface Int21 {
  int: BigNumber;
}
export interface String21 {
  string: _013_PtJakart$ContractId;
}
export interface Bytes21 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic21 {
  prim: _013_PtJakart$Michelson$V1$Primitives;
  args?: Micheline$013_PtJakart$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Origination3 {
  kind: "origination";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  balance: PositiveBigNumber;
  delegate?: _013_PtJakart$ContractId;
  script: _013_PtJakart$Scripted$Contracts;
  metadata: {
    balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _013_PtJakart$Operation$Alpha$OperationResult$Origination;
    internal_operation_results?: _013_PtJakart$ApplyResults$Alpha$OperationResult[];
  };
}
export interface Delegation3 {
  kind: "delegation";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  delegate?: _013_PtJakart$ContractId;
  metadata: {
    balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _013_PtJakart$Operation$Alpha$OperationResult$Delegation;
    internal_operation_results?: _013_PtJakart$ApplyResults$Alpha$OperationResult[];
  };
}
export interface RegisterGlobalConstant1 {
  kind: "register_global_constant";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  value: Int22 | String22 | Bytes22 | Sequence22 | Prim_Generic22;
  metadata: {
    balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _013_PtJakart$Operation$Alpha$OperationResult$RegisterGlobalConstant;
    internal_operation_results?: _013_PtJakart$ApplyResults$Alpha$OperationResult[];
  };
}
export interface Int22 {
  int: BigNumber;
}
export interface String22 {
  string: _013_PtJakart$ContractId;
}
export interface Bytes22 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic22 {
  prim: _013_PtJakart$Michelson$V1$Primitives;
  args?: Micheline$013_PtJakart$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Applied3 {
  status: "applied";
  balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  global_address: _013_PtJakart$ContractId;
}
export interface Failed4 {
  status: "failed";
  errors: _013_PtJakart$Error[];
}
export interface Skipped4 {
  status: "skipped";
}
export interface Backtracked3 {
  status: "backtracked";
  errors?: _013_PtJakart$Error[];
  balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  global_address: _013_PtJakart$ContractId;
}
export interface SetDepositsLimit2 {
  kind: "set_deposits_limit";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  limit?: PositiveBigNumber;
  metadata: {
    balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _013_PtJakart$Operation$Alpha$OperationResult$SetDepositsLimit;
    internal_operation_results?: _013_PtJakart$ApplyResults$Alpha$OperationResult[];
  };
}
export interface Applied4 {
  status: "applied";
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed5 {
  status: "failed";
  errors: _013_PtJakart$Error[];
}
export interface Skipped5 {
  status: "skipped";
}
export interface Backtracked4 {
  status: "backtracked";
  errors?: _013_PtJakart$Error[];
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface TxRollupOrigination1 {
  kind: "tx_rollup_origination";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  tx_rollup_origination: unknown;
  metadata: {
    balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _013_PtJakart$Operation$Alpha$OperationResult$TxRollupOrigination;
    internal_operation_results?: _013_PtJakart$ApplyResults$Alpha$OperationResult[];
  };
}
export interface Applied5 {
  status: "applied";
  balance_updates: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  originated_rollup: _013_PtJakart$ContractId;
}
export interface Failed6 {
  status: "failed";
  errors: _013_PtJakart$Error[];
}
export interface Skipped6 {
  status: "skipped";
}
export interface Backtracked5 {
  status: "backtracked";
  errors?: _013_PtJakart$Error[];
  balance_updates: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  originated_rollup: _013_PtJakart$ContractId;
}
export interface TxRollupSubmitBatch1 {
  kind: "tx_rollup_submit_batch";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _013_PtJakart$ContractId;
  content: string;
  burn_limit?: PositiveBigNumber;
  metadata: {
    balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _013_PtJakart$Operation$Alpha$OperationResult$TxRollupSubmitBatch;
    internal_operation_results?: _013_PtJakart$ApplyResults$Alpha$OperationResult[];
  };
}
export interface Applied6 {
  status: "applied";
  balance_updates: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  paid_storage_size_diff: PositiveBigNumber;
}
export interface Failed7 {
  status: "failed";
  errors: _013_PtJakart$Error[];
}
export interface Skipped7 {
  status: "skipped";
}
export interface Backtracked6 {
  status: "backtracked";
  errors?: _013_PtJakart$Error[];
  balance_updates: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  paid_storage_size_diff: PositiveBigNumber;
}
export interface TxRollupCommit1 {
  kind: "tx_rollup_commit";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _013_PtJakart$ContractId;
  commitment: {
    level: number;
    messages: _013_PtJakart$ContractId[];
    predecessor: _013_PtJakart$ContractId | None4;
    inbox_merkle_root: _013_PtJakart$ContractId;
  };
  metadata: {
    balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _013_PtJakart$Operation$Alpha$OperationResult$TxRollupCommit;
    internal_operation_results?: _013_PtJakart$ApplyResults$Alpha$OperationResult[];
  };
}
export interface Applied7 {
  status: "applied";
  balance_updates: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed8 {
  status: "failed";
  errors: _013_PtJakart$Error[];
}
export interface Skipped8 {
  status: "skipped";
}
export interface Backtracked7 {
  status: "backtracked";
  errors?: _013_PtJakart$Error[];
  balance_updates: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface TxRollupReturnBond1 {
  kind: "tx_rollup_return_bond";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _013_PtJakart$ContractId;
  metadata: {
    balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _013_PtJakart$Operation$Alpha$OperationResult$TxRollupReturnBond;
    internal_operation_results?: _013_PtJakart$ApplyResults$Alpha$OperationResult[];
  };
}
export interface Applied8 {
  status: "applied";
  balance_updates: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed9 {
  status: "failed";
  errors: _013_PtJakart$Error[];
}
export interface Skipped9 {
  status: "skipped";
}
export interface Backtracked8 {
  status: "backtracked";
  errors?: _013_PtJakart$Error[];
  balance_updates: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface TxRollupFinalizeCommitment1 {
  kind: "tx_rollup_finalize_commitment";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _013_PtJakart$ContractId;
  metadata: {
    balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _013_PtJakart$Operation$Alpha$OperationResult$TxRollupFinalizeCommitment;
    internal_operation_results?: _013_PtJakart$ApplyResults$Alpha$OperationResult[];
  };
}
export interface Applied9 {
  status: "applied";
  balance_updates: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  level: number;
}
export interface Failed10 {
  status: "failed";
  errors: _013_PtJakart$Error[];
}
export interface Skipped10 {
  status: "skipped";
}
export interface Backtracked9 {
  status: "backtracked";
  errors?: _013_PtJakart$Error[];
  balance_updates: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  level: number;
}
export interface TxRollupRemoveCommitment1 {
  kind: "tx_rollup_remove_commitment";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _013_PtJakart$ContractId;
  metadata: {
    balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _013_PtJakart$Operation$Alpha$OperationResult$TxRollupRemoveCommitment;
    internal_operation_results?: _013_PtJakart$ApplyResults$Alpha$OperationResult[];
  };
}
export interface Applied10 {
  status: "applied";
  balance_updates: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  level: number;
}
export interface Failed11 {
  status: "failed";
  errors: _013_PtJakart$Error[];
}
export interface Skipped11 {
  status: "skipped";
}
export interface Backtracked10 {
  status: "backtracked";
  errors?: _013_PtJakart$Error[];
  balance_updates: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  level: number;
}
export interface TxRollupRejection1 {
  kind: "tx_rollup_rejection";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _013_PtJakart$ContractId;
  level: number;
  message: Batch1 | Deposit1;
  message_position: PositiveBigNumber;
  message_path: _013_PtJakart$ContractId[];
  message_result_hash: _013_PtJakart$ContractId;
  message_result_path: _013_PtJakart$ContractId[];
  previous_message_result: {
    context_hash: _013_PtJakart$ContractId;
    withdraw_list_hash: _013_PtJakart$ContractId;
  };
  previous_message_result_path: _013_PtJakart$ContractId[];
  proof: {
    version: number;
    before: Value4 | Node4;
    after: Value5 | Node5;
    state: (Inode1 | OtherElts2)[];
  };
  metadata: {
    balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _013_PtJakart$Operation$Alpha$OperationResult$TxRollupRejection;
    internal_operation_results?: _013_PtJakart$ApplyResults$Alpha$OperationResult[];
  };
}
export interface Batch1 {
  batch: string;
}
export interface Deposit1 {
  deposit: {
    sender: _013_PtJakart$ContractId;
    destination: _013_PtJakart$ContractId;
    ticket_hash: _013_PtJakart$ContractId;
    amount: BitIntegers;
  };
}
export interface Value4 {
  value: _013_PtJakart$ContractId;
}
export interface Node4 {
  node: _013_PtJakart$ContractId;
}
export interface Value5 {
  value: _013_PtJakart$ContractId;
}
export interface Node5 {
  node: _013_PtJakart$ContractId;
}
export interface Inode1 {
  inode: {
    length: BitIntegers;
    proofs:
      | []
      | [None5 | _013_PtJakart$ContractId]
      | [None5 | _013_PtJakart$ContractId, None6 | _013_PtJakart$ContractId];
  };
}
export interface OtherElts2 {
  other_elts: Node6 | OtherElts3;
}
export interface Node6 {
  node: [] | [string] | [string, Value6 | Node7][];
}
export interface Value6 {
  value: _013_PtJakart$ContractId;
}
export interface Node7 {
  node: _013_PtJakart$ContractId;
}
export interface OtherElts3 {
  other_elts: Value7 | InodeExtender1;
}
export interface Value7 {
  value: ShortBytes1 | MediumBytes1 | LongBytes1 | UnlimitedBytes1;
}
/**
 * This case is void. No data is accepted.
 */
export interface LongBytes1 {
  [k: string]: unknown;
}
export interface InodeExtender1 {
  inode_extender: {
    length: BitIntegers;
    segment: string;
    proof: _013_PtJakart$ContractId;
  };
}
export interface Applied11 {
  status: "applied";
  balance_updates: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed12 {
  status: "failed";
  errors: _013_PtJakart$Error[];
}
export interface Skipped12 {
  status: "skipped";
}
export interface Backtracked11 {
  status: "backtracked";
  errors?: _013_PtJakart$Error[];
  balance_updates: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface TransferTicket1 {
  kind: "transfer_ticket";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  ticket_contents: Int23 | String23 | Bytes23 | Sequence23 | Prim_Generic23;
  ticket_ty: Int24 | String24 | Bytes24 | Sequence24 | Prim_Generic24;
  ticket_ticketer: _013_PtJakart$ContractId;
  ticket_amount: PositiveBigNumber;
  destination: _013_PtJakart$ContractId;
  entrypoint: _013_PtJakart$ContractId;
  metadata: {
    balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _013_PtJakart$Operation$Alpha$OperationResult$TransferTicket;
    internal_operation_results?: _013_PtJakart$ApplyResults$Alpha$OperationResult[];
  };
}
export interface Int23 {
  int: BigNumber;
}
export interface String23 {
  string: _013_PtJakart$ContractId;
}
export interface Bytes23 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic23 {
  prim: _013_PtJakart$Michelson$V1$Primitives;
  args?: Micheline$013_PtJakart$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int24 {
  int: BigNumber;
}
export interface String24 {
  string: _013_PtJakart$ContractId;
}
export interface Bytes24 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic24 {
  prim: _013_PtJakart$Michelson$V1$Primitives;
  args?: Micheline$013_PtJakart$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Applied12 {
  status: "applied";
  balance_updates: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  paid_storage_size_diff?: BigNumber;
}
export interface Failed13 {
  status: "failed";
  errors: _013_PtJakart$Error[];
}
export interface Skipped13 {
  status: "skipped";
}
export interface Backtracked12 {
  status: "backtracked";
  errors?: _013_PtJakart$Error[];
  balance_updates: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  paid_storage_size_diff?: BigNumber;
}
export interface TxRollupDispatchTickets1 {
  kind: "tx_rollup_dispatch_tickets";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  tx_rollup: _013_PtJakart$ContractId;
  level: number;
  context_hash: _013_PtJakart$ContractId;
  message_index: number;
  message_result_path: _013_PtJakart$ContractId[];
  tickets_info: {
    contents: Int25 | String25 | Bytes25 | Sequence25 | Prim_Generic25;
    ty: Int26 | String26 | Bytes26 | Sequence26 | Prim_Generic26;
    ticketer: _013_PtJakart$ContractId;
    amount: BitIntegers;
    claimer: _013_PtJakart$ContractId;
  }[];
  metadata: {
    balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _013_PtJakart$Operation$Alpha$OperationResult$TxRollupDispatchTickets;
    internal_operation_results?: _013_PtJakart$ApplyResults$Alpha$OperationResult[];
  };
}
export interface Int25 {
  int: BigNumber;
}
export interface String25 {
  string: _013_PtJakart$ContractId;
}
export interface Bytes25 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic25 {
  prim: _013_PtJakart$Michelson$V1$Primitives;
  args?: Micheline$013_PtJakart$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int26 {
  int: BigNumber;
}
export interface String26 {
  string: _013_PtJakart$ContractId;
}
export interface Bytes26 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic26 {
  prim: _013_PtJakart$Michelson$V1$Primitives;
  args?: Micheline$013_PtJakart$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Applied13 {
  status: "applied";
  balance_updates: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  paid_storage_size_diff?: BigNumber;
}
export interface Failed14 {
  status: "failed";
  errors: _013_PtJakart$Error[];
}
export interface Skipped14 {
  status: "skipped";
}
export interface Backtracked13 {
  status: "backtracked";
  errors?: _013_PtJakart$Error[];
  balance_updates: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  paid_storage_size_diff?: BigNumber;
}
export interface ScRollupOriginate2 {
  kind: ExampleArithSmartContractRollupKind1;
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  boot_sector: _013_PtJakart$ContractId;
  metadata: {
    balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _013_PtJakart$Operation$Alpha$OperationResult$ScRollupOriginate;
    internal_operation_results?: _013_PtJakart$ApplyResults$Alpha$OperationResult[];
  };
}
export interface ExampleArithSmartContractRollupKind1 {
  [k: string]: unknown;
}
export interface Applied14 {
  status: "applied";
  balance_updates: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  address: _013_PtJakart$ContractId;
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  size: BigNumber;
}
export interface Failed15 {
  status: "failed";
  errors: _013_PtJakart$Error[];
}
export interface Skipped15 {
  status: "skipped";
}
export interface Backtracked14 {
  status: "backtracked";
  errors?: _013_PtJakart$Error[];
  balance_updates: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
  address: _013_PtJakart$ContractId;
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  size: BigNumber;
}
export interface ScRollupAddMessages1 {
  kind: "sc_rollup_add_messages";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _013_PtJakart$ContractId;
  message: _013_PtJakart$ContractId[];
  metadata: {
    balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _013_PtJakart$Operation$Alpha$OperationResult$ScRollupAddMessages;
    internal_operation_results?: _013_PtJakart$ApplyResults$Alpha$OperationResult[];
  };
}
export interface Applied15 {
  status: "applied";
  consumed_gas: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  inbox_after: {
    rollup: _013_PtJakart$ContractId;
    message_counter: PositiveBigNumber;
    nb_available_messages: BitIntegers;
    level: number;
    current_messages_hash: _013_PtJakart$ContractId;
    old_levels_messages: {
      index: number;
      content: _013_PtJakart$ContractId;
      back_pointers: _013_PtJakart$ContractId[];
    };
  };
}
export interface Failed16 {
  status: "failed";
  errors: _013_PtJakart$Error[];
}
export interface Skipped16 {
  status: "skipped";
}
export interface Backtracked15 {
  status: "backtracked";
  errors?: _013_PtJakart$Error[];
  consumed_gas: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  inbox_after: {
    rollup: _013_PtJakart$ContractId;
    message_counter: PositiveBigNumber;
    nb_available_messages: BitIntegers;
    level: number;
    current_messages_hash: _013_PtJakart$ContractId;
    old_levels_messages: {
      index: number;
      content: _013_PtJakart$ContractId;
      back_pointers: _013_PtJakart$ContractId[];
    };
  };
}
export interface ScRollupCement1 {
  kind: "sc_rollup_cement";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _013_PtJakart$ContractId;
  commitment: _013_PtJakart$ContractId;
  metadata: {
    balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _013_PtJakart$Operation$Alpha$OperationResult$ScRollupCement;
    internal_operation_results?: _013_PtJakart$ApplyResults$Alpha$OperationResult[];
  };
}
export interface Applied16 {
  status: "applied";
  consumed_gas: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed17 {
  status: "failed";
  errors: _013_PtJakart$Error[];
}
export interface Skipped17 {
  status: "skipped";
}
export interface Backtracked16 {
  status: "backtracked";
  errors?: _013_PtJakart$Error[];
  consumed_gas: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface ScRollupPublish1 {
  kind: "sc_rollup_publish";
  source: _013_PtJakart$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _013_PtJakart$ContractId;
  commitment: {
    compressed_state: _013_PtJakart$ContractId;
    inbox_level: number;
    predecessor: _013_PtJakart$ContractId;
    number_of_messages: number;
    number_of_ticks: number;
  };
  metadata: {
    balance_updates?: _013_PtJakart$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _013_PtJakart$Operation$Alpha$OperationResult$ScRollupPublish;
    internal_operation_results?: _013_PtJakart$ApplyResults$Alpha$OperationResult[];
  };
}
export interface Applied17 {
  status: "applied";
  consumed_gas: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  staked_hash: _013_PtJakart$ContractId;
}
export interface Failed18 {
  status: "failed";
  errors: _013_PtJakart$Error[];
}
export interface Skipped18 {
  status: "skipped";
}
export interface Backtracked17 {
  status: "backtracked";
  errors?: _013_PtJakart$Error[];
  consumed_gas: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  staked_hash: _013_PtJakart$ContractId;
}
