/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type _011_PtHangz2$ContractId = string;
/**
 * The fitness, or score, of a block, that allow the Tezos to decide which chain is the best. A fitness value is a list of byte sequences. They are compared as follows: shortest lists are smaller; lists of the same length are compared according to the lexicographical order.
 */
export type BlockFitness = string[];
export type TestChainStatus = NotRunning | Forking | Running;
export type Proposal = "proposal";
export type Exploration = "exploration";
export type Cooldown = "cooldown";
export type Promotion = "promotion";
export type Adoption = "adoption";
export type None = null;
/**
 * Decimal representation of a positive big number
 */
export type PositiveBigNumber = string;
/**
 * Decimal representation of 64 bit integers
 */
export type BitIntegers = string;
export type BlockApplication = "block";
export type ProtocolMigration = "migration";
export type Subsidy = "subsidy";
export type BlockApplication1 = "block";
export type ProtocolMigration1 = "migration";
export type Subsidy1 = "subsidy";
export type BlockApplication2 = "block";
export type ProtocolMigration2 = "migration";
export type Subsidy2 = "subsidy";
export type BlockApplication3 = "block";
export type ProtocolMigration3 = "migration";
export type Subsidy3 = "subsidy";
export type _011_PtHangz2$OperationMetadata$Alpha$BalanceUpdates = (
  | Contract
  | Rewards
  | Fees
  | Deposits
)[];
export type _011_PtHangz2$Operation$Alpha$SuccessfulManagerOperationResult =
  | Reveal
  | Transaction
  | Origination
  | Delegation;
/**
 * Decimal representation of a big number
 */
export type BigNumber = string;
export type Micheline$011_PtHangz2$MichelsonV1$Expression =
  | Int1
  | String1
  | Bytes1
  | Sequence1
  | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot;
export type Sequence1 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type _011_PtHangz2$Michelson$V1$Primitives =
  | "ABS"
  | "IF"
  | "SENDER"
  | "VOTING_POWER"
  | "False"
  | "NEVER"
  | "DUG"
  | "chest"
  | "BLAKE2B"
  | "map"
  | "bls12_381_g2"
  | "Pair"
  | "INT"
  | "option"
  | "bls12_381_g1"
  | "storage"
  | "SIZE"
  | "view"
  | "SHA256"
  | "AND"
  | "VIEW"
  | "mutez"
  | "NIL"
  | "big_map"
  | "SUB"
  | "SAPLING_VERIFY_UPDATE"
  | "CHECK_SIGNATURE"
  | "TOTAL_VOTING_POWER"
  | "address"
  | "MAP"
  | "or"
  | "ticket"
  | "ADD"
  | "IMPLICIT_ACCOUNT"
  | "SHA512"
  | "key"
  | "LSL"
  | "bls12_381_fr"
  | "chest_key"
  | "sapling_state"
  | "COMPARE"
  | "TRANSFER_TOKENS"
  | "STEPS_TO_QUOTA"
  | "DROP"
  | "set"
  | "BALANCE"
  | "CONCAT"
  | "MUL"
  | "FAILWITH"
  | "Elt"
  | "list"
  | "OR"
  | "DIP"
  | "MEM"
  | "LOOP_LEFT"
  | "lambda"
  | "ITER"
  | "Some"
  | "parameter"
  | "sapling_transaction"
  | "EMPTY_MAP"
  | "None"
  | "SET_DELEGATE"
  | "pair"
  | "AMOUNT"
  | "string"
  | "PAIRING_CHECK"
  | "bytes"
  | "CHAIN_ID"
  | "HASH_KEY"
  | "IF_LEFT"
  | "CREATE_ACCOUNT"
  | "LT"
  | "KECCAK"
  | "UNPACK"
  | "SPLIT_TICKET"
  | "SELF_ADDRESS"
  | "unit"
  | "UNIT"
  | "LE"
  | "SOURCE"
  | "CREATE_CONTRACT"
  | "Unit"
  | "DIG"
  | "NONE"
  | "ISNAT"
  | "GE"
  | "SOME"
  | "key_hash"
  | "SELF"
  | "signature"
  | "CAR"
  | "NOT"
  | "operation"
  | "CDR"
  | "ADDRESS"
  | "TICKET"
  | "RIGHT"
  | "LEFT"
  | "RENAME"
  | "True"
  | "Right"
  | "PACK"
  | "IF_CONS"
  | "SHA3"
  | "constant"
  | "UPDATE"
  | "EMPTY_SET"
  | "NEQ"
  | "LAMBDA"
  | "timestamp"
  | "READ_TICKET"
  | "LOOP"
  | "Left"
  | "int"
  | "LSR"
  | "EMPTY_BIG_MAP"
  | "chain_id"
  | "OPEN_CHEST"
  | "LEVEL"
  | "UNPAIR"
  | "JOIN_TICKETS"
  | "PUSH"
  | "nat"
  | "GT"
  | "never"
  | "NOW"
  | "IF_NONE"
  | "PAIR"
  | "GET_AND_UPDATE"
  | "XOR"
  | "CAST"
  | "bool"
  | "SAPLING_EMPTY_STATE"
  | "EDIV"
  | "EQ"
  | "CONTRACT"
  | "contract"
  | "EXEC"
  | "GET"
  | "NEG"
  | "SLICE"
  | "DUP"
  | "CONS"
  | "SWAP"
  | "APPLY"
  | "code";
export type Sequence = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence2 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence3 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence4 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence5 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence6 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence7 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence8 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence9 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence10 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence11 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence12 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence13 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sapling$Transaction$Commitment = string;
export type Sapling$Transaction$CommitmentValue = string;
export type Sapling$DH$Epk = string;
export type Sapling$Transaction$Nullifier = string;
export type _011_PtHangz2$LazyStorageDiff = (BigMap | SaplingState)[];
export type Sequence14 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence15 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence16 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence17 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Operation =
  | {
      protocol: "PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx";
      chain_id: _011_PtHangz2$ContractId;
      hash: _011_PtHangz2$ContractId;
      branch: _011_PtHangz2$ContractId;
      contents: _011_PtHangz2$Operation$Alpha$OperationContentsAndResult[];
      signature?: _011_PtHangz2$ContractId;
    }
  | {
      protocol: "PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx";
      chain_id: _011_PtHangz2$ContractId;
      hash: _011_PtHangz2$ContractId;
      branch: _011_PtHangz2$ContractId;
      contents: _011_PtHangz2$Operation$Alpha$Contents[];
      signature?: _011_PtHangz2$ContractId;
    }
  | {
      protocol: "PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx";
      chain_id: _011_PtHangz2$ContractId;
      hash: _011_PtHangz2$ContractId;
      branch: _011_PtHangz2$ContractId;
      contents: _011_PtHangz2$Operation$Alpha$Contents[];
      signature: _011_PtHangz2$ContractId;
    };
export type _011_PtHangz2$Operation$Alpha$OperationContentsAndResult =
  | Endorsement
  | SeedNonceRevelation
  | EndorsementWithSlot
  | DoubleEndorsementEvidence
  | DoubleBakingEvidence
  | ActivateAccount
  | Proposals
  | Ballot
  | Reveal1
  | Transaction2
  | Origination2
  | Delegation2
  | RegisterGlobalConstant1;
export type _011_PtHangz2$Inlined$Endorsement$Contents = Endorsement1;
export type _011_PtHangz2$Operation$Alpha$OperationResult$Reveal =
  | Applied
  | Failed
  | Skipped
  | Backtracked;
export type _011_PtHangz2$Operation$Alpha$InternalOperationResult =
  | Reveal2
  | Transaction1
  | Origination1
  | Delegation1
  | RegisterGlobalConstant;
export type _011_PtHangz2$Entrypoint =
  | Default
  | Root
  | Do
  | SetDelegate
  | RemoveDelegate
  | Named;
export type Default = "default";
export type Root = "root";
export type Do = "do";
export type SetDelegate = "set_delegate";
export type RemoveDelegate = "remove_delegate";
export type Named = string;
export type Sequence18 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type _011_PtHangz2$Operation$Alpha$OperationResult$Transaction =
  | Applied1
  | Failed1
  | Skipped1
  | Backtracked1;
export type Sequence19 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence20 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence21 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence22 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence23 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence24 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence25 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence26 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence27 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence28 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence29 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence30 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type _011_PtHangz2$Operation$Alpha$OperationResult$Origination =
  | Applied2
  | Failed2
  | Skipped2
  | Backtracked2;
export type Sequence31 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence32 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence33 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence34 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence35 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence36 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence37 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence38 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type _011_PtHangz2$Operation$Alpha$OperationResult$Delegation =
  | Applied3
  | Failed3
  | Skipped3
  | Backtracked3;
export type Sequence39 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type _011_PtHangz2$Operation$Alpha$OperationResult$RegisterGlobalConstant =
  Applied4 | Failed4 | Skipped4 | Backtracked4;
export type Sequence40 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence41 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type _011_PtHangz2$Operation$Alpha$Contents =
  | Endorsement2
  | SeedNonceRevelation1
  | EndorsementWithSlot1
  | DoubleEndorsementEvidence1
  | DoubleBakingEvidence1
  | ActivateAccount1
  | Proposals1
  | Ballot1
  | Reveal3
  | Transaction3
  | Origination3
  | Delegation3
  | FailingNoop
  | RegisterGlobalConstant2;
export type Sequence42 = Micheline$011_PtHangz2$MichelsonV1$Expression[];
export type Sequence43 = Micheline$011_PtHangz2$MichelsonV1$Expression[];

export interface Block {
  protocol: "PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx";
  chain_id: _011_PtHangz2$ContractId;
  hash: _011_PtHangz2$ContractId;
  header: ShellHeader;
  metadata?: BlockHeaderMetadata;
  operations: Operation[][];
}
/**
 * Block header's shell-related content. It contains information such as the block level, its predecessor and timestamp.
 */
export interface ShellHeader {
  level: number;
  proto: number;
  predecessor: _011_PtHangz2$ContractId;
  timestamp: _011_PtHangz2$ContractId;
  validation_pass: number;
  operations_hash: _011_PtHangz2$ContractId;
  fitness: BlockFitness;
  context: _011_PtHangz2$ContractId;
  priority: number;
  proof_of_work_nonce: string;
  seed_nonce_hash?: _011_PtHangz2$ContractId;
  liquidity_baking_escape_vote: boolean;
  signature: _011_PtHangz2$ContractId;
}
export interface BlockHeaderMetadata {
  protocol: "PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx";
  next_protocol: "PtHangz2aRngywmSRGGvrcTyMbbdpWdpFKuS4uMWxg2RaH9i1qx";
  test_chain_status: TestChainStatus;
  max_operations_ttl: number;
  max_operation_data_length: number;
  max_block_header_length: number;
  max_operation_list_length: {
    max_size: number;
    max_op?: number;
  }[];
  baker: _011_PtHangz2$ContractId;
  level_info: {
    /**
     * The level of the block relative to genesis. This is also the Shell's notion of level
     */
    level: number;
    /**
     * The level of the block relative to the block that starts protocol alpha. This is specific to the protocol alpha. Other protocols might or might not include a similar notion.
     */
    level_position: number;
    /**
     * The current cycle's number. Note that cycles are a protocol-specific notion. As a result, the cycle number starts at 0 with the first block of protocol alpha.
     */
    cycle: number;
    /**
     * The current level of the block relative to the first block of the current cycle.
     */
    cycle_position: number;
    /**
     * Tells whether the baker of this block has to commit a seed nonce hash.
     */
    expected_commitment: boolean;
  };
  voting_period_info: {
    /**
     * The voting period to which the block belongs.
     */
    voting_period: {
      /**
       * The voting period's index. Starts at 0 with the first block of the Alpha family of protocols.
       */
      index: number;
      kind: Proposal | Exploration | Cooldown | Promotion | Adoption;
      /**
       * The relative position of the first level of the period with respect to the first level of the Alpha family of protocols.
       */
      start_position: number;
    };
    /**
     * The position of the block within the voting period.
     */
    position: number;
    /**
     * The number of blocks remaining till the end of the voting period.
     */
    remaining: number;
  };
  nonce_hash: _011_PtHangz2$ContractId | None;
  consumed_gas: PositiveBigNumber;
  deactivated: _011_PtHangz2$ContractId[];
  balance_updates: _011_PtHangz2$OperationMetadata$Alpha$BalanceUpdates;
  liquidity_baking_escape_ema: number;
  implicit_operations_results: _011_PtHangz2$Operation$Alpha$SuccessfulManagerOperationResult[];
}
export interface NotRunning {
  status: "not_running";
}
export interface Forking {
  status: "forking";
  protocol: _011_PtHangz2$ContractId;
  expiration: _011_PtHangz2$ContractId;
}
export interface Running {
  status: "running";
  chain_id: _011_PtHangz2$ContractId;
  genesis: _011_PtHangz2$ContractId;
  protocol: _011_PtHangz2$ContractId;
  expiration: _011_PtHangz2$ContractId;
}
export interface Contract {
  kind: "contract";
  contract: _011_PtHangz2$ContractId;
  change: BitIntegers;
  origin: BlockApplication | ProtocolMigration | Subsidy;
}
export interface Rewards {
  kind: "freezer";
  category: "rewards";
  delegate: _011_PtHangz2$ContractId;
  cycle: number;
  change: BitIntegers;
  origin: BlockApplication1 | ProtocolMigration1 | Subsidy1;
}
export interface Fees {
  kind: "freezer";
  category: "fees";
  delegate: _011_PtHangz2$ContractId;
  cycle: number;
  change: BitIntegers;
  origin: BlockApplication2 | ProtocolMigration2 | Subsidy2;
}
export interface Deposits {
  kind: "freezer";
  category: "deposits";
  delegate: _011_PtHangz2$ContractId;
  cycle: number;
  change: BitIntegers;
  origin: BlockApplication3 | ProtocolMigration3 | Subsidy3;
}
export interface Reveal {
  kind: "reveal";
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface Transaction {
  kind: "transaction";
  storage?:
    | Int
    | String
    | Bytes
    | Sequence
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot1;
  big_map_diff?: (Update | Remove | Copy | Alloc)[];
  balance_updates?: _011_PtHangz2$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _011_PtHangz2$ContractId[];
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  allocated_destination_contract?: boolean;
  lazy_storage_diff?: _011_PtHangz2$LazyStorageDiff;
}
export interface Int {
  int: BigNumber;
}
export interface String {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes {
  bytes: string;
}
export interface Int1 {
  int: BigNumber;
}
export interface String1 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes1 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot1 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Update {
  action: "update";
  big_map: BigNumber;
  key_hash: _011_PtHangz2$ContractId;
  key:
    | Int2
    | String2
    | Bytes2
    | Sequence2
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot2;
  value?:
    | Int3
    | String3
    | Bytes3
    | Sequence3
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot3;
}
export interface Int2 {
  int: BigNumber;
}
export interface String2 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes2 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot2 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int3 {
  int: BigNumber;
}
export interface String3 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes3 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot3 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Remove {
  action: "remove";
  big_map: BigNumber;
}
export interface Copy {
  action: "copy";
  source_big_map: BigNumber;
  destination_big_map: BigNumber;
}
export interface Alloc {
  action: "alloc";
  big_map: BigNumber;
  key_type:
    | Int4
    | String4
    | Bytes4
    | Sequence4
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot4;
  value_type:
    | Int5
    | String5
    | Bytes5
    | Sequence5
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot5;
}
export interface Int4 {
  int: BigNumber;
}
export interface String4 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes4 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot4 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int5 {
  int: BigNumber;
}
export interface String5 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes5 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot5 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface BigMap {
  kind: "big_map";
  id: BigNumber;
  diff: Update1 | Remove1 | Copy1 | Alloc1;
}
export interface Update1 {
  action: "update";
  updates: {
    key_hash: _011_PtHangz2$ContractId;
    key:
      | Int6
      | String6
      | Bytes6
      | Sequence6
      | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot6;
    value?:
      | Int7
      | String7
      | Bytes7
      | Sequence7
      | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot7;
  }[];
}
export interface Int6 {
  int: BigNumber;
}
export interface String6 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes6 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot6 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int7 {
  int: BigNumber;
}
export interface String7 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes7 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot7 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Remove1 {
  action: "remove";
}
export interface Copy1 {
  action: "copy";
  source: BigNumber;
  updates: {
    key_hash: _011_PtHangz2$ContractId;
    key:
      | Int8
      | String8
      | Bytes8
      | Sequence8
      | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot8;
    value?:
      | Int9
      | String9
      | Bytes9
      | Sequence9
      | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot9;
  }[];
}
export interface Int8 {
  int: BigNumber;
}
export interface String8 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes8 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot8 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int9 {
  int: BigNumber;
}
export interface String9 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes9 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot9 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Alloc1 {
  action: "alloc";
  updates: {
    key_hash: _011_PtHangz2$ContractId;
    key:
      | Int10
      | String10
      | Bytes10
      | Sequence10
      | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot10;
    value?:
      | Int11
      | String11
      | Bytes11
      | Sequence11
      | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot11;
  }[];
  key_type:
    | Int12
    | String12
    | Bytes12
    | Sequence12
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot12;
  value_type:
    | Int13
    | String13
    | Bytes13
    | Sequence13
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot13;
}
export interface Int10 {
  int: BigNumber;
}
export interface String10 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes10 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot10 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int11 {
  int: BigNumber;
}
export interface String11 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes11 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot11 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int12 {
  int: BigNumber;
}
export interface String12 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes12 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot12 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int13 {
  int: BigNumber;
}
export interface String13 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes13 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot13 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface SaplingState {
  kind: "sapling_state";
  id: BigNumber;
  diff: Update2 | Remove2 | Copy2 | Alloc2;
}
export interface Update2 {
  action: "update";
  updates: {
    commitments_and_ciphertexts:
      | []
      | [Sapling$Transaction$Commitment]
      | [Sapling$Transaction$Commitment, Sapling$Transaction$Ciphertext][];
    nullifiers: Sapling$Transaction$Nullifier[];
  };
}
export interface Sapling$Transaction$Ciphertext {
  cv: Sapling$Transaction$CommitmentValue;
  epk: Sapling$DH$Epk;
  payload_enc: string;
  nonce_enc: string;
  payload_out: string;
  nonce_out: string;
}
export interface Remove2 {
  action: "remove";
}
export interface Copy2 {
  action: "copy";
  source: BigNumber;
  updates: {
    commitments_and_ciphertexts:
      | []
      | [Sapling$Transaction$Commitment]
      | [Sapling$Transaction$Commitment, Sapling$Transaction$Ciphertext][];
    nullifiers: Sapling$Transaction$Nullifier[];
  };
}
export interface Alloc2 {
  action: "alloc";
  updates: {
    commitments_and_ciphertexts:
      | []
      | [Sapling$Transaction$Commitment]
      | [Sapling$Transaction$Commitment, Sapling$Transaction$Ciphertext][];
    nullifiers: Sapling$Transaction$Nullifier[];
  };
  memo_size: number;
}
export interface Origination {
  kind: "origination";
  big_map_diff?: (Update3 | Remove3 | Copy3 | Alloc3)[];
  balance_updates?: _011_PtHangz2$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _011_PtHangz2$ContractId[];
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  lazy_storage_diff?: _011_PtHangz2$LazyStorageDiff;
}
export interface Update3 {
  action: "update";
  big_map: BigNumber;
  key_hash: _011_PtHangz2$ContractId;
  key:
    | Int14
    | String14
    | Bytes14
    | Sequence14
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot14;
  value?:
    | Int15
    | String15
    | Bytes15
    | Sequence15
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot15;
}
export interface Int14 {
  int: BigNumber;
}
export interface String14 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes14 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot14 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int15 {
  int: BigNumber;
}
export interface String15 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes15 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot15 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Remove3 {
  action: "remove";
  big_map: BigNumber;
}
export interface Copy3 {
  action: "copy";
  source_big_map: BigNumber;
  destination_big_map: BigNumber;
}
export interface Alloc3 {
  action: "alloc";
  big_map: BigNumber;
  key_type:
    | Int16
    | String16
    | Bytes16
    | Sequence16
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot16;
  value_type:
    | Int17
    | String17
    | Bytes17
    | Sequence17
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot17;
}
export interface Int16 {
  int: BigNumber;
}
export interface String16 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes16 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot16 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int17 {
  int: BigNumber;
}
export interface String17 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes17 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot17 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Delegation {
  kind: "delegation";
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface Endorsement {
  kind: "endorsement";
  level: number;
  metadata: {
    balance_updates: _011_PtHangz2$OperationMetadata$Alpha$BalanceUpdates;
    delegate: _011_PtHangz2$ContractId;
    slots: number[];
  };
}
export interface SeedNonceRevelation {
  kind: "seed_nonce_revelation";
  level: number;
  nonce: string;
  metadata: {
    balance_updates: _011_PtHangz2$OperationMetadata$Alpha$BalanceUpdates;
  };
}
export interface EndorsementWithSlot {
  kind: "endorsement_with_slot";
  endorsement: _011_PtHangz2$Inlined$Endorsement;
  slot: number;
  metadata: {
    balance_updates: _011_PtHangz2$OperationMetadata$Alpha$BalanceUpdates;
    delegate: _011_PtHangz2$ContractId;
    slots: number[];
  };
}
/**
 * An operation's shell header.
 */
export interface _011_PtHangz2$Inlined$Endorsement {
  branch: _011_PtHangz2$ContractId;
  operations: _011_PtHangz2$Inlined$Endorsement$Contents;
  signature?: _011_PtHangz2$ContractId;
}
export interface Endorsement1 {
  kind: "endorsement";
  level: number;
}
export interface DoubleEndorsementEvidence {
  kind: "double_endorsement_evidence";
  op1: _011_PtHangz2$Inlined$Endorsement;
  op2: _011_PtHangz2$Inlined$Endorsement;
  slot: number;
  metadata: {
    balance_updates: _011_PtHangz2$OperationMetadata$Alpha$BalanceUpdates;
  };
}
export interface DoubleBakingEvidence {
  kind: "double_baking_evidence";
  bh1: ShellHeader1;
  bh2: ShellHeader1;
  metadata: {
    balance_updates: _011_PtHangz2$OperationMetadata$Alpha$BalanceUpdates;
  };
}
/**
 * Block header's shell-related content. It contains information such as the block level, its predecessor and timestamp.
 */
export interface ShellHeader1 {
  level: number;
  proto: number;
  predecessor: _011_PtHangz2$ContractId;
  timestamp: _011_PtHangz2$ContractId;
  validation_pass: number;
  operations_hash: _011_PtHangz2$ContractId;
  fitness: BlockFitness;
  context: _011_PtHangz2$ContractId;
  priority: number;
  proof_of_work_nonce: string;
  seed_nonce_hash?: _011_PtHangz2$ContractId;
  liquidity_baking_escape_vote: boolean;
  signature: _011_PtHangz2$ContractId;
}
export interface ActivateAccount {
  kind: "activate_account";
  pkh: _011_PtHangz2$ContractId;
  secret: string;
  metadata: {
    balance_updates: _011_PtHangz2$OperationMetadata$Alpha$BalanceUpdates;
  };
}
export interface Proposals {
  kind: "proposals";
  source: _011_PtHangz2$ContractId;
  period: number;
  proposals: _011_PtHangz2$ContractId[];
  metadata: {};
}
export interface Ballot {
  kind: "ballot";
  source: _011_PtHangz2$ContractId;
  period: number;
  proposal: _011_PtHangz2$ContractId;
  ballot: "nay" | "yay" | "pass";
  metadata: {};
}
export interface Reveal1 {
  kind: "reveal";
  source: _011_PtHangz2$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  public_key: _011_PtHangz2$ContractId;
  metadata: {
    balance_updates: _011_PtHangz2$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _011_PtHangz2$Operation$Alpha$OperationResult$Reveal;
    internal_operation_results?: _011_PtHangz2$Operation$Alpha$InternalOperationResult[];
  };
}
export interface Applied {
  status: "applied";
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed {
  status: "failed";
  errors: _011_PtHangz2$Error[];
}
/**
 * The full list of RPC errors would be too long to include.
 * It is available at RPC `/errors` (GET).
 * Errors specific to protocol Alpha have an id that starts with `proto.alpha`.
 */
export interface _011_PtHangz2$Error {
  [k: string]: unknown;
}
export interface Skipped {
  status: "skipped";
}
export interface Backtracked {
  status: "backtracked";
  errors?: _011_PtHangz2$Error[];
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface Reveal2 {
  kind: "reveal";
  source: _011_PtHangz2$ContractId;
  nonce: number;
  public_key: _011_PtHangz2$ContractId;
  result: _011_PtHangz2$Operation$Alpha$OperationResult$Reveal;
}
export interface Transaction1 {
  kind: "transaction";
  source: _011_PtHangz2$ContractId;
  nonce: number;
  amount: PositiveBigNumber;
  destination: _011_PtHangz2$ContractId;
  parameters?: {
    entrypoint: _011_PtHangz2$Entrypoint;
    value:
      | Int18
      | String18
      | Bytes18
      | Sequence18
      | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot18;
  };
  result: _011_PtHangz2$Operation$Alpha$OperationResult$Transaction;
}
export interface Int18 {
  int: BigNumber;
}
export interface String18 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes18 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot18 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Applied1 {
  status: "applied";
  storage?:
    | Int19
    | String19
    | Bytes19
    | Sequence19
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot19;
  big_map_diff?: (Update4 | Remove4 | Copy4 | Alloc4)[];
  balance_updates?: _011_PtHangz2$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _011_PtHangz2$ContractId[];
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  allocated_destination_contract?: boolean;
  lazy_storage_diff?: _011_PtHangz2$LazyStorageDiff;
}
export interface Int19 {
  int: BigNumber;
}
export interface String19 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes19 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot19 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Update4 {
  action: "update";
  big_map: BigNumber;
  key_hash: _011_PtHangz2$ContractId;
  key:
    | Int20
    | String20
    | Bytes20
    | Sequence20
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot20;
  value?:
    | Int21
    | String21
    | Bytes21
    | Sequence21
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot21;
}
export interface Int20 {
  int: BigNumber;
}
export interface String20 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes20 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot20 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int21 {
  int: BigNumber;
}
export interface String21 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes21 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot21 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Remove4 {
  action: "remove";
  big_map: BigNumber;
}
export interface Copy4 {
  action: "copy";
  source_big_map: BigNumber;
  destination_big_map: BigNumber;
}
export interface Alloc4 {
  action: "alloc";
  big_map: BigNumber;
  key_type:
    | Int22
    | String22
    | Bytes22
    | Sequence22
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot22;
  value_type:
    | Int23
    | String23
    | Bytes23
    | Sequence23
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot23;
}
export interface Int22 {
  int: BigNumber;
}
export interface String22 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes22 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot22 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int23 {
  int: BigNumber;
}
export interface String23 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes23 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot23 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Failed1 {
  status: "failed";
  errors: _011_PtHangz2$Error[];
}
export interface Skipped1 {
  status: "skipped";
}
export interface Backtracked1 {
  status: "backtracked";
  errors?: _011_PtHangz2$Error[];
  storage?:
    | Int24
    | String24
    | Bytes24
    | Sequence24
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot24;
  big_map_diff?: (Update5 | Remove5 | Copy5 | Alloc5)[];
  balance_updates?: _011_PtHangz2$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _011_PtHangz2$ContractId[];
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  allocated_destination_contract?: boolean;
  lazy_storage_diff?: _011_PtHangz2$LazyStorageDiff;
}
export interface Int24 {
  int: BigNumber;
}
export interface String24 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes24 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot24 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Update5 {
  action: "update";
  big_map: BigNumber;
  key_hash: _011_PtHangz2$ContractId;
  key:
    | Int25
    | String25
    | Bytes25
    | Sequence25
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot25;
  value?:
    | Int26
    | String26
    | Bytes26
    | Sequence26
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot26;
}
export interface Int25 {
  int: BigNumber;
}
export interface String25 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes25 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot25 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int26 {
  int: BigNumber;
}
export interface String26 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes26 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot26 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Remove5 {
  action: "remove";
  big_map: BigNumber;
}
export interface Copy5 {
  action: "copy";
  source_big_map: BigNumber;
  destination_big_map: BigNumber;
}
export interface Alloc5 {
  action: "alloc";
  big_map: BigNumber;
  key_type:
    | Int27
    | String27
    | Bytes27
    | Sequence27
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot27;
  value_type:
    | Int28
    | String28
    | Bytes28
    | Sequence28
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot28;
}
export interface Int27 {
  int: BigNumber;
}
export interface String27 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes27 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot27 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int28 {
  int: BigNumber;
}
export interface String28 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes28 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot28 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Origination1 {
  kind: "origination";
  source: _011_PtHangz2$ContractId;
  nonce: number;
  balance: PositiveBigNumber;
  delegate?: _011_PtHangz2$ContractId;
  script: _011_PtHangz2$Scripted$Contracts;
  result: _011_PtHangz2$Operation$Alpha$OperationResult$Origination;
}
export interface _011_PtHangz2$Scripted$Contracts {
  code:
    | Int29
    | String29
    | Bytes29
    | Sequence29
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot29;
  storage:
    | Int30
    | String30
    | Bytes30
    | Sequence30
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot30;
}
export interface Int29 {
  int: BigNumber;
}
export interface String29 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes29 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot29 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int30 {
  int: BigNumber;
}
export interface String30 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes30 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot30 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Applied2 {
  status: "applied";
  big_map_diff?: (Update6 | Remove6 | Copy6 | Alloc6)[];
  balance_updates?: _011_PtHangz2$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _011_PtHangz2$ContractId[];
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  lazy_storage_diff?: _011_PtHangz2$LazyStorageDiff;
}
export interface Update6 {
  action: "update";
  big_map: BigNumber;
  key_hash: _011_PtHangz2$ContractId;
  key:
    | Int31
    | String31
    | Bytes31
    | Sequence31
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot31;
  value?:
    | Int32
    | String32
    | Bytes32
    | Sequence32
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot32;
}
export interface Int31 {
  int: BigNumber;
}
export interface String31 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes31 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot31 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int32 {
  int: BigNumber;
}
export interface String32 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes32 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot32 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Remove6 {
  action: "remove";
  big_map: BigNumber;
}
export interface Copy6 {
  action: "copy";
  source_big_map: BigNumber;
  destination_big_map: BigNumber;
}
export interface Alloc6 {
  action: "alloc";
  big_map: BigNumber;
  key_type:
    | Int33
    | String33
    | Bytes33
    | Sequence33
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot33;
  value_type:
    | Int34
    | String34
    | Bytes34
    | Sequence34
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot34;
}
export interface Int33 {
  int: BigNumber;
}
export interface String33 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes33 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot33 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int34 {
  int: BigNumber;
}
export interface String34 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes34 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot34 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Failed2 {
  status: "failed";
  errors: _011_PtHangz2$Error[];
}
export interface Skipped2 {
  status: "skipped";
}
export interface Backtracked2 {
  status: "backtracked";
  errors?: _011_PtHangz2$Error[];
  big_map_diff?: (Update7 | Remove7 | Copy7 | Alloc7)[];
  balance_updates?: _011_PtHangz2$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _011_PtHangz2$ContractId[];
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  lazy_storage_diff?: _011_PtHangz2$LazyStorageDiff;
}
export interface Update7 {
  action: "update";
  big_map: BigNumber;
  key_hash: _011_PtHangz2$ContractId;
  key:
    | Int35
    | String35
    | Bytes35
    | Sequence35
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot35;
  value?:
    | Int36
    | String36
    | Bytes36
    | Sequence36
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot36;
}
export interface Int35 {
  int: BigNumber;
}
export interface String35 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes35 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot35 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int36 {
  int: BigNumber;
}
export interface String36 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes36 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot36 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Remove7 {
  action: "remove";
  big_map: BigNumber;
}
export interface Copy7 {
  action: "copy";
  source_big_map: BigNumber;
  destination_big_map: BigNumber;
}
export interface Alloc7 {
  action: "alloc";
  big_map: BigNumber;
  key_type:
    | Int37
    | String37
    | Bytes37
    | Sequence37
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot37;
  value_type:
    | Int38
    | String38
    | Bytes38
    | Sequence38
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot38;
}
export interface Int37 {
  int: BigNumber;
}
export interface String37 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes37 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot37 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int38 {
  int: BigNumber;
}
export interface String38 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes38 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot38 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Delegation1 {
  kind: "delegation";
  source: _011_PtHangz2$ContractId;
  nonce: number;
  delegate?: _011_PtHangz2$ContractId;
  result: _011_PtHangz2$Operation$Alpha$OperationResult$Delegation;
}
export interface Applied3 {
  status: "applied";
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed3 {
  status: "failed";
  errors: _011_PtHangz2$Error[];
}
export interface Skipped3 {
  status: "skipped";
}
export interface Backtracked3 {
  status: "backtracked";
  errors?: _011_PtHangz2$Error[];
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface RegisterGlobalConstant {
  kind: "register_global_constant";
  source: _011_PtHangz2$ContractId;
  nonce: number;
  value:
    | Int39
    | String39
    | Bytes39
    | Sequence39
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot39;
  result: _011_PtHangz2$Operation$Alpha$OperationResult$RegisterGlobalConstant;
}
export interface Int39 {
  int: BigNumber;
}
export interface String39 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes39 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot39 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Applied4 {
  status: "applied";
  balance_updates: _011_PtHangz2$OperationMetadata$Alpha$BalanceUpdates;
  consumed_gas: PositiveBigNumber;
  storage_size: BigNumber;
  global_address: _011_PtHangz2$ContractId;
}
export interface Failed4 {
  status: "failed";
  errors: _011_PtHangz2$Error[];
}
export interface Skipped4 {
  status: "skipped";
}
export interface Backtracked4 {
  status: "backtracked";
  errors?: _011_PtHangz2$Error[];
  balance_updates: _011_PtHangz2$OperationMetadata$Alpha$BalanceUpdates;
  consumed_gas: PositiveBigNumber;
  storage_size: BigNumber;
  global_address: _011_PtHangz2$ContractId;
}
export interface Transaction2 {
  kind: "transaction";
  source: _011_PtHangz2$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  amount: PositiveBigNumber;
  destination: _011_PtHangz2$ContractId;
  parameters?: {
    entrypoint: _011_PtHangz2$Entrypoint;
    value:
      | Int40
      | String40
      | Bytes40
      | Sequence40
      | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot40;
  };
  metadata: {
    balance_updates: _011_PtHangz2$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _011_PtHangz2$Operation$Alpha$OperationResult$Transaction;
    internal_operation_results?: _011_PtHangz2$Operation$Alpha$InternalOperationResult[];
  };
}
export interface Int40 {
  int: BigNumber;
}
export interface String40 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes40 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot40 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Origination2 {
  kind: "origination";
  source: _011_PtHangz2$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  balance: PositiveBigNumber;
  delegate?: _011_PtHangz2$ContractId;
  script: _011_PtHangz2$Scripted$Contracts;
  metadata: {
    balance_updates: _011_PtHangz2$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _011_PtHangz2$Operation$Alpha$OperationResult$Origination;
    internal_operation_results?: _011_PtHangz2$Operation$Alpha$InternalOperationResult[];
  };
}
export interface Delegation2 {
  kind: "delegation";
  source: _011_PtHangz2$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  delegate?: _011_PtHangz2$ContractId;
  metadata: {
    balance_updates: _011_PtHangz2$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _011_PtHangz2$Operation$Alpha$OperationResult$Delegation;
    internal_operation_results?: _011_PtHangz2$Operation$Alpha$InternalOperationResult[];
  };
}
export interface RegisterGlobalConstant1 {
  kind: "register_global_constant";
  source: _011_PtHangz2$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  value:
    | Int41
    | String41
    | Bytes41
    | Sequence41
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot41;
  metadata: {
    balance_updates: _011_PtHangz2$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _011_PtHangz2$Operation$Alpha$OperationResult$RegisterGlobalConstant;
    internal_operation_results?: _011_PtHangz2$Operation$Alpha$InternalOperationResult[];
  };
}
export interface Int41 {
  int: BigNumber;
}
export interface String41 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes41 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot41 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Endorsement2 {
  kind: "endorsement";
  level: number;
}
export interface SeedNonceRevelation1 {
  kind: "seed_nonce_revelation";
  level: number;
  nonce: string;
}
export interface EndorsementWithSlot1 {
  kind: "endorsement_with_slot";
  endorsement: _011_PtHangz2$Inlined$Endorsement;
  slot: number;
}
export interface DoubleEndorsementEvidence1 {
  kind: "double_endorsement_evidence";
  op1: _011_PtHangz2$Inlined$Endorsement;
  op2: _011_PtHangz2$Inlined$Endorsement;
  slot: number;
}
export interface DoubleBakingEvidence1 {
  kind: "double_baking_evidence";
  bh1: ShellHeader1;
  bh2: ShellHeader1;
}
export interface ActivateAccount1 {
  kind: "activate_account";
  pkh: _011_PtHangz2$ContractId;
  secret: string;
}
export interface Proposals1 {
  kind: "proposals";
  source: _011_PtHangz2$ContractId;
  period: number;
  proposals: _011_PtHangz2$ContractId[];
}
export interface Ballot1 {
  kind: "ballot";
  source: _011_PtHangz2$ContractId;
  period: number;
  proposal: _011_PtHangz2$ContractId;
  ballot: "nay" | "yay" | "pass";
}
export interface Reveal3 {
  kind: "reveal";
  source: _011_PtHangz2$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  public_key: _011_PtHangz2$ContractId;
}
export interface Transaction3 {
  kind: "transaction";
  source: _011_PtHangz2$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  amount: PositiveBigNumber;
  destination: _011_PtHangz2$ContractId;
  parameters?: {
    entrypoint: _011_PtHangz2$Entrypoint;
    value:
      | Int42
      | String42
      | Bytes42
      | Sequence42
      | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot42;
  };
}
export interface Int42 {
  int: BigNumber;
}
export interface String42 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes42 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot42 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Origination3 {
  kind: "origination";
  source: _011_PtHangz2$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  balance: PositiveBigNumber;
  delegate?: _011_PtHangz2$ContractId;
  script: _011_PtHangz2$Scripted$Contracts;
}
export interface Delegation3 {
  kind: "delegation";
  source: _011_PtHangz2$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  delegate?: _011_PtHangz2$ContractId;
}
export interface FailingNoop {
  kind: "failing_noop";
  arbitrary: _011_PtHangz2$ContractId;
}
export interface RegisterGlobalConstant2 {
  kind: "register_global_constant";
  source: _011_PtHangz2$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  value:
    | Int43
    | String43
    | Bytes43
    | Sequence43
    | GenericPrimAnyNumberOfArgsWithOrWithoutAnnot43;
}
export interface Int43 {
  int: BigNumber;
}
export interface String43 {
  string: _011_PtHangz2$ContractId;
}
export interface Bytes43 {
  bytes: string;
}
export interface GenericPrimAnyNumberOfArgsWithOrWithoutAnnot43 {
  prim: _011_PtHangz2$Michelson$V1$Primitives;
  args?: Micheline$011_PtHangz2$MichelsonV1$Expression[];
  annots?: string[];
}
