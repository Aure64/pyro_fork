/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type _017_PtNairob$ContractId = string;
/**
 * The fitness, or score, of a block, that allow the Tezos to decide which chain is the best. A fitness value is a list of byte sequences. They are compared as follows: shortest lists are smaller; lists of the same length are compared according to the lexicographical order.
 */
export type BlockFitness = string[];
export type _017_PtNairob$LiquidityBakingToggleVote = "off" | "on" | "pass";
export type TestChainStatus = NotRunning | Forking | Running;
export type Proposal = "proposal";
export type Exploration = "exploration";
export type Cooldown = "cooldown";
export type Promotion = "promotion";
export type Adoption = "adoption";
export type None = null;
/**
 * Decimal representation of 64 bit integers
 */
export type BitIntegers = string;
export type BlockApplication = "block";
export type ProtocolMigration = "migration";
export type Subsidy = "subsidy";
export type Simulation = "simulation";
export type BlockApplication1 = "block";
export type ProtocolMigration1 = "migration";
export type Subsidy1 = "subsidy";
export type Simulation1 = "simulation";
export type BlockApplication2 = "block";
export type ProtocolMigration2 = "migration";
export type Subsidy2 = "subsidy";
export type Simulation2 = "simulation";
export type BlockApplication3 = "block";
export type ProtocolMigration3 = "migration";
export type Subsidy3 = "subsidy";
export type Simulation3 = "simulation";
export type BlockApplication4 = "block";
export type ProtocolMigration4 = "migration";
export type Subsidy4 = "subsidy";
export type Simulation4 = "simulation";
export type BlockApplication5 = "block";
export type ProtocolMigration5 = "migration";
export type Subsidy5 = "subsidy";
export type Simulation5 = "simulation";
export type BlockApplication6 = "block";
export type ProtocolMigration6 = "migration";
export type Subsidy6 = "subsidy";
export type Simulation6 = "simulation";
export type BlockApplication7 = "block";
export type ProtocolMigration7 = "migration";
export type Subsidy7 = "subsidy";
export type Simulation7 = "simulation";
export type BlockApplication8 = "block";
export type ProtocolMigration8 = "migration";
export type Subsidy8 = "subsidy";
export type Simulation8 = "simulation";
export type BlockApplication9 = "block";
export type ProtocolMigration9 = "migration";
export type Subsidy9 = "subsidy";
export type Simulation9 = "simulation";
export type BlockApplication10 = "block";
export type ProtocolMigration10 = "migration";
export type Subsidy10 = "subsidy";
export type Simulation10 = "simulation";
export type BlockApplication11 = "block";
export type ProtocolMigration11 = "migration";
export type Subsidy11 = "subsidy";
export type Simulation11 = "simulation";
export type BlockApplication12 = "block";
export type ProtocolMigration12 = "migration";
export type Subsidy12 = "subsidy";
export type Simulation12 = "simulation";
export type BlockApplication13 = "block";
export type ProtocolMigration13 = "migration";
export type Subsidy13 = "subsidy";
export type Simulation13 = "simulation";
export type BlockApplication14 = "block";
export type ProtocolMigration14 = "migration";
export type Subsidy14 = "subsidy";
export type Simulation14 = "simulation";
export type BlockApplication15 = "block";
export type ProtocolMigration15 = "migration";
export type Subsidy15 = "subsidy";
export type Simulation15 = "simulation";
export type BlockApplication16 = "block";
export type ProtocolMigration16 = "migration";
export type Subsidy16 = "subsidy";
export type Simulation16 = "simulation";
export type BlockApplication17 = "block";
export type ProtocolMigration17 = "migration";
export type Subsidy17 = "subsidy";
export type Simulation17 = "simulation";
export type _017_PtNairob$BondId = TxRollupBondId | SmartRollupBondId;
export type BlockApplication18 = "block";
export type ProtocolMigration18 = "migration";
export type Subsidy18 = "subsidy";
export type Simulation18 = "simulation";
export type BlockApplication19 = "block";
export type ProtocolMigration19 = "migration";
export type Subsidy19 = "subsidy";
export type Simulation19 = "simulation";
export type BlockApplication20 = "block";
export type ProtocolMigration20 = "migration";
export type Subsidy20 = "subsidy";
export type Simulation20 = "simulation";
export type BlockApplication21 = "block";
export type ProtocolMigration21 = "migration";
export type Subsidy21 = "subsidy";
export type Simulation21 = "simulation";
export type BlockApplication22 = "block";
export type ProtocolMigration22 = "migration";
export type Subsidy22 = "subsidy";
export type Simulation22 = "simulation";
export type _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates = (
  | Contract
  | BlockFees
  | Deposits
  | NonceRevelationRewards
  | DoubleSigningEvidenceRewards
  | EndorsingRewards
  | BakingRewards
  | BakingBonuses
  | StorageFees
  | DoubleSigningPunishments
  | LostEndorsingRewards
  | LiquidityBakingSubsidies
  | Burned
  | Commitments
  | Bootstrap
  | Invoice
  | InitialCommitments
  | Minted
  | FrozenBonds
  | TxRollupRejectionRewards
  | TxRollupRejectionPunishments
  | SmartRollupRefutationPunishments
  | SmartRollupRefutationRewards
)[];
export type _017_PtNairob$Operation$Alpha$SuccessfulManagerOperationResult =
  | Reveal
  | (ToContract | ToTxRollup | ToSmartRollup)
  | Origination
  | Delegation
  | UpdateConsensusKey
  | SetDepositsLimit
  | IncreasePaidStorage
  | SmartRollupOriginate;
/**
 * Decimal representation of a positive big number
 */
export type PositiveBigNumber = string;
export type Micheline$017_PtNairob$MichelsonV1$Expression = Int | String | Bytes | Sequence | Prim_Generic;
/**
 * Decimal representation of a big number
 */
export type BigNumber = string;
export type Sequence = Micheline$017_PtNairob$MichelsonV1$Expression[];
export type _017_PtNairob$Michelson$V1$Primitives =
  | "SHA512"
  | "HASH_KEY"
  | "SIZE"
  | "SAPLING_VERIFY_UPDATE"
  | "False"
  | "SAPLING_EMPTY_STATE"
  | "RENAME"
  | "sapling_transaction"
  | "UNPACK"
  | "NAT"
  | "unit"
  | "bls12_381_fr"
  | "Pair"
  | "IF_NONE"
  | "int"
  | "timestamp"
  | "storage"
  | "UNPAIR"
  | "view"
  | "BLAKE2B"
  | "AMOUNT"
  | "DUP"
  | "nat"
  | "NEG"
  | "bool"
  | "SELF_ADDRESS"
  | "ISNAT"
  | "DIG"
  | "CHAIN_ID"
  | "set"
  | "LSR"
  | "key"
  | "address"
  | "ABS"
  | "CREATE_CONTRACT"
  | "SHA256"
  | "JOIN_TICKETS"
  | "LEVEL"
  | "bls12_381_g1"
  | "operation"
  | "tx_rollup_l2_address"
  | "string"
  | "CHECK_SIGNATURE"
  | "STEPS_TO_QUOTA"
  | "SELF"
  | "DIP"
  | "lambda"
  | "AND"
  | "COMPARE"
  | "chain_id"
  | "MAP"
  | "APPLY"
  | "Elt"
  | "BYTES"
  | "NOT"
  | "IMPLICIT_ACCOUNT"
  | "LT"
  | "UNIT"
  | "EMIT"
  | "SET_DELEGATE"
  | "Some"
  | "parameter"
  | "signature"
  | "ticket"
  | "EMPTY_BIG_MAP"
  | "None"
  | "SUB"
  | "key_hash"
  | "ADD"
  | "map"
  | "VOTING_POWER"
  | "big_map"
  | "CDR"
  | "GT"
  | "IF_CONS"
  | "CONS"
  | "LSL"
  | "DUG"
  | "PACK"
  | "SHA3"
  | "SOURCE"
  | "or"
  | "SUB_MUTEZ"
  | "LAMBDA"
  | "RIGHT"
  | "CREATE_ACCOUNT"
  | "Unit"
  | "CAST"
  | "NEQ"
  | "ITER"
  | "FAILWITH"
  | "PUSH"
  | "OPEN_CHEST"
  | "SOME"
  | "list"
  | "BALANCE"
  | "NIL"
  | "pair"
  | "CAR"
  | "UPDATE"
  | "TOTAL_VOTING_POWER"
  | "PAIR"
  | "constant"
  | "LAMBDA_REC"
  | "ADDRESS"
  | "True"
  | "Right"
  | "Lambda_rec"
  | "IF"
  | "NEVER"
  | "sapling_transaction_deprecated"
  | "SWAP"
  | "EMPTY_MAP"
  | "MUL"
  | "INT"
  | "option"
  | "KECCAK"
  | "LEFT"
  | "Left"
  | "chest"
  | "SPLIT_TICKET"
  | "chest_key"
  | "bls12_381_g2"
  | "EDIV"
  | "LOOP"
  | "bytes"
  | "TICKET"
  | "LE"
  | "PAIRING_CHECK"
  | "MIN_BLOCK_TIME"
  | "OR"
  | "contract"
  | "GET_AND_UPDATE"
  | "mutez"
  | "sapling_state"
  | "NONE"
  | "IF_LEFT"
  | "GET"
  | "NOW"
  | "TRANSFER_TOKENS"
  | "LOOP_LEFT"
  | "CONTRACT"
  | "TICKET_DEPRECATED"
  | "VIEW"
  | "EMPTY_SET"
  | "XOR"
  | "never"
  | "READ_TICKET"
  | "EQ"
  | "GE"
  | "MEM"
  | "SENDER"
  | "DROP"
  | "CONCAT"
  | "EXEC"
  | "SLICE"
  | "code";
export type Sapling$Transaction$Commitment = string;
export type Sapling$Transaction$CommitmentValue = string;
export type Sapling$DH$Epk = string;
export type Sapling$Transaction$Nullifier = string;
export type _017_PtNairob$LazyStorageDiff = (BigMap | SaplingState)[];
export type Operation =
  | {
      protocol: "PtNairobiyssHuh87hEhfVBGCVrK3WnS8Z2FT4ymB5tAa4r1nQf";
      chain_id: _017_PtNairob$ContractId;
      hash: _017_PtNairob$ContractId;
      branch: _017_PtNairob$ContractId;
      contents: _017_PtNairob$Operation$Alpha$Contents[];
      signature?: _017_PtNairob$ContractId;
      metadata: "too large";
    }
  | {
      protocol: "PtNairobiyssHuh87hEhfVBGCVrK3WnS8Z2FT4ymB5tAa4r1nQf";
      chain_id: _017_PtNairob$ContractId;
      hash: _017_PtNairob$ContractId;
      branch: _017_PtNairob$ContractId;
      contents: _017_PtNairob$Operation$Alpha$Contents[];
      signature?: _017_PtNairob$ContractId;
    }
  | {
      protocol: "PtNairobiyssHuh87hEhfVBGCVrK3WnS8Z2FT4ymB5tAa4r1nQf";
      chain_id: _017_PtNairob$ContractId;
      hash: _017_PtNairob$ContractId;
      branch: _017_PtNairob$ContractId;
      contents: _017_PtNairob$Operation$Alpha$OperationContentsAndResult[];
      signature?: _017_PtNairob$ContractId;
    }
  | {
      protocol: "PtNairobiyssHuh87hEhfVBGCVrK3WnS8Z2FT4ymB5tAa4r1nQf";
      chain_id: _017_PtNairob$ContractId;
      hash: _017_PtNairob$ContractId;
      branch: _017_PtNairob$ContractId;
      contents: _017_PtNairob$Operation$Alpha$Contents[];
      signature?: _017_PtNairob$ContractId;
    };
export type _017_PtNairob$Operation$Alpha$Contents =
  | Endorsement
  | Preendorsement
  | DalAttestation
  | SeedNonceRevelation
  | VdfRevelation
  | DoubleEndorsementEvidence
  | DoublePreendorsementEvidence
  | DoubleBakingEvidence
  | ActivateAccount
  | Proposals
  | Ballot
  | Reveal1
  | Transaction
  | Origination1
  | Delegation1
  | SetDepositsLimit1
  | IncreasePaidStorage1
  | UpdateConsensusKey1
  | DrainDelegate
  | FailingNoop
  | RegisterGlobalConstant
  | TransferTicket
  | DalPublishSlotHeader
  | SmartRollupOriginate1
  | SmartRollupAddMessages
  | SmartRollupCement
  | SmartRollupPublish
  | SmartRollupRefute
  | SmartRollupTimeout
  | SmartRollupExecuteOutboxMessage
  | SmartRollupRecoverBond
  | ZkRollupOrigination
  | ZkRollupPublish
  | ZkRollupUpdate;
export type _017_PtNairob$Inlined$EndorsementMempool$Contents = Endorsement1;
export type _017_PtNairob$Inlined$Preendorsement$Contents = Preendorsement1;
export type _017_PtNairob$Entrypoint =
  | Default
  | Root
  | Do
  | SetDelegate
  | RemoveDelegate
  | Deposit
  | _017_PtNairob$ContractId;
export type Default = "default";
export type Root = "root";
export type Do = "do";
export type SetDelegate = "set_delegate";
export type RemoveDelegate = "remove_delegate";
export type Deposit = "deposit";
export type Dissection = {
  state?: _017_PtNairob$ContractId;
  tick: PositiveBigNumber;
}[];
export type None1 = null;
export type _017_PtNairob$Operation$Alpha$OperationContentsAndResult =
  | SeedNonceRevelation1
  | VdfRevelation1
  | Endorsement2
  | Preendorsement2
  | DalAttestation1
  | DoublePreendorsementEvidence1
  | DoubleEndorsementEvidence1
  | DoubleBakingEvidence1
  | ActivateAccount1
  | Proposals1
  | Ballot1
  | Reveal2
  | Transaction2
  | Origination3
  | Delegation3
  | RegisterGlobalConstant1
  | SetDepositsLimit2
  | IncreasePaidStorage2
  | UpdateConsensusKey2
  | DrainDelegate1
  | TransferTicket1
  | DalPublishSlotHeader1
  | SmartRollupOriginate2
  | SmartRollupAddMessages1
  | SmartRollupCement1
  | SmartRollupPublish1
  | SmartRollupRefute1
  | SmartRollupTimeout1
  | SmartRollupExecuteOutboxMessage1
  | SmartRollupRecoverBond1
  | ZkRollupOrigination1
  | ZkRollupPublish1
  | ZkRollupUpdate1;
export type _017_PtNairob$Operation$Alpha$OperationResult$Reveal = Applied | Failed | Skipped | Backtracked;
export type _017_PtNairob$ApplyInternalResults$Alpha$OperationResult =
  | Transaction1
  | Origination2
  | Delegation2
  | Event;
export type _017_PtNairob$Operation$Alpha$InternalOperationResult$Transaction =
  | (ToContract1 | ToTxRollup1 | ToSmartRollup1)
  | Failed1
  | Skipped1
  | (ToContract2 | ToTxRollup2 | ToSmartRollup2);
export type _017_PtNairob$Operation$Alpha$InternalOperationResult$Origination =
  | Applied1
  | Failed2
  | Skipped2
  | Backtracked1;
export type _017_PtNairob$Operation$Alpha$InternalOperationResult$Delegation =
  | Applied2
  | Failed3
  | Skipped3
  | Backtracked2;
export type _017_PtNairob$Operation$Alpha$InternalOperationResult$Event = Applied3 | Failed4 | Skipped4 | Backtracked3;
export type _017_PtNairob$Operation$Alpha$OperationResult$Transaction =
  | (ToContract3 | ToTxRollup3 | ToSmartRollup3)
  | Failed5
  | Skipped5
  | (ToContract4 | ToTxRollup4 | ToSmartRollup4);
export type _017_PtNairob$Operation$Alpha$OperationResult$Origination = Applied4 | Failed6 | Skipped6 | Backtracked4;
export type _017_PtNairob$Operation$Alpha$OperationResult$Delegation = Applied5 | Failed7 | Skipped7 | Backtracked5;
export type _017_PtNairob$Operation$Alpha$OperationResult$RegisterGlobalConstant =
  | Applied6
  | Failed8
  | Skipped8
  | Backtracked6;
export type _017_PtNairob$Operation$Alpha$OperationResult$SetDepositsLimit =
  | Applied7
  | Failed9
  | Skipped9
  | Backtracked7;
export type _017_PtNairob$Operation$Alpha$OperationResult$IncreasePaidStorage =
  | Applied8
  | Failed10
  | Skipped10
  | Backtracked8;
export type _017_PtNairob$Operation$Alpha$OperationResult$UpdateConsensusKey =
  | Applied9
  | Failed11
  | Skipped11
  | Backtracked9;
export type _017_PtNairob$Operation$Alpha$OperationResult$TransferTicket =
  | Applied10
  | Failed12
  | Skipped12
  | Backtracked10;
export type _017_PtNairob$Operation$Alpha$OperationResult$DalPublishSlotHeader =
  | Applied11
  | Failed13
  | Skipped13
  | Backtracked11;
export type _017_PtNairob$Operation$Alpha$OperationResult$SmartRollupOriginate =
  | Applied12
  | Failed14
  | Skipped14
  | Backtracked12;
export type _017_PtNairob$Operation$Alpha$OperationResult$SmartRollupAddMessages =
  | Applied13
  | Failed15
  | Skipped15
  | Backtracked13;
export type _017_PtNairob$Operation$Alpha$OperationResult$SmartRollupCement =
  | Applied14
  | Failed16
  | Skipped16
  | Backtracked14;
export type _017_PtNairob$Operation$Alpha$OperationResult$SmartRollupPublish =
  | Applied15
  | Failed17
  | Skipped17
  | Backtracked15;
export type Dissection1 = {
  state?: _017_PtNairob$ContractId;
  tick: PositiveBigNumber;
}[];
export type _017_PtNairob$Operation$Alpha$OperationResult$SmartRollupRefute =
  | Applied16
  | Failed18
  | Skipped18
  | Backtracked16;
export type Ongoing = "ongoing";
export type ConflictResolved = "conflict_resolved";
export type Timeout = "timeout";
export type Ongoing1 = "ongoing";
export type ConflictResolved1 = "conflict_resolved";
export type Timeout1 = "timeout";
export type _017_PtNairob$Operation$Alpha$OperationResult$SmartRollupTimeout =
  | Applied17
  | Failed19
  | Skipped19
  | Backtracked17;
export type Ongoing2 = "ongoing";
export type ConflictResolved2 = "conflict_resolved";
export type Timeout2 = "timeout";
export type Ongoing3 = "ongoing";
export type ConflictResolved3 = "conflict_resolved";
export type Timeout3 = "timeout";
export type _017_PtNairob$Operation$Alpha$OperationResult$SmartRollupExecuteOutboxMessage =
  | Applied18
  | Failed20
  | Skipped20
  | Backtracked18;
export type _017_PtNairob$Operation$Alpha$OperationResult$SmartRollupRecoverBond =
  | Applied19
  | Failed21
  | Skipped21
  | Backtracked19;
export type _017_PtNairob$Operation$Alpha$OperationResult$ZkRollupOrigination =
  | Applied20
  | Failed22
  | Skipped22
  | Backtracked20;
export type None2 = null;
export type _017_PtNairob$Operation$Alpha$OperationResult$ZkRollupPublish =
  | Applied21
  | Failed23
  | Skipped23
  | Backtracked21;
export type _017_PtNairob$Operation$Alpha$OperationResult$ZkRollupUpdate =
  | Applied22
  | Failed24
  | Skipped24
  | Backtracked22;

export interface Block {
  protocol: "PtNairobiyssHuh87hEhfVBGCVrK3WnS8Z2FT4ymB5tAa4r1nQf";
  chain_id: _017_PtNairob$ContractId;
  hash: _017_PtNairob$ContractId;
  header: ShellHeader;
  metadata?: BlockHeaderMetadata;
  operations: Operation[][];
}
/**
 * Block header's shell-related content. It contains information such as the block level, its predecessor and timestamp.
 */
export interface ShellHeader {
  level: number;
  proto: number;
  predecessor: _017_PtNairob$ContractId;
  timestamp: _017_PtNairob$ContractId;
  validation_pass: number;
  operations_hash: _017_PtNairob$ContractId;
  fitness: BlockFitness;
  context: _017_PtNairob$ContractId;
  payload_hash: _017_PtNairob$ContractId;
  payload_round: number;
  proof_of_work_nonce: string;
  seed_nonce_hash?: _017_PtNairob$ContractId;
  liquidity_baking_toggle_vote: _017_PtNairob$LiquidityBakingToggleVote;
  signature: _017_PtNairob$ContractId;
}
export interface BlockHeaderMetadata {
  protocol: "PtNairobiyssHuh87hEhfVBGCVrK3WnS8Z2FT4ymB5tAa4r1nQf";
  next_protocol: "PtNairobiyssHuh87hEhfVBGCVrK3WnS8Z2FT4ymB5tAa4r1nQf";
  test_chain_status: TestChainStatus;
  max_operations_ttl: number;
  max_operation_data_length: number;
  max_block_header_length: number;
  max_operation_list_length: {
    max_size: number;
    max_op?: number;
  }[];
  proposer: _017_PtNairob$ContractId;
  baker: _017_PtNairob$ContractId;
  level_info: {
    /**
     * The level of the block relative to genesis. This is also the Shell's notion of level.
     */
    level: number;
    /**
     * The level of the block relative to the successor of the genesis block. More precisely, it is the position of the block relative to the block that starts the "Alpha family" of protocols, which includes all protocols except Genesis (that is, from 001 onwards).
     */
    level_position: number;
    /**
     * The current cycle's number. Note that cycles are a protocol-specific notion. As a result, the cycle number starts at 0 with the first block of the Alpha family of protocols.
     */
    cycle: number;
    /**
     * The current level of the block relative to the first block of the current cycle.
     */
    cycle_position: number;
    /**
     * Tells whether the baker of this block has to commit a seed nonce hash.
     */
    expected_commitment: boolean;
  };
  voting_period_info: {
    /**
     * The voting period to which the block belongs.
     */
    voting_period: {
      /**
       * The voting period's index. Starts at 0 with the first block of the Alpha family of protocols.
       */
      index: number;
      kind: Proposal | Exploration | Cooldown | Promotion | Adoption;
      /**
       * The relative position of the first level of the period with respect to the first level of the Alpha family of protocols.
       */
      start_position: number;
    };
    /**
     * The position of the block within the voting period.
     */
    position: number;
    /**
     * The number of blocks remaining till the end of the voting period.
     */
    remaining: number;
  };
  nonce_hash: _017_PtNairob$ContractId | None;
  deactivated: _017_PtNairob$ContractId[];
  balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  liquidity_baking_toggle_ema: number;
  implicit_operations_results: _017_PtNairob$Operation$Alpha$SuccessfulManagerOperationResult[];
  proposer_consensus_key: _017_PtNairob$ContractId;
  baker_consensus_key: _017_PtNairob$ContractId;
  consumed_milligas: PositiveBigNumber;
  dal_attestation?: BigNumber;
}
export interface NotRunning {
  status: "not_running";
}
export interface Forking {
  status: "forking";
  protocol: _017_PtNairob$ContractId;
  expiration: _017_PtNairob$ContractId;
}
export interface Running {
  status: "running";
  chain_id: _017_PtNairob$ContractId;
  genesis: _017_PtNairob$ContractId;
  protocol: _017_PtNairob$ContractId;
  expiration: _017_PtNairob$ContractId;
}
export interface Contract {
  kind: "contract";
  contract: _017_PtNairob$ContractId;
  change: BitIntegers;
  origin: BlockApplication | ProtocolMigration | Subsidy | Simulation;
}
export interface BlockFees {
  kind: "accumulator";
  category: "block fees";
  change: BitIntegers;
  origin: BlockApplication1 | ProtocolMigration1 | Subsidy1 | Simulation1;
}
export interface Deposits {
  kind: "freezer";
  category: "deposits";
  delegate: _017_PtNairob$ContractId;
  change: BitIntegers;
  origin: BlockApplication2 | ProtocolMigration2 | Subsidy2 | Simulation2;
}
export interface NonceRevelationRewards {
  kind: "minted";
  category: "nonce revelation rewards";
  change: BitIntegers;
  origin: BlockApplication3 | ProtocolMigration3 | Subsidy3 | Simulation3;
}
export interface DoubleSigningEvidenceRewards {
  kind: "minted";
  category: "double signing evidence rewards";
  change: BitIntegers;
  origin: BlockApplication4 | ProtocolMigration4 | Subsidy4 | Simulation4;
}
export interface EndorsingRewards {
  kind: "minted";
  category: "endorsing rewards";
  change: BitIntegers;
  origin: BlockApplication5 | ProtocolMigration5 | Subsidy5 | Simulation5;
}
export interface BakingRewards {
  kind: "minted";
  category: "baking rewards";
  change: BitIntegers;
  origin: BlockApplication6 | ProtocolMigration6 | Subsidy6 | Simulation6;
}
export interface BakingBonuses {
  kind: "minted";
  category: "baking bonuses";
  change: BitIntegers;
  origin: BlockApplication7 | ProtocolMigration7 | Subsidy7 | Simulation7;
}
export interface StorageFees {
  kind: "burned";
  category: "storage fees";
  change: BitIntegers;
  origin: BlockApplication8 | ProtocolMigration8 | Subsidy8 | Simulation8;
}
export interface DoubleSigningPunishments {
  kind: "burned";
  category: "punishments";
  change: BitIntegers;
  origin: BlockApplication9 | ProtocolMigration9 | Subsidy9 | Simulation9;
}
export interface LostEndorsingRewards {
  kind: "burned";
  category: "lost endorsing rewards";
  delegate: _017_PtNairob$ContractId;
  participation: boolean;
  revelation: boolean;
  change: BitIntegers;
  origin: BlockApplication10 | ProtocolMigration10 | Subsidy10 | Simulation10;
}
export interface LiquidityBakingSubsidies {
  kind: "minted";
  category: "subsidy";
  change: BitIntegers;
  origin: BlockApplication11 | ProtocolMigration11 | Subsidy11 | Simulation11;
}
export interface Burned {
  kind: "burned";
  category: "burned";
  change: BitIntegers;
  origin: BlockApplication12 | ProtocolMigration12 | Subsidy12 | Simulation12;
}
export interface Commitments {
  kind: "commitment";
  category: "commitment";
  committer: _017_PtNairob$ContractId;
  change: BitIntegers;
  origin: BlockApplication13 | ProtocolMigration13 | Subsidy13 | Simulation13;
}
export interface Bootstrap {
  kind: "minted";
  category: "bootstrap";
  change: BitIntegers;
  origin: BlockApplication14 | ProtocolMigration14 | Subsidy14 | Simulation14;
}
export interface Invoice {
  kind: "minted";
  category: "invoice";
  change: BitIntegers;
  origin: BlockApplication15 | ProtocolMigration15 | Subsidy15 | Simulation15;
}
export interface InitialCommitments {
  kind: "minted";
  category: "commitment";
  change: BitIntegers;
  origin: BlockApplication16 | ProtocolMigration16 | Subsidy16 | Simulation16;
}
export interface Minted {
  kind: "minted";
  category: "minted";
  change: BitIntegers;
  origin: BlockApplication17 | ProtocolMigration17 | Subsidy17 | Simulation17;
}
export interface FrozenBonds {
  kind: "freezer";
  category: "bonds";
  contract: _017_PtNairob$ContractId;
  bond_id: _017_PtNairob$BondId;
  change: BitIntegers;
  origin: BlockApplication18 | ProtocolMigration18 | Subsidy18 | Simulation18;
}
export interface TxRollupBondId {
  tx_rollup: _017_PtNairob$ContractId;
}
export interface SmartRollupBondId {
  smart_rollup: _017_PtNairob$ContractId;
}
export interface TxRollupRejectionRewards {
  kind: "minted";
  category: "tx_rollup_rejection_rewards";
  change: BitIntegers;
  origin: BlockApplication19 | ProtocolMigration19 | Subsidy19 | Simulation19;
}
export interface TxRollupRejectionPunishments {
  kind: "burned";
  category: "tx_rollup_rejection_punishments";
  change: BitIntegers;
  origin: BlockApplication20 | ProtocolMigration20 | Subsidy20 | Simulation20;
}
export interface SmartRollupRefutationPunishments {
  kind: "burned";
  category: "smart_rollup_refutation_punishments";
  change: BitIntegers;
  origin: BlockApplication21 | ProtocolMigration21 | Subsidy21 | Simulation21;
}
export interface SmartRollupRefutationRewards {
  kind: "minted";
  category: "smart_rollup_refutation_rewards";
  change: BitIntegers;
  origin: BlockApplication22 | ProtocolMigration22 | Subsidy22 | Simulation22;
}
export interface Reveal {
  kind: "reveal";
  consumed_milligas?: PositiveBigNumber;
}
export interface ToContract {
  kind: "transaction";
  storage?: Micheline$017_PtNairob$MichelsonV1$Expression;
  balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  ticket_updates?: {
    ticket_token: {
      ticketer: _017_PtNairob$ContractId;
      content_type: Micheline$017_PtNairob$MichelsonV1$Expression;
      content: Micheline$017_PtNairob$MichelsonV1$Expression;
    };
    updates: {
      account: _017_PtNairob$ContractId;
      amount: BigNumber;
    }[];
  }[];
  originated_contracts?: _017_PtNairob$ContractId[];
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  allocated_destination_contract?: boolean;
  lazy_storage_diff?: _017_PtNairob$LazyStorageDiff;
}
export interface Int {
  int: BigNumber;
}
export interface String {
  string: _017_PtNairob$ContractId;
}
export interface Bytes {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic {
  prim: _017_PtNairob$Michelson$V1$Primitives;
  args?: Micheline$017_PtNairob$MichelsonV1$Expression[];
  annots?: _017_PtNairob$ContractId[];
}
export interface BigMap {
  kind: "big_map";
  id: BigNumber;
  diff: Update | Remove | Copy | Alloc;
}
export interface Update {
  action: "update";
  updates: {
    key_hash: _017_PtNairob$ContractId;
    key: Micheline$017_PtNairob$MichelsonV1$Expression;
    value?: Micheline$017_PtNairob$MichelsonV1$Expression;
  }[];
}
export interface Remove {
  action: "remove";
}
export interface Copy {
  action: "copy";
  source: BigNumber;
  updates: {
    key_hash: _017_PtNairob$ContractId;
    key: Micheline$017_PtNairob$MichelsonV1$Expression;
    value?: Micheline$017_PtNairob$MichelsonV1$Expression;
  }[];
}
export interface Alloc {
  action: "alloc";
  updates: {
    key_hash: _017_PtNairob$ContractId;
    key: Micheline$017_PtNairob$MichelsonV1$Expression;
    value?: Micheline$017_PtNairob$MichelsonV1$Expression;
  }[];
  key_type: Micheline$017_PtNairob$MichelsonV1$Expression;
  value_type: Micheline$017_PtNairob$MichelsonV1$Expression;
}
export interface SaplingState {
  kind: "sapling_state";
  id: BigNumber;
  diff: Update1 | Remove1 | Copy1 | Alloc1;
}
export interface Update1 {
  action: "update";
  updates: {
    commitments_and_ciphertexts:
      | []
      | [Sapling$Transaction$Commitment]
      | [Sapling$Transaction$Commitment, Sapling$Transaction$Ciphertext][];
    nullifiers: Sapling$Transaction$Nullifier[];
  };
}
export interface Sapling$Transaction$Ciphertext {
  cv: Sapling$Transaction$CommitmentValue;
  epk: Sapling$DH$Epk;
  payload_enc: string;
  nonce_enc: string;
  payload_out: string;
  nonce_out: string;
}
export interface Remove1 {
  action: "remove";
}
export interface Copy1 {
  action: "copy";
  source: BigNumber;
  updates: {
    commitments_and_ciphertexts:
      | []
      | [Sapling$Transaction$Commitment]
      | [Sapling$Transaction$Commitment, Sapling$Transaction$Ciphertext][];
    nullifiers: Sapling$Transaction$Nullifier[];
  };
}
export interface Alloc1 {
  action: "alloc";
  updates: {
    commitments_and_ciphertexts:
      | []
      | [Sapling$Transaction$Commitment]
      | [Sapling$Transaction$Commitment, Sapling$Transaction$Ciphertext][];
    nullifiers: Sapling$Transaction$Nullifier[];
  };
  memo_size: number;
}
export interface ToTxRollup {
  kind: "transaction";
  balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  ticket_hash: _017_PtNairob$ContractId;
  paid_storage_size_diff: PositiveBigNumber;
}
export interface ToSmartRollup {
  kind: "transaction";
  consumed_milligas?: PositiveBigNumber;
  ticket_updates: {
    ticket_token: {
      ticketer: _017_PtNairob$ContractId;
      content_type: Micheline$017_PtNairob$MichelsonV1$Expression;
      content: Micheline$017_PtNairob$MichelsonV1$Expression;
    };
    updates: {
      account: _017_PtNairob$ContractId;
      amount: BigNumber;
    }[];
  }[];
}
export interface Origination {
  kind: "origination";
  balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _017_PtNairob$ContractId[];
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  lazy_storage_diff?: _017_PtNairob$LazyStorageDiff;
}
export interface Delegation {
  kind: "delegation";
  consumed_milligas?: PositiveBigNumber;
}
export interface UpdateConsensusKey {
  kind: "update_consensus_key";
  consumed_milligas?: PositiveBigNumber;
}
export interface SetDepositsLimit {
  kind: "set_deposits_limit";
  consumed_milligas?: PositiveBigNumber;
}
export interface IncreasePaidStorage {
  kind: "increase_paid_storage";
  balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
}
export interface SmartRollupOriginate {
  kind: "smart_rollup_originate";
  balance_updates: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  address: _017_PtNairob$ContractId;
  genesis_commitment_hash: _017_PtNairob$ContractId;
  consumed_milligas?: PositiveBigNumber;
  size: BigNumber;
}
export interface Endorsement {
  kind: "endorsement";
  slot: number;
  level: number;
  round: number;
  block_payload_hash: _017_PtNairob$ContractId;
}
export interface Preendorsement {
  kind: "preendorsement";
  slot: number;
  level: number;
  round: number;
  block_payload_hash: _017_PtNairob$ContractId;
}
export interface DalAttestation {
  kind: "dal_attestation";
  attestor: _017_PtNairob$ContractId;
  attestation: BigNumber;
  level: number;
}
export interface SeedNonceRevelation {
  kind: "seed_nonce_revelation";
  level: number;
  nonce: string;
}
export interface VdfRevelation {
  kind: "vdf_revelation";
  solution: [] | [string] | [string, string];
}
export interface DoubleEndorsementEvidence {
  kind: "double_endorsement_evidence";
  op1: _017_PtNairob$Inlined$Endorsement;
  op2: _017_PtNairob$Inlined$Endorsement;
}
/**
 * An operation's shell header.
 */
export interface _017_PtNairob$Inlined$Endorsement {
  branch: _017_PtNairob$ContractId;
  operations: _017_PtNairob$Inlined$EndorsementMempool$Contents;
  signature?: _017_PtNairob$ContractId;
}
export interface Endorsement1 {
  kind: "endorsement";
  slot: number;
  level: number;
  round: number;
  block_payload_hash: _017_PtNairob$ContractId;
}
export interface DoublePreendorsementEvidence {
  kind: "double_preendorsement_evidence";
  op1: _017_PtNairob$Inlined$Preendorsement;
  op2: _017_PtNairob$Inlined$Preendorsement;
}
/**
 * An operation's shell header.
 */
export interface _017_PtNairob$Inlined$Preendorsement {
  branch: _017_PtNairob$ContractId;
  operations: _017_PtNairob$Inlined$Preendorsement$Contents;
  signature?: _017_PtNairob$ContractId;
}
export interface Preendorsement1 {
  kind: "preendorsement";
  slot: number;
  level: number;
  round: number;
  block_payload_hash: _017_PtNairob$ContractId;
}
export interface DoubleBakingEvidence {
  kind: "double_baking_evidence";
  bh1: ShellHeader1;
  bh2: ShellHeader1;
}
/**
 * Block header's shell-related content. It contains information such as the block level, its predecessor and timestamp.
 */
export interface ShellHeader1 {
  level: number;
  proto: number;
  predecessor: _017_PtNairob$ContractId;
  timestamp: _017_PtNairob$ContractId;
  validation_pass: number;
  operations_hash: _017_PtNairob$ContractId;
  fitness: BlockFitness;
  context: _017_PtNairob$ContractId;
  payload_hash: _017_PtNairob$ContractId;
  payload_round: number;
  proof_of_work_nonce: string;
  seed_nonce_hash?: _017_PtNairob$ContractId;
  liquidity_baking_toggle_vote: _017_PtNairob$LiquidityBakingToggleVote;
  signature: _017_PtNairob$ContractId;
}
export interface ActivateAccount {
  kind: "activate_account";
  pkh: _017_PtNairob$ContractId;
  secret: string;
}
export interface Proposals {
  kind: "proposals";
  source: _017_PtNairob$ContractId;
  period: number;
  proposals: _017_PtNairob$ContractId[];
}
export interface Ballot {
  kind: "ballot";
  source: _017_PtNairob$ContractId;
  period: number;
  proposal: _017_PtNairob$ContractId;
  ballot: "nay" | "yay" | "pass";
}
export interface Reveal1 {
  kind: "reveal";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  public_key: _017_PtNairob$ContractId;
}
export interface Transaction {
  kind: "transaction";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  amount: PositiveBigNumber;
  destination: _017_PtNairob$ContractId;
  parameters?: {
    entrypoint: _017_PtNairob$Entrypoint;
    value: unknown;
  };
}
export interface Origination1 {
  kind: "origination";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  balance: PositiveBigNumber;
  delegate?: _017_PtNairob$ContractId;
  script: _017_PtNairob$Scripted$Contracts;
}
export interface _017_PtNairob$Scripted$Contracts {
  code: unknown;
  storage: unknown;
}
export interface Delegation1 {
  kind: "delegation";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  delegate?: _017_PtNairob$ContractId;
}
export interface SetDepositsLimit1 {
  kind: "set_deposits_limit";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  limit?: PositiveBigNumber;
}
export interface IncreasePaidStorage1 {
  kind: "increase_paid_storage";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  amount: BigNumber;
  destination: _017_PtNairob$ContractId;
}
export interface UpdateConsensusKey1 {
  kind: "update_consensus_key";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  pk: _017_PtNairob$ContractId;
}
export interface DrainDelegate {
  kind: "drain_delegate";
  consensus_key: _017_PtNairob$ContractId;
  delegate: _017_PtNairob$ContractId;
  destination: _017_PtNairob$ContractId;
}
export interface FailingNoop {
  kind: "failing_noop";
  arbitrary: string;
}
export interface RegisterGlobalConstant {
  kind: "register_global_constant";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  value: unknown;
}
export interface TransferTicket {
  kind: "transfer_ticket";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  ticket_contents: unknown;
  ticket_ty: unknown;
  ticket_ticketer: _017_PtNairob$ContractId;
  ticket_amount: PositiveBigNumber;
  destination: _017_PtNairob$ContractId;
  entrypoint: _017_PtNairob$ContractId;
}
export interface DalPublishSlotHeader {
  kind: "dal_publish_slot_header";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  slot_header: {
    published_level: number;
    slot_index: number;
    commitment: _017_PtNairob$ContractId;
    commitment_proof: string;
  };
}
export interface SmartRollupOriginate1 {
  kind: "smart_rollup_originate";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  pvm_kind: "wasm_2_0_0" | "arith";
  kernel: string;
  origination_proof: string;
  parameters_ty: unknown;
}
export interface SmartRollupAddMessages {
  kind: "smart_rollup_add_messages";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  message: string[];
}
export interface SmartRollupCement {
  kind: "smart_rollup_cement";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _017_PtNairob$ContractId;
  commitment: _017_PtNairob$ContractId;
}
export interface SmartRollupPublish {
  kind: "smart_rollup_publish";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _017_PtNairob$ContractId;
  commitment: {
    compressed_state: _017_PtNairob$ContractId;
    inbox_level: number;
    predecessor: _017_PtNairob$ContractId;
    number_of_ticks: BitIntegers;
  };
}
export interface SmartRollupRefute {
  kind: "smart_rollup_refute";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _017_PtNairob$ContractId;
  opponent: _017_PtNairob$ContractId;
  refutation: Start | Move;
}
export interface Start {
  refutation_kind: "start";
  player_commitment_hash: _017_PtNairob$ContractId;
  opponent_commitment_hash: _017_PtNairob$ContractId;
}
export interface Move {
  refutation_kind: "move";
  choice: PositiveBigNumber;
  step: Dissection | Proof;
}
export interface Proof {
  pvm_step: string;
  input_proof?: InboxProof | RevealProof | FirstInput;
}
export interface InboxProof {
  input_proof_kind: "inbox_proof";
  level: number;
  message_counter: PositiveBigNumber;
  serialized_proof: string;
}
export interface RevealProof {
  input_proof_kind: "reveal_proof";
  reveal_proof: RawDataProof | MetadataProof | DalPageProof;
}
export interface RawDataProof {
  reveal_proof_kind: "raw_data_proof";
  raw_data: string;
}
export interface MetadataProof {
  reveal_proof_kind: "metadata_proof";
}
export interface DalPageProof {
  reveal_proof_kind: "dal_page_proof";
  dal_page_id: {
    published_level: number;
    slot_index: number;
    page_index: number;
  };
  dal_proof: string;
}
export interface FirstInput {
  input_proof_kind: "first_input";
}
export interface SmartRollupTimeout {
  kind: "smart_rollup_timeout";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _017_PtNairob$ContractId;
  stakers: {
    alice: _017_PtNairob$ContractId;
    bob: _017_PtNairob$ContractId;
  };
}
export interface SmartRollupExecuteOutboxMessage {
  kind: "smart_rollup_execute_outbox_message";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _017_PtNairob$ContractId;
  cemented_commitment: _017_PtNairob$ContractId;
  output_proof: string;
}
export interface SmartRollupRecoverBond {
  kind: "smart_rollup_recover_bond";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _017_PtNairob$ContractId;
  staker: _017_PtNairob$ContractId;
}
export interface ZkRollupOrigination {
  kind: "zk_rollup_origination";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  public_parameters: string;
  circuits_info: [] | [_017_PtNairob$ContractId] | [_017_PtNairob$ContractId, Public | Private | Fee][];
  init_state: string[];
  nb_ops: number;
}
export interface Public {
  public: unknown;
}
export interface Private {
  private: unknown;
}
export interface Fee {
  fee: unknown;
}
export interface ZkRollupPublish {
  kind: "zk_rollup_publish";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  zk_rollup: _017_PtNairob$ContractId;
  op:
    | []
    | [
        {
          op_code: number;
          price: {
            id: _017_PtNairob$ContractId;
            amount: BigNumber;
          };
          l1_dst: _017_PtNairob$ContractId;
          rollup_id: _017_PtNairob$ContractId;
          payload: string[];
        }
      ]
    | [
        {
          op_code: number;
          price: {
            id: _017_PtNairob$ContractId;
            amount: BigNumber;
          };
          l1_dst: _017_PtNairob$ContractId;
          rollup_id: _017_PtNairob$ContractId;
          payload: string[];
        },
        Some | None1
      ][];
}
export interface Some {
  contents: Micheline$017_PtNairob$MichelsonV1$Expression;
  ty: Micheline$017_PtNairob$MichelsonV1$Expression;
  ticketer: _017_PtNairob$ContractId;
}
export interface ZkRollupUpdate {
  kind: "zk_rollup_update";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  zk_rollup: _017_PtNairob$ContractId;
  update: {
    pending_pis:
      | []
      | [_017_PtNairob$ContractId]
      | [
          _017_PtNairob$ContractId,
          {
            new_state: string[];
            fee: string;
            exit_validity: boolean;
          }
        ][];
    private_pis:
      | []
      | [_017_PtNairob$ContractId]
      | [
          _017_PtNairob$ContractId,
          {
            new_state: string[];
            fee: string;
          }
        ][];
    fee_pi: {
      new_state: string[];
    };
    proof: string;
  };
}
export interface SeedNonceRevelation1 {
  kind: "seed_nonce_revelation";
  level: number;
  nonce: string;
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  };
}
export interface VdfRevelation1 {
  kind: "vdf_revelation";
  solution: [] | [string] | [string, string];
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  };
}
export interface Endorsement2 {
  kind: "endorsement";
  slot: number;
  level: number;
  round: number;
  block_payload_hash: _017_PtNairob$ContractId;
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
    delegate: _017_PtNairob$ContractId;
    endorsement_power: number;
    consensus_key: _017_PtNairob$ContractId;
  };
}
export interface Preendorsement2 {
  kind: "preendorsement";
  slot: number;
  level: number;
  round: number;
  block_payload_hash: _017_PtNairob$ContractId;
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
    delegate: _017_PtNairob$ContractId;
    preendorsement_power: number;
    consensus_key: _017_PtNairob$ContractId;
  };
}
export interface DalAttestation1 {
  kind: "dal_attestation";
  attestor: _017_PtNairob$ContractId;
  attestation: BigNumber;
  level: number;
  metadata: {
    delegate: _017_PtNairob$ContractId;
  };
}
export interface DoublePreendorsementEvidence1 {
  kind: "double_preendorsement_evidence";
  op1: _017_PtNairob$Inlined$Preendorsement;
  op2: _017_PtNairob$Inlined$Preendorsement;
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  };
}
export interface DoubleEndorsementEvidence1 {
  kind: "double_endorsement_evidence";
  op1: _017_PtNairob$Inlined$Endorsement;
  op2: _017_PtNairob$Inlined$Endorsement;
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  };
}
export interface DoubleBakingEvidence1 {
  kind: "double_baking_evidence";
  bh1: ShellHeader1;
  bh2: ShellHeader1;
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  };
}
export interface ActivateAccount1 {
  kind: "activate_account";
  pkh: _017_PtNairob$ContractId;
  secret: string;
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  };
}
export interface Proposals1 {
  kind: "proposals";
  source: _017_PtNairob$ContractId;
  period: number;
  proposals: _017_PtNairob$ContractId[];
  metadata: {};
}
export interface Ballot1 {
  kind: "ballot";
  source: _017_PtNairob$ContractId;
  period: number;
  proposal: _017_PtNairob$ContractId;
  ballot: "nay" | "yay" | "pass";
  metadata: {};
}
export interface Reveal2 {
  kind: "reveal";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  public_key: _017_PtNairob$ContractId;
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _017_PtNairob$Operation$Alpha$OperationResult$Reveal;
    internal_operation_results?: _017_PtNairob$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied {
  status: "applied";
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed {
  status: "failed";
  errors: _017_PtNairob$Error[];
}
/**
 * The full list of RPC errors would be too long to include.
 * It is available at RPC `/errors` (GET).
 * Errors specific to protocol Alpha have an id that starts with `proto.alpha`.
 */
export interface _017_PtNairob$Error {
  [k: string]: unknown;
}
export interface Skipped {
  status: "skipped";
}
export interface Backtracked {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  consumed_milligas?: PositiveBigNumber;
}
export interface Transaction1 {
  kind: "transaction";
  source: _017_PtNairob$ContractId;
  nonce: number;
  amount: PositiveBigNumber;
  destination: _017_PtNairob$ContractId;
  parameters?: {
    entrypoint: _017_PtNairob$Entrypoint;
    value: unknown;
  };
  result: _017_PtNairob$Operation$Alpha$InternalOperationResult$Transaction;
}
export interface ToContract1 {
  status: "applied";
  storage?: Micheline$017_PtNairob$MichelsonV1$Expression;
  balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  ticket_receipt?: {
    ticket_token: {
      ticketer: _017_PtNairob$ContractId;
      content_type: Micheline$017_PtNairob$MichelsonV1$Expression;
      content: Micheline$017_PtNairob$MichelsonV1$Expression;
    };
    updates: {
      account: _017_PtNairob$ContractId;
      amount: BigNumber;
    }[];
  }[];
  originated_contracts?: _017_PtNairob$ContractId[];
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  allocated_destination_contract?: boolean;
  lazy_storage_diff?: _017_PtNairob$LazyStorageDiff;
}
export interface ToTxRollup1 {
  status: "applied";
  balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  ticket_hash: _017_PtNairob$ContractId;
  paid_storage_size_diff: PositiveBigNumber;
}
export interface ToSmartRollup1 {
  status: "applied";
  consumed_milligas?: PositiveBigNumber;
  ticket_receipt: {
    ticket_token: {
      ticketer: _017_PtNairob$ContractId;
      content_type: Micheline$017_PtNairob$MichelsonV1$Expression;
      content: Micheline$017_PtNairob$MichelsonV1$Expression;
    };
    updates: {
      account: _017_PtNairob$ContractId;
      amount: BigNumber;
    }[];
  }[];
}
export interface Failed1 {
  status: "failed";
  errors: _017_PtNairob$Error[];
}
export interface Skipped1 {
  status: "skipped";
}
export interface ToContract2 {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  storage?: Micheline$017_PtNairob$MichelsonV1$Expression;
  balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  ticket_receipt?: {
    ticket_token: {
      ticketer: _017_PtNairob$ContractId;
      content_type: Micheline$017_PtNairob$MichelsonV1$Expression;
      content: Micheline$017_PtNairob$MichelsonV1$Expression;
    };
    updates: {
      account: _017_PtNairob$ContractId;
      amount: BigNumber;
    }[];
  }[];
  originated_contracts?: _017_PtNairob$ContractId[];
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  allocated_destination_contract?: boolean;
  lazy_storage_diff?: _017_PtNairob$LazyStorageDiff;
}
export interface ToTxRollup2 {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  ticket_hash: _017_PtNairob$ContractId;
  paid_storage_size_diff: PositiveBigNumber;
}
export interface ToSmartRollup2 {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  consumed_milligas?: PositiveBigNumber;
  ticket_receipt: {
    ticket_token: {
      ticketer: _017_PtNairob$ContractId;
      content_type: Micheline$017_PtNairob$MichelsonV1$Expression;
      content: Micheline$017_PtNairob$MichelsonV1$Expression;
    };
    updates: {
      account: _017_PtNairob$ContractId;
      amount: BigNumber;
    }[];
  }[];
}
export interface Origination2 {
  kind: "origination";
  source: _017_PtNairob$ContractId;
  nonce: number;
  balance: PositiveBigNumber;
  delegate?: _017_PtNairob$ContractId;
  script: _017_PtNairob$Scripted$Contracts;
  result: _017_PtNairob$Operation$Alpha$InternalOperationResult$Origination;
}
export interface Applied1 {
  status: "applied";
  balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _017_PtNairob$ContractId[];
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  lazy_storage_diff?: _017_PtNairob$LazyStorageDiff;
}
export interface Failed2 {
  status: "failed";
  errors: _017_PtNairob$Error[];
}
export interface Skipped2 {
  status: "skipped";
}
export interface Backtracked1 {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _017_PtNairob$ContractId[];
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  lazy_storage_diff?: _017_PtNairob$LazyStorageDiff;
}
export interface Delegation2 {
  kind: "delegation";
  source: _017_PtNairob$ContractId;
  nonce: number;
  delegate?: _017_PtNairob$ContractId;
  result: _017_PtNairob$Operation$Alpha$InternalOperationResult$Delegation;
}
export interface Applied2 {
  status: "applied";
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed3 {
  status: "failed";
  errors: _017_PtNairob$Error[];
}
export interface Skipped3 {
  status: "skipped";
}
export interface Backtracked2 {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  consumed_milligas?: PositiveBigNumber;
}
export interface Event {
  kind: "event";
  source: _017_PtNairob$ContractId;
  nonce: number;
  type: Micheline$017_PtNairob$MichelsonV1$Expression;
  tag?: _017_PtNairob$Entrypoint;
  payload?: Micheline$017_PtNairob$MichelsonV1$Expression;
  result: _017_PtNairob$Operation$Alpha$InternalOperationResult$Event;
}
export interface Applied3 {
  status: "applied";
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed4 {
  status: "failed";
  errors: _017_PtNairob$Error[];
}
export interface Skipped4 {
  status: "skipped";
}
export interface Backtracked3 {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  consumed_milligas?: PositiveBigNumber;
}
export interface Transaction2 {
  kind: "transaction";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  amount: PositiveBigNumber;
  destination: _017_PtNairob$ContractId;
  parameters?: {
    entrypoint: _017_PtNairob$Entrypoint;
    value: unknown;
  };
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _017_PtNairob$Operation$Alpha$OperationResult$Transaction;
    internal_operation_results?: _017_PtNairob$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface ToContract3 {
  status: "applied";
  storage?: Micheline$017_PtNairob$MichelsonV1$Expression;
  balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  ticket_updates?: {
    ticket_token: {
      ticketer: _017_PtNairob$ContractId;
      content_type: Micheline$017_PtNairob$MichelsonV1$Expression;
      content: Micheline$017_PtNairob$MichelsonV1$Expression;
    };
    updates: {
      account: _017_PtNairob$ContractId;
      amount: BigNumber;
    }[];
  }[];
  originated_contracts?: _017_PtNairob$ContractId[];
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  allocated_destination_contract?: boolean;
  lazy_storage_diff?: _017_PtNairob$LazyStorageDiff;
}
export interface ToTxRollup3 {
  status: "applied";
  balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  ticket_hash: _017_PtNairob$ContractId;
  paid_storage_size_diff: PositiveBigNumber;
}
export interface ToSmartRollup3 {
  status: "applied";
  consumed_milligas?: PositiveBigNumber;
  ticket_updates: {
    ticket_token: {
      ticketer: _017_PtNairob$ContractId;
      content_type: Micheline$017_PtNairob$MichelsonV1$Expression;
      content: Micheline$017_PtNairob$MichelsonV1$Expression;
    };
    updates: {
      account: _017_PtNairob$ContractId;
      amount: BigNumber;
    }[];
  }[];
}
export interface Failed5 {
  status: "failed";
  errors: _017_PtNairob$Error[];
}
export interface Skipped5 {
  status: "skipped";
}
export interface ToContract4 {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  storage?: Micheline$017_PtNairob$MichelsonV1$Expression;
  balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  ticket_updates?: {
    ticket_token: {
      ticketer: _017_PtNairob$ContractId;
      content_type: Micheline$017_PtNairob$MichelsonV1$Expression;
      content: Micheline$017_PtNairob$MichelsonV1$Expression;
    };
    updates: {
      account: _017_PtNairob$ContractId;
      amount: BigNumber;
    }[];
  }[];
  originated_contracts?: _017_PtNairob$ContractId[];
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  allocated_destination_contract?: boolean;
  lazy_storage_diff?: _017_PtNairob$LazyStorageDiff;
}
export interface ToTxRollup4 {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  ticket_hash: _017_PtNairob$ContractId;
  paid_storage_size_diff: PositiveBigNumber;
}
export interface ToSmartRollup4 {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  consumed_milligas?: PositiveBigNumber;
  ticket_updates: {
    ticket_token: {
      ticketer: _017_PtNairob$ContractId;
      content_type: Micheline$017_PtNairob$MichelsonV1$Expression;
      content: Micheline$017_PtNairob$MichelsonV1$Expression;
    };
    updates: {
      account: _017_PtNairob$ContractId;
      amount: BigNumber;
    }[];
  }[];
}
export interface Origination3 {
  kind: "origination";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  balance: PositiveBigNumber;
  delegate?: _017_PtNairob$ContractId;
  script: _017_PtNairob$Scripted$Contracts;
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _017_PtNairob$Operation$Alpha$OperationResult$Origination;
    internal_operation_results?: _017_PtNairob$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied4 {
  status: "applied";
  balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _017_PtNairob$ContractId[];
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  lazy_storage_diff?: _017_PtNairob$LazyStorageDiff;
}
export interface Failed6 {
  status: "failed";
  errors: _017_PtNairob$Error[];
}
export interface Skipped6 {
  status: "skipped";
}
export interface Backtracked4 {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _017_PtNairob$ContractId[];
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  lazy_storage_diff?: _017_PtNairob$LazyStorageDiff;
}
export interface Delegation3 {
  kind: "delegation";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  delegate?: _017_PtNairob$ContractId;
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _017_PtNairob$Operation$Alpha$OperationResult$Delegation;
    internal_operation_results?: _017_PtNairob$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied5 {
  status: "applied";
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed7 {
  status: "failed";
  errors: _017_PtNairob$Error[];
}
export interface Skipped7 {
  status: "skipped";
}
export interface Backtracked5 {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  consumed_milligas?: PositiveBigNumber;
}
export interface RegisterGlobalConstant1 {
  kind: "register_global_constant";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  value: unknown;
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _017_PtNairob$Operation$Alpha$OperationResult$RegisterGlobalConstant;
    internal_operation_results?: _017_PtNairob$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied6 {
  status: "applied";
  balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  global_address: _017_PtNairob$ContractId;
}
export interface Failed8 {
  status: "failed";
  errors: _017_PtNairob$Error[];
}
export interface Skipped8 {
  status: "skipped";
}
export interface Backtracked6 {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  global_address: _017_PtNairob$ContractId;
}
export interface SetDepositsLimit2 {
  kind: "set_deposits_limit";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  limit?: PositiveBigNumber;
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _017_PtNairob$Operation$Alpha$OperationResult$SetDepositsLimit;
    internal_operation_results?: _017_PtNairob$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied7 {
  status: "applied";
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed9 {
  status: "failed";
  errors: _017_PtNairob$Error[];
}
export interface Skipped9 {
  status: "skipped";
}
export interface Backtracked7 {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  consumed_milligas?: PositiveBigNumber;
}
export interface IncreasePaidStorage2 {
  kind: "increase_paid_storage";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  amount: BigNumber;
  destination: _017_PtNairob$ContractId;
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _017_PtNairob$Operation$Alpha$OperationResult$IncreasePaidStorage;
    internal_operation_results?: _017_PtNairob$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied8 {
  status: "applied";
  balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed10 {
  status: "failed";
  errors: _017_PtNairob$Error[];
}
export interface Skipped10 {
  status: "skipped";
}
export interface Backtracked8 {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
}
export interface UpdateConsensusKey2 {
  kind: "update_consensus_key";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  pk: _017_PtNairob$ContractId;
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _017_PtNairob$Operation$Alpha$OperationResult$UpdateConsensusKey;
    internal_operation_results?: _017_PtNairob$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied9 {
  status: "applied";
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed11 {
  status: "failed";
  errors: _017_PtNairob$Error[];
}
export interface Skipped11 {
  status: "skipped";
}
export interface Backtracked9 {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  consumed_milligas?: PositiveBigNumber;
}
export interface DrainDelegate1 {
  kind: "drain_delegate";
  consensus_key: _017_PtNairob$ContractId;
  delegate: _017_PtNairob$ContractId;
  destination: _017_PtNairob$ContractId;
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
    allocated_destination_contract?: boolean;
  };
}
export interface TransferTicket1 {
  kind: "transfer_ticket";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  ticket_contents: unknown;
  ticket_ty: unknown;
  ticket_ticketer: _017_PtNairob$ContractId;
  ticket_amount: PositiveBigNumber;
  destination: _017_PtNairob$ContractId;
  entrypoint: _017_PtNairob$ContractId;
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _017_PtNairob$Operation$Alpha$OperationResult$TransferTicket;
    internal_operation_results?: _017_PtNairob$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied10 {
  status: "applied";
  balance_updates: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  ticket_updates: {
    ticket_token: {
      ticketer: _017_PtNairob$ContractId;
      content_type: Micheline$017_PtNairob$MichelsonV1$Expression;
      content: Micheline$017_PtNairob$MichelsonV1$Expression;
    };
    updates: {
      account: _017_PtNairob$ContractId;
      amount: BigNumber;
    }[];
  }[];
  consumed_milligas?: PositiveBigNumber;
  paid_storage_size_diff?: BigNumber;
}
export interface Failed12 {
  status: "failed";
  errors: _017_PtNairob$Error[];
}
export interface Skipped12 {
  status: "skipped";
}
export interface Backtracked10 {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  balance_updates: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  ticket_updates: {
    ticket_token: {
      ticketer: _017_PtNairob$ContractId;
      content_type: Micheline$017_PtNairob$MichelsonV1$Expression;
      content: Micheline$017_PtNairob$MichelsonV1$Expression;
    };
    updates: {
      account: _017_PtNairob$ContractId;
      amount: BigNumber;
    }[];
  }[];
  consumed_milligas?: PositiveBigNumber;
  paid_storage_size_diff?: BigNumber;
}
export interface DalPublishSlotHeader1 {
  kind: "dal_publish_slot_header";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  slot_header: {
    published_level: number;
    slot_index: number;
    commitment: _017_PtNairob$ContractId;
    commitment_proof: string;
  };
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _017_PtNairob$Operation$Alpha$OperationResult$DalPublishSlotHeader;
    internal_operation_results?: _017_PtNairob$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied11 {
  status: "applied";
  slot_header: {
    level: number;
    index: number;
    commitment: _017_PtNairob$ContractId;
  };
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed13 {
  status: "failed";
  errors: _017_PtNairob$Error[];
}
export interface Skipped13 {
  status: "skipped";
}
export interface Backtracked11 {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  slot_header: {
    level: number;
    index: number;
    commitment: _017_PtNairob$ContractId;
  };
  consumed_milligas?: PositiveBigNumber;
}
export interface SmartRollupOriginate2 {
  kind: "smart_rollup_originate";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  pvm_kind: "wasm_2_0_0" | "arith";
  kernel: string;
  origination_proof: string;
  parameters_ty: unknown;
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _017_PtNairob$Operation$Alpha$OperationResult$SmartRollupOriginate;
    internal_operation_results?: _017_PtNairob$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied12 {
  status: "applied";
  balance_updates: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  address: _017_PtNairob$ContractId;
  genesis_commitment_hash: _017_PtNairob$ContractId;
  consumed_milligas?: PositiveBigNumber;
  size: BigNumber;
}
export interface Failed14 {
  status: "failed";
  errors: _017_PtNairob$Error[];
}
export interface Skipped14 {
  status: "skipped";
}
export interface Backtracked12 {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  balance_updates: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  address: _017_PtNairob$ContractId;
  genesis_commitment_hash: _017_PtNairob$ContractId;
  consumed_milligas?: PositiveBigNumber;
  size: BigNumber;
}
export interface SmartRollupAddMessages1 {
  kind: "smart_rollup_add_messages";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  message: string[];
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _017_PtNairob$Operation$Alpha$OperationResult$SmartRollupAddMessages;
    internal_operation_results?: _017_PtNairob$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied13 {
  status: "applied";
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed15 {
  status: "failed";
  errors: _017_PtNairob$Error[];
}
export interface Skipped15 {
  status: "skipped";
}
export interface Backtracked13 {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  consumed_milligas?: PositiveBigNumber;
}
export interface SmartRollupCement1 {
  kind: "smart_rollup_cement";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _017_PtNairob$ContractId;
  commitment: _017_PtNairob$ContractId;
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _017_PtNairob$Operation$Alpha$OperationResult$SmartRollupCement;
    internal_operation_results?: _017_PtNairob$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied14 {
  status: "applied";
  consumed_milligas?: PositiveBigNumber;
  inbox_level: number;
  commitment_hash: _017_PtNairob$ContractId;
}
export interface Failed16 {
  status: "failed";
  errors: _017_PtNairob$Error[];
}
export interface Skipped16 {
  status: "skipped";
}
export interface Backtracked14 {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  consumed_milligas?: PositiveBigNumber;
  inbox_level: number;
  commitment_hash: _017_PtNairob$ContractId;
}
export interface SmartRollupPublish1 {
  kind: "smart_rollup_publish";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _017_PtNairob$ContractId;
  commitment: {
    compressed_state: _017_PtNairob$ContractId;
    inbox_level: number;
    predecessor: _017_PtNairob$ContractId;
    number_of_ticks: BitIntegers;
  };
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _017_PtNairob$Operation$Alpha$OperationResult$SmartRollupPublish;
    internal_operation_results?: _017_PtNairob$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied15 {
  status: "applied";
  consumed_milligas?: PositiveBigNumber;
  staked_hash: _017_PtNairob$ContractId;
  published_at_level: number;
  balance_updates: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
}
export interface Failed17 {
  status: "failed";
  errors: _017_PtNairob$Error[];
}
export interface Skipped17 {
  status: "skipped";
}
export interface Backtracked15 {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  consumed_milligas?: PositiveBigNumber;
  staked_hash: _017_PtNairob$ContractId;
  published_at_level: number;
  balance_updates: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
}
export interface SmartRollupRefute1 {
  kind: "smart_rollup_refute";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _017_PtNairob$ContractId;
  opponent: _017_PtNairob$ContractId;
  refutation: Start1 | Move1;
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _017_PtNairob$Operation$Alpha$OperationResult$SmartRollupRefute;
    internal_operation_results?: _017_PtNairob$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Start1 {
  refutation_kind: "start";
  player_commitment_hash: _017_PtNairob$ContractId;
  opponent_commitment_hash: _017_PtNairob$ContractId;
}
export interface Move1 {
  refutation_kind: "move";
  choice: PositiveBigNumber;
  step: Dissection1 | Proof1;
}
export interface Proof1 {
  pvm_step: string;
  input_proof?: InboxProof1 | RevealProof1 | FirstInput1;
}
export interface InboxProof1 {
  input_proof_kind: "inbox_proof";
  level: number;
  message_counter: PositiveBigNumber;
  serialized_proof: string;
}
export interface RevealProof1 {
  input_proof_kind: "reveal_proof";
  reveal_proof: RawDataProof1 | MetadataProof1 | DalPageProof1;
}
export interface RawDataProof1 {
  reveal_proof_kind: "raw_data_proof";
  raw_data: string;
}
export interface MetadataProof1 {
  reveal_proof_kind: "metadata_proof";
}
export interface DalPageProof1 {
  reveal_proof_kind: "dal_page_proof";
  dal_page_id: {
    published_level: number;
    slot_index: number;
    page_index: number;
  };
  dal_proof: string;
}
export interface FirstInput1 {
  input_proof_kind: "first_input";
}
export interface Applied16 {
  status: "applied";
  consumed_milligas?: PositiveBigNumber;
  game_status: Ongoing | Ended;
  balance_updates: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
}
export interface Ended {
  result: Loser | Draw;
}
export interface Loser {
  kind: "loser";
  reason: ConflictResolved | Timeout;
  player: _017_PtNairob$ContractId;
}
export interface Draw {
  kind: "draw";
}
export interface Failed18 {
  status: "failed";
  errors: _017_PtNairob$Error[];
}
export interface Skipped18 {
  status: "skipped";
}
export interface Backtracked16 {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  consumed_milligas?: PositiveBigNumber;
  game_status: Ongoing1 | Ended1;
  balance_updates: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
}
export interface Ended1 {
  result: Loser1 | Draw1;
}
export interface Loser1 {
  kind: "loser";
  reason: ConflictResolved1 | Timeout1;
  player: _017_PtNairob$ContractId;
}
export interface Draw1 {
  kind: "draw";
}
export interface SmartRollupTimeout1 {
  kind: "smart_rollup_timeout";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _017_PtNairob$ContractId;
  stakers: {
    alice: _017_PtNairob$ContractId;
    bob: _017_PtNairob$ContractId;
  };
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _017_PtNairob$Operation$Alpha$OperationResult$SmartRollupTimeout;
    internal_operation_results?: _017_PtNairob$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied17 {
  status: "applied";
  consumed_milligas?: PositiveBigNumber;
  game_status: Ongoing2 | Ended2;
  balance_updates: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
}
export interface Ended2 {
  result: Loser2 | Draw2;
}
export interface Loser2 {
  kind: "loser";
  reason: ConflictResolved2 | Timeout2;
  player: _017_PtNairob$ContractId;
}
export interface Draw2 {
  kind: "draw";
}
export interface Failed19 {
  status: "failed";
  errors: _017_PtNairob$Error[];
}
export interface Skipped19 {
  status: "skipped";
}
export interface Backtracked17 {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  consumed_milligas?: PositiveBigNumber;
  game_status: Ongoing3 | Ended3;
  balance_updates: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
}
export interface Ended3 {
  result: Loser3 | Draw3;
}
export interface Loser3 {
  kind: "loser";
  reason: ConflictResolved3 | Timeout3;
  player: _017_PtNairob$ContractId;
}
export interface Draw3 {
  kind: "draw";
}
export interface SmartRollupExecuteOutboxMessage1 {
  kind: "smart_rollup_execute_outbox_message";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _017_PtNairob$ContractId;
  cemented_commitment: _017_PtNairob$ContractId;
  output_proof: string;
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _017_PtNairob$Operation$Alpha$OperationResult$SmartRollupExecuteOutboxMessage;
    internal_operation_results?: _017_PtNairob$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied18 {
  status: "applied";
  balance_updates: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  ticket_updates: {
    ticket_token: {
      ticketer: _017_PtNairob$ContractId;
      content_type: Micheline$017_PtNairob$MichelsonV1$Expression;
      content: Micheline$017_PtNairob$MichelsonV1$Expression;
    };
    updates: {
      account: _017_PtNairob$ContractId;
      amount: BigNumber;
    }[];
  }[];
  consumed_milligas?: PositiveBigNumber;
  paid_storage_size_diff?: BigNumber;
}
export interface Failed20 {
  status: "failed";
  errors: _017_PtNairob$Error[];
}
export interface Skipped20 {
  status: "skipped";
}
export interface Backtracked18 {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  balance_updates: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  ticket_updates: {
    ticket_token: {
      ticketer: _017_PtNairob$ContractId;
      content_type: Micheline$017_PtNairob$MichelsonV1$Expression;
      content: Micheline$017_PtNairob$MichelsonV1$Expression;
    };
    updates: {
      account: _017_PtNairob$ContractId;
      amount: BigNumber;
    }[];
  }[];
  consumed_milligas?: PositiveBigNumber;
  paid_storage_size_diff?: BigNumber;
}
export interface SmartRollupRecoverBond1 {
  kind: "smart_rollup_recover_bond";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _017_PtNairob$ContractId;
  staker: _017_PtNairob$ContractId;
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _017_PtNairob$Operation$Alpha$OperationResult$SmartRollupRecoverBond;
    internal_operation_results?: _017_PtNairob$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied19 {
  status: "applied";
  balance_updates: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed21 {
  status: "failed";
  errors: _017_PtNairob$Error[];
}
export interface Skipped21 {
  status: "skipped";
}
export interface Backtracked19 {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  balance_updates: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
}
export interface ZkRollupOrigination1 {
  kind: "zk_rollup_origination";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  public_parameters: string;
  circuits_info: [] | [_017_PtNairob$ContractId] | [_017_PtNairob$ContractId, Public1 | Private1 | Fee1][];
  init_state: string[];
  nb_ops: number;
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _017_PtNairob$Operation$Alpha$OperationResult$ZkRollupOrigination;
    internal_operation_results?: _017_PtNairob$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Public1 {
  public: unknown;
}
export interface Private1 {
  private: unknown;
}
export interface Fee1 {
  fee: unknown;
}
export interface Applied20 {
  status: "applied";
  balance_updates: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  originated_zk_rollup: _017_PtNairob$ContractId;
  consumed_milligas?: PositiveBigNumber;
  size: BigNumber;
}
export interface Failed22 {
  status: "failed";
  errors: _017_PtNairob$Error[];
}
export interface Skipped22 {
  status: "skipped";
}
export interface Backtracked20 {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  balance_updates: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  originated_zk_rollup: _017_PtNairob$ContractId;
  consumed_milligas?: PositiveBigNumber;
  size: BigNumber;
}
export interface ZkRollupPublish1 {
  kind: "zk_rollup_publish";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  zk_rollup: _017_PtNairob$ContractId;
  op:
    | []
    | [
        {
          op_code: number;
          price: {
            id: _017_PtNairob$ContractId;
            amount: BigNumber;
          };
          l1_dst: _017_PtNairob$ContractId;
          rollup_id: _017_PtNairob$ContractId;
          payload: string[];
        }
      ]
    | [
        {
          op_code: number;
          price: {
            id: _017_PtNairob$ContractId;
            amount: BigNumber;
          };
          l1_dst: _017_PtNairob$ContractId;
          rollup_id: _017_PtNairob$ContractId;
          payload: string[];
        },
        Some1 | None2
      ][];
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _017_PtNairob$Operation$Alpha$OperationResult$ZkRollupPublish;
    internal_operation_results?: _017_PtNairob$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Some1 {
  contents: Micheline$017_PtNairob$MichelsonV1$Expression;
  ty: Micheline$017_PtNairob$MichelsonV1$Expression;
  ticketer: _017_PtNairob$ContractId;
}
export interface Applied21 {
  status: "applied";
  balance_updates: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  size: BigNumber;
}
export interface Failed23 {
  status: "failed";
  errors: _017_PtNairob$Error[];
}
export interface Skipped23 {
  status: "skipped";
}
export interface Backtracked21 {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  balance_updates: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  size: BigNumber;
}
export interface ZkRollupUpdate1 {
  kind: "zk_rollup_update";
  source: _017_PtNairob$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  zk_rollup: _017_PtNairob$ContractId;
  update: {
    pending_pis:
      | []
      | [_017_PtNairob$ContractId]
      | [
          _017_PtNairob$ContractId,
          {
            new_state: string[];
            fee: string;
            exit_validity: boolean;
          }
        ][];
    private_pis:
      | []
      | [_017_PtNairob$ContractId]
      | [
          _017_PtNairob$ContractId,
          {
            new_state: string[];
            fee: string;
          }
        ][];
    fee_pi: {
      new_state: string[];
    };
    proof: string;
  };
  metadata: {
    balance_updates?: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _017_PtNairob$Operation$Alpha$OperationResult$ZkRollupUpdate;
    internal_operation_results?: _017_PtNairob$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied22 {
  status: "applied";
  balance_updates: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  paid_storage_size_diff?: BigNumber;
}
export interface Failed24 {
  status: "failed";
  errors: _017_PtNairob$Error[];
}
export interface Skipped24 {
  status: "skipped";
}
export interface Backtracked22 {
  status: "backtracked";
  errors?: _017_PtNairob$Error[];
  balance_updates: _017_PtNairob$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  paid_storage_size_diff?: BigNumber;
}
