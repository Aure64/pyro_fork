/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type _012_Psithaca$ContractId = string;
/**
 * The fitness, or score, of a block, that allow the Tezos to decide which chain is the best. A fitness value is a list of byte sequences. They are compared as follows: shortest lists are smaller; lists of the same length are compared according to the lexicographical order.
 */
export type BlockFitness = string[];
export type TestChainStatus = NotRunning | Forking | Running;
export type Proposal = "proposal";
export type Exploration = "exploration";
export type Cooldown = "cooldown";
export type Promotion = "promotion";
export type Adoption = "adoption";
export type None = null;
/**
 * Decimal representation of a positive big number
 */
export type PositiveBigNumber = string;
/**
 * Decimal representation of 64 bit integers
 */
export type BitIntegers = string;
export type BlockApplication = "block";
export type ProtocolMigration = "migration";
export type Subsidy = "subsidy";
export type Simulation = "simulation";
export type BlockApplication1 = "block";
export type ProtocolMigration1 = "migration";
export type Subsidy1 = "subsidy";
export type Simulation1 = "simulation";
export type BlockApplication2 = "block";
export type ProtocolMigration2 = "migration";
export type Subsidy2 = "subsidy";
export type Simulation2 = "simulation";
export type BlockApplication3 = "block";
export type ProtocolMigration3 = "migration";
export type Subsidy3 = "subsidy";
export type Simulation3 = "simulation";
export type BlockApplication4 = "block";
export type ProtocolMigration4 = "migration";
export type Subsidy4 = "subsidy";
export type Simulation4 = "simulation";
export type BlockApplication5 = "block";
export type ProtocolMigration5 = "migration";
export type Subsidy5 = "subsidy";
export type Simulation5 = "simulation";
export type BlockApplication6 = "block";
export type ProtocolMigration6 = "migration";
export type Subsidy6 = "subsidy";
export type Simulation6 = "simulation";
export type BlockApplication7 = "block";
export type ProtocolMigration7 = "migration";
export type Subsidy7 = "subsidy";
export type Simulation7 = "simulation";
export type BlockApplication8 = "block";
export type ProtocolMigration8 = "migration";
export type Subsidy8 = "subsidy";
export type Simulation8 = "simulation";
export type BlockApplication9 = "block";
export type ProtocolMigration9 = "migration";
export type Subsidy9 = "subsidy";
export type Simulation9 = "simulation";
export type BlockApplication10 = "block";
export type ProtocolMigration10 = "migration";
export type Subsidy10 = "subsidy";
export type Simulation10 = "simulation";
export type BlockApplication11 = "block";
export type ProtocolMigration11 = "migration";
export type Subsidy11 = "subsidy";
export type Simulation11 = "simulation";
export type BlockApplication12 = "block";
export type ProtocolMigration12 = "migration";
export type Subsidy12 = "subsidy";
export type Simulation12 = "simulation";
export type BlockApplication13 = "block";
export type ProtocolMigration13 = "migration";
export type Subsidy13 = "subsidy";
export type Simulation13 = "simulation";
export type BlockApplication14 = "block";
export type ProtocolMigration14 = "migration";
export type Subsidy14 = "subsidy";
export type Simulation14 = "simulation";
export type BlockApplication15 = "block";
export type ProtocolMigration15 = "migration";
export type Subsidy15 = "subsidy";
export type Simulation15 = "simulation";
export type BlockApplication16 = "block";
export type ProtocolMigration16 = "migration";
export type Subsidy16 = "subsidy";
export type Simulation16 = "simulation";
export type BlockApplication17 = "block";
export type ProtocolMigration17 = "migration";
export type Subsidy17 = "subsidy";
export type Simulation17 = "simulation";
export type BlockApplication18 = "block";
export type ProtocolMigration18 = "migration";
export type Subsidy18 = "subsidy";
export type Simulation18 = "simulation";
export type BlockApplication19 = "block";
export type ProtocolMigration19 = "migration";
export type Subsidy19 = "subsidy";
export type Simulation19 = "simulation";
export type BlockApplication20 = "block";
export type ProtocolMigration20 = "migration";
export type Subsidy20 = "subsidy";
export type Simulation20 = "simulation";
export type _012_Psithaca$OperationMetadata$Alpha$BalanceUpdates = (
  | Contract
  | LegacyRewards
  | BlockFees
  | LegacyDeposits
  | Deposits
  | NonceRevelationRewards
  | DoubleSigningEvidenceRewards
  | EndorsingRewards
  | BakingRewards
  | BakingBonuses
  | LegacyFees
  | StorageFees
  | DoubleSigningPunishments
  | LostEndorsingRewards
  | LiquidityBakingSubsidies
  | Burned
  | Commitments
  | Bootstrap
  | Invoice
  | InitialCommitments
  | Minted
)[];
export type _012_Psithaca$Operation$Alpha$SuccessfulManagerOperationResult =
  | Reveal
  | Transaction
  | Origination
  | Delegation
  | SetDepositsLimit;
/**
 * Decimal representation of a big number
 */
export type BigNumber = string;
export type Micheline$012_Psithaca$MichelsonV1$Expression =
  | Int1
  | String1
  | Bytes1
  | Sequence1
  | Prim_Generic;
export type Sequence1 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type _012_Psithaca$Michelson$V1$Primitives =
  | "ABS"
  | "IF"
  | "SENDER"
  | "NEVER"
  | "False"
  | "DUG"
  | "DIG"
  | "chest_key"
  | "BLAKE2B"
  | "list"
  | "bls12_381_g1"
  | "Pair"
  | "INT"
  | "nat"
  | "never"
  | "storage"
  | "SIZE"
  | "view"
  | "SHA256"
  | "AND"
  | "VIEW"
  | "bytes"
  | "NIL"
  | "map"
  | "SUB"
  | "SAPLING_EMPTY_STATE"
  | "CHECK_SIGNATURE"
  | "VOTING_POWER"
  | "operation"
  | "MAP"
  | "option"
  | "bls12_381_fr"
  | "ADD"
  | "IMPLICIT_ACCOUNT"
  | "SHA512"
  | "int"
  | "LSL"
  | "bls12_381_g2"
  | "ticket"
  | "sapling_transaction"
  | "COMPARE"
  | "SWAP"
  | "STEPS_TO_QUOTA"
  | "DROP"
  | "pair"
  | "BALANCE"
  | "CONCAT"
  | "MUL"
  | "FAILWITH"
  | "Elt"
  | "lambda"
  | "OR"
  | "DIP"
  | "MEM"
  | "ITER"
  | "key_hash"
  | "XOR"
  | "Some"
  | "parameter"
  | "address"
  | "EMPTY_MAP"
  | "None"
  | "TRANSFER_TOKENS"
  | "or"
  | "AMOUNT"
  | "signature"
  | "SHA3"
  | "string"
  | "CHAIN_ID"
  | "HASH_KEY"
  | "IF_LEFT"
  | "CREATE_ACCOUNT"
  | "LT"
  | "TOTAL_VOTING_POWER"
  | "UNPACK"
  | "READ_TICKET"
  | "SELF_ADDRESS"
  | "timestamp"
  | "SET_DELEGATE"
  | "LE"
  | "SOURCE"
  | "CREATE_CONTRACT"
  | "Unit"
  | "SAPLING_VERIFY_UPDATE"
  | "NONE"
  | "CONTRACT"
  | "GE"
  | "SOME"
  | "key"
  | "SELF"
  | "set"
  | "CAR"
  | "NOT"
  | "unit"
  | "CDR"
  | "LOOP_LEFT"
  | "PAIRING_CHECK"
  | "RIGHT"
  | "LEFT"
  | "CAST"
  | "True"
  | "Right"
  | "PACK"
  | "IF_CONS"
  | "KECCAK"
  | "chest"
  | "UNIT"
  | "EMPTY_SET"
  | "NEQ"
  | "LAMBDA"
  | "mutez"
  | "TICKET"
  | "LOOP"
  | "Left"
  | "contract"
  | "LSR"
  | "EMPTY_BIG_MAP"
  | "sapling_state"
  | "JOIN_TICKETS"
  | "LEVEL"
  | "UNPAIR"
  | "SPLIT_TICKET"
  | "PUSH"
  | "big_map"
  | "GT"
  | "chain_id"
  | "constant"
  | "NOW"
  | "IF_NONE"
  | "PAIR"
  | "GET_AND_UPDATE"
  | "UPDATE"
  | "ISNAT"
  | "RENAME"
  | "OPEN_CHEST"
  | "EDIV"
  | "EQ"
  | "ADDRESS"
  | "bool"
  | "EXEC"
  | "GET"
  | "NEG"
  | "SLICE"
  | "DUP"
  | "CONS"
  | "APPLY"
  | "SUB_MUTEZ"
  | "code";
export type Sequence = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence2 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence3 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence4 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence5 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence6 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence7 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence8 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence9 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence10 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence11 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence12 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence13 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sapling$Transaction$Commitment = string;
export type Sapling$Transaction$CommitmentValue = string;
export type Sapling$DH$Epk = string;
export type Sapling$Transaction$Nullifier = string;
export type _012_Psithaca$LazyStorageDiff = (BigMap | SaplingState)[];
export type Sequence14 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence15 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence16 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence17 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Operation =
  | {
      protocol: "Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A";
      chain_id: _012_Psithaca$ContractId;
      hash: _012_Psithaca$ContractId;
      branch: _012_Psithaca$ContractId;
      contents: _012_Psithaca$Operation$Alpha$OperationContentsAndResult[];
      signature?: _012_Psithaca$ContractId;
    }
  | {
      protocol: "Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A";
      chain_id: _012_Psithaca$ContractId;
      hash: _012_Psithaca$ContractId;
      branch: _012_Psithaca$ContractId;
      contents: _012_Psithaca$Operation$Alpha$Contents[];
      signature?: _012_Psithaca$ContractId;
    }
  | {
      protocol: "Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A";
      chain_id: _012_Psithaca$ContractId;
      hash: _012_Psithaca$ContractId;
      branch: _012_Psithaca$ContractId;
      contents: _012_Psithaca$Operation$Alpha$Contents[];
      signature: _012_Psithaca$ContractId;
    };
export type _012_Psithaca$Operation$Alpha$OperationContentsAndResult =
  | SeedNonceRevelation
  | Endorsement
  | Preendorsement
  | DoublePreendorsementEvidence
  | DoubleEndorsementEvidence
  | DoubleBakingEvidence
  | ActivateAccount
  | Proposals
  | Ballot
  | Reveal1
  | Transaction2
  | Origination2
  | Delegation2
  | RegisterGlobalConstant1
  | SetDepositsLimit2;
export type _012_Psithaca$Inlined$Preendorsement$Contents = Preendorsement1;
export type _012_Psithaca$Inlined$EndorsementMempool$Contents = Endorsement1;
export type _012_Psithaca$Operation$Alpha$OperationResult$Reveal =
  | Applied
  | Failed
  | Skipped
  | Backtracked;
export type _012_Psithaca$Operation$Alpha$InternalOperationResult =
  | Reveal2
  | Transaction1
  | Origination1
  | Delegation1
  | RegisterGlobalConstant
  | SetDepositsLimit1;
export type _012_Psithaca$Entrypoint =
  | Default
  | Root
  | Do
  | SetDelegate
  | RemoveDelegate
  | Named;
export type Default = "default";
export type Root = "root";
export type Do = "do";
export type SetDelegate = "set_delegate";
export type RemoveDelegate = "remove_delegate";
export type Named = string;
export type Sequence18 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type _012_Psithaca$Operation$Alpha$OperationResult$Transaction =
  | Applied1
  | Failed1
  | Skipped1
  | Backtracked1;
export type Sequence19 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence20 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence21 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence22 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence23 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence24 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence25 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence26 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence27 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence28 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence29 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence30 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type _012_Psithaca$Operation$Alpha$OperationResult$Origination =
  | Applied2
  | Failed2
  | Skipped2
  | Backtracked2;
export type Sequence31 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence32 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence33 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence34 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence35 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence36 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence37 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence38 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type _012_Psithaca$Operation$Alpha$OperationResult$Delegation =
  | Applied3
  | Failed3
  | Skipped3
  | Backtracked3;
export type Sequence39 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type _012_Psithaca$Operation$Alpha$OperationResult$RegisterGlobalConstant =
  Applied4 | Failed4 | Skipped4 | Backtracked4;
export type _012_Psithaca$Operation$Alpha$OperationResult$SetDepositsLimit =
  | Applied5
  | Failed5
  | Skipped5
  | Backtracked5;
export type Sequence40 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence41 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type _012_Psithaca$Operation$Alpha$Contents =
  | Endorsement2
  | Preendorsement2
  | SeedNonceRevelation1
  | DoubleEndorsementEvidence1
  | DoublePreendorsementEvidence1
  | DoubleBakingEvidence1
  | ActivateAccount1
  | Proposals1
  | Ballot1
  | Reveal3
  | Transaction3
  | Origination3
  | Delegation3
  | SetDepositsLimit3
  | FailingNoop
  | RegisterGlobalConstant2;
export type Sequence42 = Micheline$012_Psithaca$MichelsonV1$Expression[];
export type Sequence43 = Micheline$012_Psithaca$MichelsonV1$Expression[];

export interface Block {
  protocol: "Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A";
  chain_id: _012_Psithaca$ContractId;
  hash: _012_Psithaca$ContractId;
  header: ShellHeader;
  metadata?: BlockHeaderMetadata;
  operations: Operation[][];
}
/**
 * Block header's shell-related content. It contains information such as the block level, its predecessor and timestamp.
 */
export interface ShellHeader {
  level: number;
  proto: number;
  predecessor: _012_Psithaca$ContractId;
  timestamp: _012_Psithaca$ContractId;
  validation_pass: number;
  operations_hash: _012_Psithaca$ContractId;
  fitness: BlockFitness;
  context: _012_Psithaca$ContractId;
  payload_hash: _012_Psithaca$ContractId;
  payload_round: number;
  proof_of_work_nonce: string;
  seed_nonce_hash?: _012_Psithaca$ContractId;
  liquidity_baking_escape_vote: boolean;
  signature: _012_Psithaca$ContractId;
}
export interface BlockHeaderMetadata {
  protocol: "Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A";
  next_protocol: "Psithaca2MLRFYargivpo7YvUr7wUDqyxrdhC5CQq78mRvimz6A";
  test_chain_status: TestChainStatus;
  max_operations_ttl: number;
  max_operation_data_length: number;
  max_block_header_length: number;
  max_operation_list_length: {
    max_size: number;
    max_op?: number;
  }[];
  proposer: _012_Psithaca$ContractId;
  baker: _012_Psithaca$ContractId;
  level_info: {
    /**
     * The level of the block relative to genesis. This is also the Shell's notion of level.
     */
    level: number;
    /**
     * The level of the block relative to the successor of the genesis block. More precisely, it is the position of the block relative to the block that starts the "Alpha family" of protocols, which includes all protocols except Genesis (that is, from 001 onwards).
     */
    level_position: number;
    /**
     * The current cycle's number. Note that cycles are a protocol-specific notion. As a result, the cycle number starts at 0 with the first block of the Alpha family of protocols.
     */
    cycle: number;
    /**
     * The current level of the block relative to the first block of the current cycle.
     */
    cycle_position: number;
    /**
     * Tells whether the baker of this block has to commit a seed nonce hash.
     */
    expected_commitment: boolean;
  };
  voting_period_info: {
    /**
     * The voting period to which the block belongs.
     */
    voting_period: {
      /**
       * The voting period's index. Starts at 0 with the first block of the Alpha family of protocols.
       */
      index: number;
      kind: Proposal | Exploration | Cooldown | Promotion | Adoption;
      /**
       * The relative position of the first level of the period with respect to the first level of the Alpha family of protocols.
       */
      start_position: number;
    };
    /**
     * The position of the block within the voting period.
     */
    position: number;
    /**
     * The number of blocks remaining till the end of the voting period.
     */
    remaining: number;
  };
  nonce_hash: _012_Psithaca$ContractId | None;
  consumed_gas: PositiveBigNumber;
  deactivated: _012_Psithaca$ContractId[];
  balance_updates: _012_Psithaca$OperationMetadata$Alpha$BalanceUpdates;
  liquidity_baking_escape_ema: number;
  implicit_operations_results: _012_Psithaca$Operation$Alpha$SuccessfulManagerOperationResult[];
}
export interface NotRunning {
  status: "not_running";
}
export interface Forking {
  status: "forking";
  protocol: _012_Psithaca$ContractId;
  expiration: _012_Psithaca$ContractId;
}
export interface Running {
  status: "running";
  chain_id: _012_Psithaca$ContractId;
  genesis: _012_Psithaca$ContractId;
  protocol: _012_Psithaca$ContractId;
  expiration: _012_Psithaca$ContractId;
}
export interface Contract {
  kind: "contract";
  contract: _012_Psithaca$ContractId;
  change: BitIntegers;
  origin: BlockApplication | ProtocolMigration | Subsidy | Simulation;
}
export interface LegacyRewards {
  kind: "freezer";
  category: "legacy_rewards";
  delegate: _012_Psithaca$ContractId;
  cycle: number;
  change: BitIntegers;
  origin: BlockApplication1 | ProtocolMigration1 | Subsidy1 | Simulation1;
}
export interface BlockFees {
  kind: "accumulator";
  category: "block fees";
  change: BitIntegers;
  origin: BlockApplication2 | ProtocolMigration2 | Subsidy2 | Simulation2;
}
export interface LegacyDeposits {
  kind: "freezer";
  category: "legacy_deposits";
  delegate: _012_Psithaca$ContractId;
  cycle: number;
  change: BitIntegers;
  origin: BlockApplication3 | ProtocolMigration3 | Subsidy3 | Simulation3;
}
export interface Deposits {
  kind: "freezer";
  category: "deposits";
  delegate: _012_Psithaca$ContractId;
  change: BitIntegers;
  origin: BlockApplication4 | ProtocolMigration4 | Subsidy4 | Simulation4;
}
export interface NonceRevelationRewards {
  kind: "minted";
  category: "nonce revelation rewards";
  change: BitIntegers;
  origin: BlockApplication5 | ProtocolMigration5 | Subsidy5 | Simulation5;
}
export interface DoubleSigningEvidenceRewards {
  kind: "minted";
  category: "double signing evidence rewards";
  change: BitIntegers;
  origin: BlockApplication6 | ProtocolMigration6 | Subsidy6 | Simulation6;
}
export interface EndorsingRewards {
  kind: "minted";
  category: "endorsing rewards";
  change: BitIntegers;
  origin: BlockApplication7 | ProtocolMigration7 | Subsidy7 | Simulation7;
}
export interface BakingRewards {
  kind: "minted";
  category: "baking rewards";
  change: BitIntegers;
  origin: BlockApplication8 | ProtocolMigration8 | Subsidy8 | Simulation8;
}
export interface BakingBonuses {
  kind: "minted";
  category: "baking bonuses";
  change: BitIntegers;
  origin: BlockApplication9 | ProtocolMigration9 | Subsidy9 | Simulation9;
}
export interface LegacyFees {
  kind: "freezer";
  category: "legacy_fees";
  delegate: _012_Psithaca$ContractId;
  cycle: number;
  change: BitIntegers;
  origin: BlockApplication10 | ProtocolMigration10 | Subsidy10 | Simulation10;
}
export interface StorageFees {
  kind: "burned";
  category: "storage fees";
  change: BitIntegers;
  origin: BlockApplication11 | ProtocolMigration11 | Subsidy11 | Simulation11;
}
export interface DoubleSigningPunishments {
  kind: "burned";
  category: "punishments";
  change: BitIntegers;
  origin: BlockApplication12 | ProtocolMigration12 | Subsidy12 | Simulation12;
}
export interface LostEndorsingRewards {
  kind: "burned";
  category: "lost endorsing rewards";
  delegate: _012_Psithaca$ContractId;
  participation: boolean;
  revelation: boolean;
  change: BitIntegers;
  origin: BlockApplication13 | ProtocolMigration13 | Subsidy13 | Simulation13;
}
export interface LiquidityBakingSubsidies {
  kind: "minted";
  category: "subsidy";
  change: BitIntegers;
  origin: BlockApplication14 | ProtocolMigration14 | Subsidy14 | Simulation14;
}
export interface Burned {
  kind: "burned";
  category: "burned";
  change: BitIntegers;
  origin: BlockApplication15 | ProtocolMigration15 | Subsidy15 | Simulation15;
}
export interface Commitments {
  kind: "commitment";
  category: "commitment";
  committer: _012_Psithaca$ContractId;
  change: BitIntegers;
  origin: BlockApplication16 | ProtocolMigration16 | Subsidy16 | Simulation16;
}
export interface Bootstrap {
  kind: "minted";
  category: "bootstrap";
  change: BitIntegers;
  origin: BlockApplication17 | ProtocolMigration17 | Subsidy17 | Simulation17;
}
export interface Invoice {
  kind: "minted";
  category: "invoice";
  change: BitIntegers;
  origin: BlockApplication18 | ProtocolMigration18 | Subsidy18 | Simulation18;
}
export interface InitialCommitments {
  kind: "minted";
  category: "commitment";
  change: BitIntegers;
  origin: BlockApplication19 | ProtocolMigration19 | Subsidy19 | Simulation19;
}
export interface Minted {
  kind: "minted";
  category: "minted";
  change: BitIntegers;
  origin: BlockApplication20 | ProtocolMigration20 | Subsidy20 | Simulation20;
}
export interface Reveal {
  kind: "reveal";
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface Transaction {
  kind: "transaction";
  storage?: Int | String | Bytes | Sequence | Prim_Generic1;
  big_map_diff?: (Update | Remove | Copy | Alloc)[];
  balance_updates?: _012_Psithaca$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _012_Psithaca$ContractId[];
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  allocated_destination_contract?: boolean;
  lazy_storage_diff?: _012_Psithaca$LazyStorageDiff;
}
export interface Int {
  int: BigNumber;
}
export interface String {
  string: _012_Psithaca$ContractId;
}
export interface Bytes {
  bytes: string;
}
export interface Int1 {
  int: BigNumber;
}
export interface String1 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes1 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic1 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Update {
  action: "update";
  big_map: BigNumber;
  key_hash: _012_Psithaca$ContractId;
  key: Int2 | String2 | Bytes2 | Sequence2 | Prim_Generic2;
  value?: Int3 | String3 | Bytes3 | Sequence3 | Prim_Generic3;
}
export interface Int2 {
  int: BigNumber;
}
export interface String2 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes2 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic2 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int3 {
  int: BigNumber;
}
export interface String3 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes3 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic3 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Remove {
  action: "remove";
  big_map: BigNumber;
}
export interface Copy {
  action: "copy";
  source_big_map: BigNumber;
  destination_big_map: BigNumber;
}
export interface Alloc {
  action: "alloc";
  big_map: BigNumber;
  key_type: Int4 | String4 | Bytes4 | Sequence4 | Prim_Generic4;
  value_type: Int5 | String5 | Bytes5 | Sequence5 | Prim_Generic5;
}
export interface Int4 {
  int: BigNumber;
}
export interface String4 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes4 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic4 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int5 {
  int: BigNumber;
}
export interface String5 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes5 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic5 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface BigMap {
  kind: "big_map";
  id: BigNumber;
  diff: Update1 | Remove1 | Copy1 | Alloc1;
}
export interface Update1 {
  action: "update";
  updates: {
    key_hash: _012_Psithaca$ContractId;
    key: Int6 | String6 | Bytes6 | Sequence6 | Prim_Generic6;
    value?: Int7 | String7 | Bytes7 | Sequence7 | Prim_Generic7;
  }[];
}
export interface Int6 {
  int: BigNumber;
}
export interface String6 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes6 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic6 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int7 {
  int: BigNumber;
}
export interface String7 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes7 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic7 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Remove1 {
  action: "remove";
}
export interface Copy1 {
  action: "copy";
  source: BigNumber;
  updates: {
    key_hash: _012_Psithaca$ContractId;
    key: Int8 | String8 | Bytes8 | Sequence8 | Prim_Generic8;
    value?: Int9 | String9 | Bytes9 | Sequence9 | Prim_Generic9;
  }[];
}
export interface Int8 {
  int: BigNumber;
}
export interface String8 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes8 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic8 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int9 {
  int: BigNumber;
}
export interface String9 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes9 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic9 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Alloc1 {
  action: "alloc";
  updates: {
    key_hash: _012_Psithaca$ContractId;
    key: Int10 | String10 | Bytes10 | Sequence10 | Prim_Generic10;
    value?: Int11 | String11 | Bytes11 | Sequence11 | Prim_Generic11;
  }[];
  key_type: Int12 | String12 | Bytes12 | Sequence12 | Prim_Generic12;
  value_type: Int13 | String13 | Bytes13 | Sequence13 | Prim_Generic13;
}
export interface Int10 {
  int: BigNumber;
}
export interface String10 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes10 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic10 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int11 {
  int: BigNumber;
}
export interface String11 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes11 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic11 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int12 {
  int: BigNumber;
}
export interface String12 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes12 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic12 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int13 {
  int: BigNumber;
}
export interface String13 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes13 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic13 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface SaplingState {
  kind: "sapling_state";
  id: BigNumber;
  diff: Update2 | Remove2 | Copy2 | Alloc2;
}
export interface Update2 {
  action: "update";
  updates: {
    commitments_and_ciphertexts:
      | []
      | [Sapling$Transaction$Commitment]
      | [Sapling$Transaction$Commitment, Sapling$Transaction$Ciphertext][];
    nullifiers: Sapling$Transaction$Nullifier[];
  };
}
export interface Sapling$Transaction$Ciphertext {
  cv: Sapling$Transaction$CommitmentValue;
  epk: Sapling$DH$Epk;
  payload_enc: string;
  nonce_enc: string;
  payload_out: string;
  nonce_out: string;
}
export interface Remove2 {
  action: "remove";
}
export interface Copy2 {
  action: "copy";
  source: BigNumber;
  updates: {
    commitments_and_ciphertexts:
      | []
      | [Sapling$Transaction$Commitment]
      | [Sapling$Transaction$Commitment, Sapling$Transaction$Ciphertext][];
    nullifiers: Sapling$Transaction$Nullifier[];
  };
}
export interface Alloc2 {
  action: "alloc";
  updates: {
    commitments_and_ciphertexts:
      | []
      | [Sapling$Transaction$Commitment]
      | [Sapling$Transaction$Commitment, Sapling$Transaction$Ciphertext][];
    nullifiers: Sapling$Transaction$Nullifier[];
  };
  memo_size: number;
}
export interface Origination {
  kind: "origination";
  big_map_diff?: (Update3 | Remove3 | Copy3 | Alloc3)[];
  balance_updates?: _012_Psithaca$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _012_Psithaca$ContractId[];
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  lazy_storage_diff?: _012_Psithaca$LazyStorageDiff;
}
export interface Update3 {
  action: "update";
  big_map: BigNumber;
  key_hash: _012_Psithaca$ContractId;
  key: Int14 | String14 | Bytes14 | Sequence14 | Prim_Generic14;
  value?: Int15 | String15 | Bytes15 | Sequence15 | Prim_Generic15;
}
export interface Int14 {
  int: BigNumber;
}
export interface String14 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes14 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic14 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int15 {
  int: BigNumber;
}
export interface String15 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes15 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic15 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Remove3 {
  action: "remove";
  big_map: BigNumber;
}
export interface Copy3 {
  action: "copy";
  source_big_map: BigNumber;
  destination_big_map: BigNumber;
}
export interface Alloc3 {
  action: "alloc";
  big_map: BigNumber;
  key_type: Int16 | String16 | Bytes16 | Sequence16 | Prim_Generic16;
  value_type: Int17 | String17 | Bytes17 | Sequence17 | Prim_Generic17;
}
export interface Int16 {
  int: BigNumber;
}
export interface String16 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes16 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic16 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int17 {
  int: BigNumber;
}
export interface String17 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes17 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic17 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Delegation {
  kind: "delegation";
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface SetDepositsLimit {
  kind: "set_deposits_limit";
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface SeedNonceRevelation {
  kind: "seed_nonce_revelation";
  level: number;
  nonce: string;
  metadata: {
    balance_updates: _012_Psithaca$OperationMetadata$Alpha$BalanceUpdates;
  };
}
export interface Endorsement {
  kind: "endorsement";
  slot: number;
  level: number;
  round: number;
  block_payload_hash: _012_Psithaca$ContractId;
  metadata: {
    balance_updates: _012_Psithaca$OperationMetadata$Alpha$BalanceUpdates;
    delegate: _012_Psithaca$ContractId;
    endorsement_power: number;
  };
}
export interface Preendorsement {
  kind: "preendorsement";
  slot: number;
  level: number;
  round: number;
  block_payload_hash: _012_Psithaca$ContractId;
  metadata: {
    balance_updates: _012_Psithaca$OperationMetadata$Alpha$BalanceUpdates;
    delegate: _012_Psithaca$ContractId;
    preendorsement_power: number;
  };
}
export interface DoublePreendorsementEvidence {
  kind: "double_preendorsement_evidence";
  op1: _012_Psithaca$Inlined$Preendorsement;
  op2: _012_Psithaca$Inlined$Preendorsement;
  metadata: {
    balance_updates: _012_Psithaca$OperationMetadata$Alpha$BalanceUpdates;
  };
}
/**
 * An operation's shell header.
 */
export interface _012_Psithaca$Inlined$Preendorsement {
  branch: _012_Psithaca$ContractId;
  operations: _012_Psithaca$Inlined$Preendorsement$Contents;
  signature?: _012_Psithaca$ContractId;
}
export interface Preendorsement1 {
  kind: "preendorsement";
  slot: number;
  level: number;
  round: number;
  block_payload_hash: _012_Psithaca$ContractId;
}
export interface DoubleEndorsementEvidence {
  kind: "double_endorsement_evidence";
  op1: _012_Psithaca$Inlined$Endorsement;
  op2: _012_Psithaca$Inlined$Endorsement;
  metadata: {
    balance_updates: _012_Psithaca$OperationMetadata$Alpha$BalanceUpdates;
  };
}
/**
 * An operation's shell header.
 */
export interface _012_Psithaca$Inlined$Endorsement {
  branch: _012_Psithaca$ContractId;
  operations: _012_Psithaca$Inlined$EndorsementMempool$Contents;
  signature?: _012_Psithaca$ContractId;
}
export interface Endorsement1 {
  kind: "endorsement";
  slot: number;
  level: number;
  round: number;
  block_payload_hash: _012_Psithaca$ContractId;
}
export interface DoubleBakingEvidence {
  kind: "double_baking_evidence";
  bh1: ShellHeader1;
  bh2: ShellHeader1;
  metadata: {
    balance_updates: _012_Psithaca$OperationMetadata$Alpha$BalanceUpdates;
  };
}
/**
 * Block header's shell-related content. It contains information such as the block level, its predecessor and timestamp.
 */
export interface ShellHeader1 {
  level: number;
  proto: number;
  predecessor: _012_Psithaca$ContractId;
  timestamp: _012_Psithaca$ContractId;
  validation_pass: number;
  operations_hash: _012_Psithaca$ContractId;
  fitness: BlockFitness;
  context: _012_Psithaca$ContractId;
  payload_hash: _012_Psithaca$ContractId;
  payload_round: number;
  proof_of_work_nonce: string;
  seed_nonce_hash?: _012_Psithaca$ContractId;
  liquidity_baking_escape_vote: boolean;
  signature: _012_Psithaca$ContractId;
}
export interface ActivateAccount {
  kind: "activate_account";
  pkh: _012_Psithaca$ContractId;
  secret: string;
  metadata: {
    balance_updates: _012_Psithaca$OperationMetadata$Alpha$BalanceUpdates;
  };
}
export interface Proposals {
  kind: "proposals";
  source: _012_Psithaca$ContractId;
  period: number;
  proposals: _012_Psithaca$ContractId[];
  metadata: {};
}
export interface Ballot {
  kind: "ballot";
  source: _012_Psithaca$ContractId;
  period: number;
  proposal: _012_Psithaca$ContractId;
  ballot: "nay" | "yay" | "pass";
  metadata: {};
}
export interface Reveal1 {
  kind: "reveal";
  source: _012_Psithaca$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  public_key: _012_Psithaca$ContractId;
  metadata: {
    balance_updates: _012_Psithaca$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _012_Psithaca$Operation$Alpha$OperationResult$Reveal;
    internal_operation_results?: _012_Psithaca$Operation$Alpha$InternalOperationResult[];
  };
}
export interface Applied {
  status: "applied";
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed {
  status: "failed";
  errors: _012_Psithaca$Error[];
}
/**
 * The full list of RPC errors would be too long to include.
 * It is available at RPC `/errors` (GET).
 * Errors specific to protocol Alpha have an id that starts with `proto.alpha`.
 */
export interface _012_Psithaca$Error {
  [k: string]: unknown;
}
export interface Skipped {
  status: "skipped";
}
export interface Backtracked {
  status: "backtracked";
  errors?: _012_Psithaca$Error[];
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface Reveal2 {
  kind: "reveal";
  source: _012_Psithaca$ContractId;
  nonce: number;
  public_key: _012_Psithaca$ContractId;
  result: _012_Psithaca$Operation$Alpha$OperationResult$Reveal;
}
export interface Transaction1 {
  kind: "transaction";
  source: _012_Psithaca$ContractId;
  nonce: number;
  amount: PositiveBigNumber;
  destination: _012_Psithaca$ContractId;
  parameters?: {
    entrypoint: _012_Psithaca$Entrypoint;
    value: Int18 | String18 | Bytes18 | Sequence18 | Prim_Generic18;
  };
  result: _012_Psithaca$Operation$Alpha$OperationResult$Transaction;
}
export interface Int18 {
  int: BigNumber;
}
export interface String18 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes18 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic18 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Applied1 {
  status: "applied";
  storage?: Int19 | String19 | Bytes19 | Sequence19 | Prim_Generic19;
  big_map_diff?: (Update4 | Remove4 | Copy4 | Alloc4)[];
  balance_updates?: _012_Psithaca$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _012_Psithaca$ContractId[];
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  allocated_destination_contract?: boolean;
  lazy_storage_diff?: _012_Psithaca$LazyStorageDiff;
}
export interface Int19 {
  int: BigNumber;
}
export interface String19 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes19 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic19 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Update4 {
  action: "update";
  big_map: BigNumber;
  key_hash: _012_Psithaca$ContractId;
  key: Int20 | String20 | Bytes20 | Sequence20 | Prim_Generic20;
  value?: Int21 | String21 | Bytes21 | Sequence21 | Prim_Generic21;
}
export interface Int20 {
  int: BigNumber;
}
export interface String20 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes20 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic20 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int21 {
  int: BigNumber;
}
export interface String21 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes21 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic21 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Remove4 {
  action: "remove";
  big_map: BigNumber;
}
export interface Copy4 {
  action: "copy";
  source_big_map: BigNumber;
  destination_big_map: BigNumber;
}
export interface Alloc4 {
  action: "alloc";
  big_map: BigNumber;
  key_type: Int22 | String22 | Bytes22 | Sequence22 | Prim_Generic22;
  value_type: Int23 | String23 | Bytes23 | Sequence23 | Prim_Generic23;
}
export interface Int22 {
  int: BigNumber;
}
export interface String22 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes22 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic22 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int23 {
  int: BigNumber;
}
export interface String23 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes23 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic23 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Failed1 {
  status: "failed";
  errors: _012_Psithaca$Error[];
}
export interface Skipped1 {
  status: "skipped";
}
export interface Backtracked1 {
  status: "backtracked";
  errors?: _012_Psithaca$Error[];
  storage?: Int24 | String24 | Bytes24 | Sequence24 | Prim_Generic24;
  big_map_diff?: (Update5 | Remove5 | Copy5 | Alloc5)[];
  balance_updates?: _012_Psithaca$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _012_Psithaca$ContractId[];
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  allocated_destination_contract?: boolean;
  lazy_storage_diff?: _012_Psithaca$LazyStorageDiff;
}
export interface Int24 {
  int: BigNumber;
}
export interface String24 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes24 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic24 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Update5 {
  action: "update";
  big_map: BigNumber;
  key_hash: _012_Psithaca$ContractId;
  key: Int25 | String25 | Bytes25 | Sequence25 | Prim_Generic25;
  value?: Int26 | String26 | Bytes26 | Sequence26 | Prim_Generic26;
}
export interface Int25 {
  int: BigNumber;
}
export interface String25 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes25 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic25 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int26 {
  int: BigNumber;
}
export interface String26 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes26 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic26 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Remove5 {
  action: "remove";
  big_map: BigNumber;
}
export interface Copy5 {
  action: "copy";
  source_big_map: BigNumber;
  destination_big_map: BigNumber;
}
export interface Alloc5 {
  action: "alloc";
  big_map: BigNumber;
  key_type: Int27 | String27 | Bytes27 | Sequence27 | Prim_Generic27;
  value_type: Int28 | String28 | Bytes28 | Sequence28 | Prim_Generic28;
}
export interface Int27 {
  int: BigNumber;
}
export interface String27 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes27 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic27 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int28 {
  int: BigNumber;
}
export interface String28 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes28 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic28 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Origination1 {
  kind: "origination";
  source: _012_Psithaca$ContractId;
  nonce: number;
  balance: PositiveBigNumber;
  delegate?: _012_Psithaca$ContractId;
  script: _012_Psithaca$Scripted$Contracts;
  result: _012_Psithaca$Operation$Alpha$OperationResult$Origination;
}
export interface _012_Psithaca$Scripted$Contracts {
  code: Int29 | String29 | Bytes29 | Sequence29 | Prim_Generic29;
  storage: Int30 | String30 | Bytes30 | Sequence30 | Prim_Generic30;
}
export interface Int29 {
  int: BigNumber;
}
export interface String29 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes29 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic29 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int30 {
  int: BigNumber;
}
export interface String30 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes30 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic30 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Applied2 {
  status: "applied";
  big_map_diff?: (Update6 | Remove6 | Copy6 | Alloc6)[];
  balance_updates?: _012_Psithaca$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _012_Psithaca$ContractId[];
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  lazy_storage_diff?: _012_Psithaca$LazyStorageDiff;
}
export interface Update6 {
  action: "update";
  big_map: BigNumber;
  key_hash: _012_Psithaca$ContractId;
  key: Int31 | String31 | Bytes31 | Sequence31 | Prim_Generic31;
  value?: Int32 | String32 | Bytes32 | Sequence32 | Prim_Generic32;
}
export interface Int31 {
  int: BigNumber;
}
export interface String31 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes31 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic31 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int32 {
  int: BigNumber;
}
export interface String32 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes32 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic32 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Remove6 {
  action: "remove";
  big_map: BigNumber;
}
export interface Copy6 {
  action: "copy";
  source_big_map: BigNumber;
  destination_big_map: BigNumber;
}
export interface Alloc6 {
  action: "alloc";
  big_map: BigNumber;
  key_type: Int33 | String33 | Bytes33 | Sequence33 | Prim_Generic33;
  value_type: Int34 | String34 | Bytes34 | Sequence34 | Prim_Generic34;
}
export interface Int33 {
  int: BigNumber;
}
export interface String33 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes33 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic33 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int34 {
  int: BigNumber;
}
export interface String34 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes34 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic34 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Failed2 {
  status: "failed";
  errors: _012_Psithaca$Error[];
}
export interface Skipped2 {
  status: "skipped";
}
export interface Backtracked2 {
  status: "backtracked";
  errors?: _012_Psithaca$Error[];
  big_map_diff?: (Update7 | Remove7 | Copy7 | Alloc7)[];
  balance_updates?: _012_Psithaca$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _012_Psithaca$ContractId[];
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  lazy_storage_diff?: _012_Psithaca$LazyStorageDiff;
}
export interface Update7 {
  action: "update";
  big_map: BigNumber;
  key_hash: _012_Psithaca$ContractId;
  key: Int35 | String35 | Bytes35 | Sequence35 | Prim_Generic35;
  value?: Int36 | String36 | Bytes36 | Sequence36 | Prim_Generic36;
}
export interface Int35 {
  int: BigNumber;
}
export interface String35 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes35 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic35 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int36 {
  int: BigNumber;
}
export interface String36 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes36 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic36 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Remove7 {
  action: "remove";
  big_map: BigNumber;
}
export interface Copy7 {
  action: "copy";
  source_big_map: BigNumber;
  destination_big_map: BigNumber;
}
export interface Alloc7 {
  action: "alloc";
  big_map: BigNumber;
  key_type: Int37 | String37 | Bytes37 | Sequence37 | Prim_Generic37;
  value_type: Int38 | String38 | Bytes38 | Sequence38 | Prim_Generic38;
}
export interface Int37 {
  int: BigNumber;
}
export interface String37 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes37 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic37 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Int38 {
  int: BigNumber;
}
export interface String38 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes38 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic38 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Delegation1 {
  kind: "delegation";
  source: _012_Psithaca$ContractId;
  nonce: number;
  delegate?: _012_Psithaca$ContractId;
  result: _012_Psithaca$Operation$Alpha$OperationResult$Delegation;
}
export interface Applied3 {
  status: "applied";
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed3 {
  status: "failed";
  errors: _012_Psithaca$Error[];
}
export interface Skipped3 {
  status: "skipped";
}
export interface Backtracked3 {
  status: "backtracked";
  errors?: _012_Psithaca$Error[];
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface RegisterGlobalConstant {
  kind: "register_global_constant";
  source: _012_Psithaca$ContractId;
  nonce: number;
  value: Int39 | String39 | Bytes39 | Sequence39 | Prim_Generic39;
  result: _012_Psithaca$Operation$Alpha$OperationResult$RegisterGlobalConstant;
}
export interface Int39 {
  int: BigNumber;
}
export interface String39 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes39 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic39 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Applied4 {
  status: "applied";
  balance_updates: _012_Psithaca$OperationMetadata$Alpha$BalanceUpdates;
  consumed_gas: PositiveBigNumber;
  storage_size: BigNumber;
  global_address: _012_Psithaca$ContractId;
}
export interface Failed4 {
  status: "failed";
  errors: _012_Psithaca$Error[];
}
export interface Skipped4 {
  status: "skipped";
}
export interface Backtracked4 {
  status: "backtracked";
  errors?: _012_Psithaca$Error[];
  balance_updates: _012_Psithaca$OperationMetadata$Alpha$BalanceUpdates;
  consumed_gas: PositiveBigNumber;
  storage_size: BigNumber;
  global_address: _012_Psithaca$ContractId;
}
export interface SetDepositsLimit1 {
  kind: "set_deposits_limit";
  source: _012_Psithaca$ContractId;
  nonce: number;
  limit?: PositiveBigNumber;
  result: _012_Psithaca$Operation$Alpha$OperationResult$SetDepositsLimit;
}
export interface Applied5 {
  status: "applied";
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed5 {
  status: "failed";
  errors: _012_Psithaca$Error[];
}
export interface Skipped5 {
  status: "skipped";
}
export interface Backtracked5 {
  status: "backtracked";
  errors?: _012_Psithaca$Error[];
  consumed_gas?: PositiveBigNumber;
  consumed_milligas?: PositiveBigNumber;
}
export interface Transaction2 {
  kind: "transaction";
  source: _012_Psithaca$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  amount: PositiveBigNumber;
  destination: _012_Psithaca$ContractId;
  parameters?: {
    entrypoint: _012_Psithaca$Entrypoint;
    value: Int40 | String40 | Bytes40 | Sequence40 | Prim_Generic40;
  };
  metadata: {
    balance_updates: _012_Psithaca$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _012_Psithaca$Operation$Alpha$OperationResult$Transaction;
    internal_operation_results?: _012_Psithaca$Operation$Alpha$InternalOperationResult[];
  };
}
export interface Int40 {
  int: BigNumber;
}
export interface String40 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes40 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic40 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Origination2 {
  kind: "origination";
  source: _012_Psithaca$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  balance: PositiveBigNumber;
  delegate?: _012_Psithaca$ContractId;
  script: _012_Psithaca$Scripted$Contracts;
  metadata: {
    balance_updates: _012_Psithaca$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _012_Psithaca$Operation$Alpha$OperationResult$Origination;
    internal_operation_results?: _012_Psithaca$Operation$Alpha$InternalOperationResult[];
  };
}
export interface Delegation2 {
  kind: "delegation";
  source: _012_Psithaca$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  delegate?: _012_Psithaca$ContractId;
  metadata: {
    balance_updates: _012_Psithaca$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _012_Psithaca$Operation$Alpha$OperationResult$Delegation;
    internal_operation_results?: _012_Psithaca$Operation$Alpha$InternalOperationResult[];
  };
}
export interface RegisterGlobalConstant1 {
  kind: "register_global_constant";
  source: _012_Psithaca$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  value: Int41 | String41 | Bytes41 | Sequence41 | Prim_Generic41;
  metadata: {
    balance_updates: _012_Psithaca$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _012_Psithaca$Operation$Alpha$OperationResult$RegisterGlobalConstant;
    internal_operation_results?: _012_Psithaca$Operation$Alpha$InternalOperationResult[];
  };
}
export interface Int41 {
  int: BigNumber;
}
export interface String41 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes41 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic41 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface SetDepositsLimit2 {
  kind: "set_deposits_limit";
  source: _012_Psithaca$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  limit?: PositiveBigNumber;
  metadata: {
    balance_updates: _012_Psithaca$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _012_Psithaca$Operation$Alpha$OperationResult$SetDepositsLimit;
    internal_operation_results?: _012_Psithaca$Operation$Alpha$InternalOperationResult[];
  };
}
export interface Endorsement2 {
  kind: "endorsement";
  slot: number;
  level: number;
  round: number;
  block_payload_hash: _012_Psithaca$ContractId;
}
export interface Preendorsement2 {
  kind: "preendorsement";
  slot: number;
  level: number;
  round: number;
  block_payload_hash: _012_Psithaca$ContractId;
}
export interface SeedNonceRevelation1 {
  kind: "seed_nonce_revelation";
  level: number;
  nonce: string;
}
export interface DoubleEndorsementEvidence1 {
  kind: "double_endorsement_evidence";
  op1: _012_Psithaca$Inlined$Endorsement;
  op2: _012_Psithaca$Inlined$Endorsement;
}
export interface DoublePreendorsementEvidence1 {
  kind: "double_preendorsement_evidence";
  op1: _012_Psithaca$Inlined$Preendorsement;
  op2: _012_Psithaca$Inlined$Preendorsement;
}
export interface DoubleBakingEvidence1 {
  kind: "double_baking_evidence";
  bh1: ShellHeader1;
  bh2: ShellHeader1;
}
export interface ActivateAccount1 {
  kind: "activate_account";
  pkh: _012_Psithaca$ContractId;
  secret: string;
}
export interface Proposals1 {
  kind: "proposals";
  source: _012_Psithaca$ContractId;
  period: number;
  proposals: _012_Psithaca$ContractId[];
}
export interface Ballot1 {
  kind: "ballot";
  source: _012_Psithaca$ContractId;
  period: number;
  proposal: _012_Psithaca$ContractId;
  ballot: "nay" | "yay" | "pass";
}
export interface Reveal3 {
  kind: "reveal";
  source: _012_Psithaca$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  public_key: _012_Psithaca$ContractId;
}
export interface Transaction3 {
  kind: "transaction";
  source: _012_Psithaca$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  amount: PositiveBigNumber;
  destination: _012_Psithaca$ContractId;
  parameters?: {
    entrypoint: _012_Psithaca$Entrypoint;
    value: Int42 | String42 | Bytes42 | Sequence42 | Prim_Generic42;
  };
}
export interface Int42 {
  int: BigNumber;
}
export interface String42 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes42 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic42 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
export interface Origination3 {
  kind: "origination";
  source: _012_Psithaca$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  balance: PositiveBigNumber;
  delegate?: _012_Psithaca$ContractId;
  script: _012_Psithaca$Scripted$Contracts;
}
export interface Delegation3 {
  kind: "delegation";
  source: _012_Psithaca$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  delegate?: _012_Psithaca$ContractId;
}
export interface SetDepositsLimit3 {
  kind: "set_deposits_limit";
  source: _012_Psithaca$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  limit?: PositiveBigNumber;
}
export interface FailingNoop {
  kind: "failing_noop";
  arbitrary: _012_Psithaca$ContractId;
}
export interface RegisterGlobalConstant2 {
  kind: "register_global_constant";
  source: _012_Psithaca$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  value: Int43 | String43 | Bytes43 | Sequence43 | Prim_Generic43;
}
export interface Int43 {
  int: BigNumber;
}
export interface String43 {
  string: _012_Psithaca$ContractId;
}
export interface Bytes43 {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic43 {
  prim: _012_Psithaca$Michelson$V1$Primitives;
  args?: Micheline$012_Psithaca$MichelsonV1$Expression[];
  annots?: string[];
}
