/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type _014_PtKathma$ContractId = string;
/**
 * The fitness, or score, of a block, that allow the Tezos to decide which chain is the best. A fitness value is a list of byte sequences. They are compared as follows: shortest lists are smaller; lists of the same length are compared according to the lexicographical order.
 */
export type BlockFitness = string[];
export type _014_PtKathma$LiquidityBakingToggleVote = "off" | "on" | "pass";
export type TestChainStatus = NotRunning | Forking | Running;
export type Proposal = "proposal";
export type Exploration = "exploration";
export type Cooldown = "cooldown";
export type Promotion = "promotion";
export type Adoption = "adoption";
export type None = null;
/**
 * Decimal representation of 64 bit integers
 */
export type BitIntegers = string;
export type BlockApplication = "block";
export type ProtocolMigration = "migration";
export type Subsidy = "subsidy";
export type Simulation = "simulation";
export type BlockApplication1 = "block";
export type ProtocolMigration1 = "migration";
export type Subsidy1 = "subsidy";
export type Simulation1 = "simulation";
export type BlockApplication2 = "block";
export type ProtocolMigration2 = "migration";
export type Subsidy2 = "subsidy";
export type Simulation2 = "simulation";
export type BlockApplication3 = "block";
export type ProtocolMigration3 = "migration";
export type Subsidy3 = "subsidy";
export type Simulation3 = "simulation";
export type BlockApplication4 = "block";
export type ProtocolMigration4 = "migration";
export type Subsidy4 = "subsidy";
export type Simulation4 = "simulation";
export type BlockApplication5 = "block";
export type ProtocolMigration5 = "migration";
export type Subsidy5 = "subsidy";
export type Simulation5 = "simulation";
export type BlockApplication6 = "block";
export type ProtocolMigration6 = "migration";
export type Subsidy6 = "subsidy";
export type Simulation6 = "simulation";
export type BlockApplication7 = "block";
export type ProtocolMigration7 = "migration";
export type Subsidy7 = "subsidy";
export type Simulation7 = "simulation";
export type BlockApplication8 = "block";
export type ProtocolMigration8 = "migration";
export type Subsidy8 = "subsidy";
export type Simulation8 = "simulation";
export type BlockApplication9 = "block";
export type ProtocolMigration9 = "migration";
export type Subsidy9 = "subsidy";
export type Simulation9 = "simulation";
export type BlockApplication10 = "block";
export type ProtocolMigration10 = "migration";
export type Subsidy10 = "subsidy";
export type Simulation10 = "simulation";
export type BlockApplication11 = "block";
export type ProtocolMigration11 = "migration";
export type Subsidy11 = "subsidy";
export type Simulation11 = "simulation";
export type BlockApplication12 = "block";
export type ProtocolMigration12 = "migration";
export type Subsidy12 = "subsidy";
export type Simulation12 = "simulation";
export type BlockApplication13 = "block";
export type ProtocolMigration13 = "migration";
export type Subsidy13 = "subsidy";
export type Simulation13 = "simulation";
export type BlockApplication14 = "block";
export type ProtocolMigration14 = "migration";
export type Subsidy14 = "subsidy";
export type Simulation14 = "simulation";
export type BlockApplication15 = "block";
export type ProtocolMigration15 = "migration";
export type Subsidy15 = "subsidy";
export type Simulation15 = "simulation";
export type BlockApplication16 = "block";
export type ProtocolMigration16 = "migration";
export type Subsidy16 = "subsidy";
export type Simulation16 = "simulation";
export type BlockApplication17 = "block";
export type ProtocolMigration17 = "migration";
export type Subsidy17 = "subsidy";
export type Simulation17 = "simulation";
export type _014_PtKathma$BondId = TxRollupBondId | ScRollupBondId;
export type BlockApplication18 = "block";
export type ProtocolMigration18 = "migration";
export type Subsidy18 = "subsidy";
export type Simulation18 = "simulation";
export type BlockApplication19 = "block";
export type ProtocolMigration19 = "migration";
export type Subsidy19 = "subsidy";
export type Simulation19 = "simulation";
export type BlockApplication20 = "block";
export type ProtocolMigration20 = "migration";
export type Subsidy20 = "subsidy";
export type Simulation20 = "simulation";
export type BlockApplication21 = "block";
export type ProtocolMigration21 = "migration";
export type Subsidy21 = "subsidy";
export type Simulation21 = "simulation";
export type _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates = (
  | Contract
  | BlockFees
  | Deposits
  | NonceRevelationRewards
  | DoubleSigningEvidenceRewards
  | EndorsingRewards
  | BakingRewards
  | BakingBonuses
  | StorageFees
  | DoubleSigningPunishments
  | LostEndorsingRewards
  | LiquidityBakingSubsidies
  | Burned
  | Commitments
  | Bootstrap
  | Invoice
  | InitialCommitments
  | Minted
  | FrozenBonds
  | TxRollupRejectionRewards
  | TxRollupRejectionPunishments
  | ScRollupRefutationPunishments
)[];
export type _014_PtKathma$Operation$Alpha$SuccessfulManagerOperationResult =
  | Reveal
  | (ToContract | ToTxRollup | ToScRollup)
  | Origination
  | Delegation
  | SetDepositsLimit
  | IncreasePaidStorage
  | ScRollupOriginate;
/**
 * Decimal representation of a positive big number
 */
export type PositiveBigNumber = string;
export type Micheline$014_PtKathma$MichelsonV1$Expression =
  | Int
  | String
  | Bytes
  | Sequence
  | Prim_Generic;
/**
 * Decimal representation of a big number
 */
export type BigNumber = string;
export type Sequence = Micheline$014_PtKathma$MichelsonV1$Expression[];
export type _014_PtKathma$Michelson$V1$Primitives =
  | "ABS"
  | "IF"
  | "SOURCE"
  | "DUG"
  | "False"
  | "DIG"
  | "SAPLING_VERIFY_UPDATE"
  | "bls12_381_g1"
  | "BLAKE2B"
  | "key_hash"
  | "sapling_transaction_deprecated"
  | "Pair"
  | "INT"
  | "map"
  | "sapling_transaction"
  | "storage"
  | "RIGHT"
  | "view"
  | "SHA256"
  | "AND"
  | "VIEW"
  | "signature"
  | "NIL"
  | "lambda"
  | "STEPS_TO_QUOTA"
  | "RENAME"
  | "CHECK_SIGNATURE"
  | "NEVER"
  | "timestamp"
  | "MAP"
  | "big_map"
  | "chain_id"
  | "ADD"
  | "IMPLICIT_ACCOUNT"
  | "SHA512"
  | "bool"
  | "LSL"
  | "chest"
  | "never"
  | "sapling_state"
  | "operation"
  | "COMPARE"
  | "SUB_MUTEZ"
  | "SLICE"
  | "DROP"
  | "option"
  | "BALANCE"
  | "CONCAT"
  | "ticket"
  | "MUL"
  | "FAILWITH"
  | "Elt"
  | "key"
  | "MIN_BLOCK_TIME"
  | "DIP"
  | "MEM"
  | "XOR"
  | "int"
  | "UPDATE"
  | "Some"
  | "parameter"
  | "unit"
  | "EMPTY_MAP"
  | "None"
  | "SWAP"
  | "nat"
  | "AMOUNT"
  | "pair"
  | "KECCAK"
  | "set"
  | "CHAIN_ID"
  | "HASH_KEY"
  | "IF_LEFT"
  | "CREATE_ACCOUNT"
  | "LT"
  | "VOTING_POWER"
  | "UNPACK"
  | "TICKET"
  | "SELF"
  | "bytes"
  | "TRANSFER_TOKENS"
  | "LE"
  | "SOME"
  | "CREATE_CONTRACT"
  | "Unit"
  | "SAPLING_EMPTY_STATE"
  | "NONE"
  | "ADDRESS"
  | "GE"
  | "SIZE"
  | "contract"
  | "SENDER"
  | "or"
  | "CAR"
  | "NOT"
  | "mutez"
  | "CDR"
  | "ITER"
  | "SHA3"
  | "PUSH"
  | "LEFT"
  | "ISNAT"
  | "True"
  | "Right"
  | "PACK"
  | "IF_CONS"
  | "TOTAL_VOTING_POWER"
  | "bls12_381_g2"
  | "SET_DELEGATE"
  | "EMPTY_SET"
  | "NEQ"
  | "LAMBDA"
  | "string"
  | "PAIRING_CHECK"
  | "LOOP"
  | "Left"
  | "EMIT"
  | "constant"
  | "LSR"
  | "EMPTY_BIG_MAP"
  | "address"
  | "SPLIT_TICKET"
  | "LEVEL"
  | "PAIR"
  | "READ_TICKET"
  | "list"
  | "UNPAIR"
  | "GT"
  | "bls12_381_fr"
  | "tx_rollup_l2_address"
  | "NOW"
  | "IF_NONE"
  | "OR"
  | "GET_AND_UPDATE"
  | "UNIT"
  | "CONTRACT"
  | "CAST"
  | "JOIN_TICKETS"
  | "EDIV"
  | "EQ"
  | "LOOP_LEFT"
  | "chest_key"
  | "OPEN_CHEST"
  | "EXEC"
  | "GET"
  | "NEG"
  | "SELF_ADDRESS"
  | "DUP"
  | "CONS"
  | "SUB"
  | "APPLY"
  | "code";
export type Sapling$Transaction$Commitment = string;
export type Sapling$Transaction$CommitmentValue = string;
export type Sapling$DH$Epk = string;
export type Sapling$Transaction$Nullifier = string;
export type _014_PtKathma$LazyStorageDiff = (BigMap | SaplingState)[];
export type Operation =
  | {
      protocol: "PtKathmankSpLLDALzWw7CGD2j2MtyveTwboEYokqUCP4a1LxMg";
      chain_id: _014_PtKathma$ContractId;
      hash: _014_PtKathma$ContractId;
      branch: _014_PtKathma$ContractId;
      contents: _014_PtKathma$Operation$Alpha$Contents[];
      signature: _014_PtKathma$ContractId;
      metadata: "too large";
    }
  | {
      protocol: "PtKathmankSpLLDALzWw7CGD2j2MtyveTwboEYokqUCP4a1LxMg";
      chain_id: _014_PtKathma$ContractId;
      hash: _014_PtKathma$ContractId;
      branch: _014_PtKathma$ContractId;
      contents: _014_PtKathma$Operation$Alpha$Contents[];
      signature: _014_PtKathma$ContractId;
    }
  | {
      protocol: "PtKathmankSpLLDALzWw7CGD2j2MtyveTwboEYokqUCP4a1LxMg";
      chain_id: _014_PtKathma$ContractId;
      hash: _014_PtKathma$ContractId;
      branch: _014_PtKathma$ContractId;
      contents: _014_PtKathma$Operation$Alpha$OperationContentsAndResult[];
      signature?: _014_PtKathma$ContractId;
    }
  | {
      protocol: "PtKathmankSpLLDALzWw7CGD2j2MtyveTwboEYokqUCP4a1LxMg";
      chain_id: _014_PtKathma$ContractId;
      hash: _014_PtKathma$ContractId;
      branch: _014_PtKathma$ContractId;
      contents: _014_PtKathma$Operation$Alpha$Contents[];
      signature?: _014_PtKathma$ContractId;
    };
export type _014_PtKathma$Operation$Alpha$Contents =
  | Endorsement
  | Preendorsement
  | DalSlotAvailability
  | SeedNonceRevelation
  | VdfRevelation
  | DoubleEndorsementEvidence
  | DoublePreendorsementEvidence
  | DoubleBakingEvidence
  | ActivateAccount
  | Proposals
  | Ballot
  | Reveal1
  | Transaction
  | Origination1
  | Delegation1
  | SetDepositsLimit1
  | IncreasePaidStorage1
  | FailingNoop
  | RegisterGlobalConstant
  | TxRollupOrigination
  | TxRollupSubmitBatch
  | TxRollupCommit
  | TxRollupReturnBond
  | TxRollupFinalizeCommitment
  | TxRollupRemoveCommitment
  | TxRollupRejection
  | TxRollupDispatchTickets
  | TransferTicket
  | DalPublishSlotHeader
  | ScRollupOriginate1
  | ScRollupAddMessages
  | ScRollupCement
  | ScRollupPublish
  | ScRollupRefute
  | ScRollupTimeout
  | ScRollupExecuteOutboxMessage
  | ScRollupRecoverBond
  | ScRollupDalSlotSubscribe;
export type _014_PtKathma$Inlined$EndorsementMempool$Contents = Endorsement1;
export type _014_PtKathma$Inlined$Preendorsement$Contents = Preendorsement1;
export type _014_PtKathma$Entrypoint =
  | Default
  | Root
  | Do
  | SetDelegate
  | RemoveDelegate
  | Named;
export type Default = "default";
export type Root = "root";
export type Do = "do";
export type SetDelegate = "set_delegate";
export type RemoveDelegate = "remove_delegate";
export type Named = string;
export type None1 = null;
export type None2 = null;
export type None3 = null;
export type ShortBytes = string;
export type MediumBytes = string;
export type UnlimitedBytes = string;
export type None4 = null;
export type Dissection =
  | []
  | [_014_PtKathma$ContractId | None4]
  | [_014_PtKathma$ContractId | None4, PositiveBigNumber][];
export type TreeEncoding =
  | Value6
  | BlindedValue
  | Node6
  | BlindedNode
  | Inode1
  | Extender
  | None6;
export type InodeTree =
  | BlindedInode
  | InodeValues
  | InodeTree1
  | InodeExtender1
  | None5;
export type None7 = null;
export type FirstAfter = [] | [number] | [number, PositiveBigNumber];
export type None8 = null;
export type FirstAfter1 = [] | [number] | [number, PositiveBigNumber];
export type None9 = null;
export type _014_PtKathma$Operation$Alpha$OperationContentsAndResult =
  | SeedNonceRevelation1
  | VdfRevelation1
  | Endorsement2
  | Preendorsement2
  | DalSlotAvailability1
  | DoublePreendorsementEvidence1
  | DoubleEndorsementEvidence1
  | DoubleBakingEvidence1
  | ActivateAccount1
  | Proposals1
  | Ballot1
  | Reveal2
  | Transaction2
  | Origination3
  | Delegation3
  | RegisterGlobalConstant1
  | SetDepositsLimit2
  | IncreasePaidStorage2
  | TxRollupOrigination1
  | TxRollupSubmitBatch1
  | TxRollupCommit1
  | TxRollupReturnBond1
  | TxRollupFinalizeCommitment1
  | TxRollupRemoveCommitment1
  | TxRollupRejection1
  | TransferTicket1
  | DalPublishSlotHeader1
  | TxRollupDispatchTickets1
  | ScRollupOriginate2
  | ScRollupAddMessages1
  | ScRollupCement1
  | ScRollupPublish1
  | ScRollupRefute1
  | ScRollupTimeout1
  | ScRollupExecuteOutboxMessage1
  | ScRollupRecoverBond1
  | ScRollupDalSlotSubscribe1;
export type _014_PtKathma$Operation$Alpha$OperationResult$Reveal =
  | Applied
  | Failed
  | Skipped
  | Backtracked;
export type _014_PtKathma$ApplyInternalResults$Alpha$OperationResult =
  | Transaction1
  | Origination2
  | Delegation2
  | Event;
export type _014_PtKathma$Operation$Alpha$InternalOperationResult$Transaction =
  | (ToContract1 | ToTxRollup1 | ToScRollup1)
  | Failed1
  | Skipped1
  | (ToContract2 | ToTxRollup2 | ToScRollup2);
export type _014_PtKathma$Operation$Alpha$InternalOperationResult$Origination =
  | Applied1
  | Failed2
  | Skipped2
  | Backtracked1;
export type _014_PtKathma$Operation$Alpha$InternalOperationResult$Delegation =
  | Applied2
  | Failed3
  | Skipped3
  | Backtracked2;
export type _014_PtKathma$Operation$Alpha$InternalOperationResult$Event =
  | Applied3
  | Failed4
  | Skipped4
  | Backtracked3;
export type _014_PtKathma$Operation$Alpha$OperationResult$Transaction =
  | (ToContract3 | ToTxRollup3 | ToScRollup3)
  | Failed5
  | Skipped5
  | (ToContract4 | ToTxRollup4 | ToScRollup4);
export type _014_PtKathma$Operation$Alpha$OperationResult$Origination =
  | Applied4
  | Failed6
  | Skipped6
  | Backtracked4;
export type _014_PtKathma$Operation$Alpha$OperationResult$Delegation =
  | Applied5
  | Failed7
  | Skipped7
  | Backtracked5;
export type _014_PtKathma$Operation$Alpha$OperationResult$RegisterGlobalConstant =
  Applied6 | Failed8 | Skipped8 | Backtracked6;
export type _014_PtKathma$Operation$Alpha$OperationResult$SetDepositsLimit =
  | Applied7
  | Failed9
  | Skipped9
  | Backtracked7;
export type _014_PtKathma$Operation$Alpha$OperationResult$IncreasePaidStorage =
  | Applied8
  | Failed10
  | Skipped10
  | Backtracked8;
export type _014_PtKathma$Operation$Alpha$OperationResult$TxRollupOrigination =
  | Applied9
  | Failed11
  | Skipped11
  | Backtracked9;
export type _014_PtKathma$Operation$Alpha$OperationResult$TxRollupSubmitBatch =
  | Applied10
  | Failed12
  | Skipped12
  | Backtracked10;
export type None10 = null;
export type _014_PtKathma$Operation$Alpha$OperationResult$TxRollupCommit =
  | Applied11
  | Failed13
  | Skipped13
  | Backtracked11;
export type _014_PtKathma$Operation$Alpha$OperationResult$TxRollupReturnBond =
  | Applied12
  | Failed14
  | Skipped14
  | Backtracked12;
export type _014_PtKathma$Operation$Alpha$OperationResult$TxRollupFinalizeCommitment =
  Applied13 | Failed15 | Skipped15 | Backtracked13;
export type _014_PtKathma$Operation$Alpha$OperationResult$TxRollupRemoveCommitment =
  Applied14 | Failed16 | Skipped16 | Backtracked14;
export type None11 = null;
export type None12 = null;
export type ShortBytes1 = string;
export type MediumBytes1 = string;
export type UnlimitedBytes1 = string;
export type _014_PtKathma$Operation$Alpha$OperationResult$TxRollupRejection =
  | Applied15
  | Failed17
  | Skipped17
  | Backtracked15;
export type _014_PtKathma$Operation$Alpha$OperationResult$TransferTicket =
  | Applied16
  | Failed18
  | Skipped18
  | Backtracked16;
export type _014_PtKathma$Operation$Alpha$OperationResult$DalPublishSlotHeader =
  Applied17 | Failed19 | Skipped19 | Backtracked17;
export type _014_PtKathma$Operation$Alpha$OperationResult$TxRollupDispatchTickets =
  Applied18 | Failed20 | Skipped20 | Backtracked18;
export type _014_PtKathma$Operation$Alpha$OperationResult$ScRollupOriginate =
  | Applied19
  | Failed21
  | Skipped21
  | Backtracked19;
export type _014_PtKathma$Operation$Alpha$OperationResult$ScRollupAddMessages =
  | Applied20
  | Failed22
  | Skipped22
  | Backtracked20;
export type _014_PtKathma$Operation$Alpha$OperationResult$ScRollupCement =
  | Applied21
  | Failed23
  | Skipped23
  | Backtracked21;
export type _014_PtKathma$Operation$Alpha$OperationResult$ScRollupPublish =
  | Applied22
  | Failed24
  | Skipped24
  | Backtracked22;
export type None13 = null;
export type Dissection1 =
  | []
  | [_014_PtKathma$ContractId | None13]
  | [_014_PtKathma$ContractId | None13, PositiveBigNumber][];
export type None14 = null;
export type FirstAfter2 = [] | [number] | [number, PositiveBigNumber];
export type None15 = null;
export type FirstAfter3 = [] | [number] | [number, PositiveBigNumber];
export type None16 = null;
export type _014_PtKathma$Operation$Alpha$OperationResult$ScRollupRefute =
  | Applied23
  | Failed25
  | Skipped25
  | Backtracked23;
export type Ended =
  | []
  | [ConflictResolved | _014_PtKathma$ContractId | Timeout]
  | [
      ConflictResolved | _014_PtKathma$ContractId | Timeout,
      _014_PtKathma$ContractId
    ];
export type Ended1 =
  | []
  | [ConflictResolved1 | _014_PtKathma$ContractId | Timeout1]
  | [
      ConflictResolved1 | _014_PtKathma$ContractId | Timeout1,
      _014_PtKathma$ContractId
    ];
export type _014_PtKathma$Operation$Alpha$OperationResult$ScRollupTimeout =
  | Applied24
  | Failed26
  | Skipped26
  | Backtracked24;
export type Ended2 =
  | []
  | [ConflictResolved2 | _014_PtKathma$ContractId | Timeout2]
  | [
      ConflictResolved2 | _014_PtKathma$ContractId | Timeout2,
      _014_PtKathma$ContractId
    ];
export type Ended3 =
  | []
  | [ConflictResolved3 | _014_PtKathma$ContractId | Timeout3]
  | [
      ConflictResolved3 | _014_PtKathma$ContractId | Timeout3,
      _014_PtKathma$ContractId
    ];
export type _014_PtKathma$Operation$Alpha$OperationResult$ScRollupExecuteOutboxMessage =
  Applied25 | Failed27 | Skipped27 | Backtracked25;
export type _014_PtKathma$Operation$Alpha$OperationResult$ScRollupRecoverBond =
  | Applied26
  | Failed28
  | Skipped28
  | Backtracked26;
export type _014_PtKathma$Operation$Alpha$OperationResult$ScRollupDalSlotSubscribe =
  Applied27 | Failed29 | Skipped29 | Backtracked27;

export interface Block {
  protocol: "PtKathmankSpLLDALzWw7CGD2j2MtyveTwboEYokqUCP4a1LxMg";
  chain_id: _014_PtKathma$ContractId;
  hash: _014_PtKathma$ContractId;
  header: ShellHeader;
  metadata?: BlockHeaderMetadata;
  operations: Operation[][];
}
/**
 * Block header's shell-related content. It contains information such as the block level, its predecessor and timestamp.
 */
export interface ShellHeader {
  level: number;
  proto: number;
  predecessor: _014_PtKathma$ContractId;
  timestamp: _014_PtKathma$ContractId;
  validation_pass: number;
  operations_hash: _014_PtKathma$ContractId;
  fitness: BlockFitness;
  context: _014_PtKathma$ContractId;
  payload_hash: _014_PtKathma$ContractId;
  payload_round: number;
  proof_of_work_nonce: string;
  seed_nonce_hash?: _014_PtKathma$ContractId;
  liquidity_baking_toggle_vote: _014_PtKathma$LiquidityBakingToggleVote;
  signature: _014_PtKathma$ContractId;
}
export interface BlockHeaderMetadata {
  protocol: "PtKathmankSpLLDALzWw7CGD2j2MtyveTwboEYokqUCP4a1LxMg";
  next_protocol: "PtKathmankSpLLDALzWw7CGD2j2MtyveTwboEYokqUCP4a1LxMg";
  test_chain_status: TestChainStatus;
  max_operations_ttl: number;
  max_operation_data_length: number;
  max_block_header_length: number;
  max_operation_list_length: {
    max_size: number;
    max_op?: number;
  }[];
  proposer: _014_PtKathma$ContractId;
  baker: _014_PtKathma$ContractId;
  level_info: {
    /**
     * The level of the block relative to genesis. This is also the Shell's notion of level.
     */
    level: number;
    /**
     * The level of the block relative to the successor of the genesis block. More precisely, it is the position of the block relative to the block that starts the "Alpha family" of protocols, which includes all protocols except Genesis (that is, from 001 onwards).
     */
    level_position: number;
    /**
     * The current cycle's number. Note that cycles are a protocol-specific notion. As a result, the cycle number starts at 0 with the first block of the Alpha family of protocols.
     */
    cycle: number;
    /**
     * The current level of the block relative to the first block of the current cycle.
     */
    cycle_position: number;
    /**
     * Tells whether the baker of this block has to commit a seed nonce hash.
     */
    expected_commitment: boolean;
  };
  voting_period_info: {
    /**
     * The voting period to which the block belongs.
     */
    voting_period: {
      /**
       * The voting period's index. Starts at 0 with the first block of the Alpha family of protocols.
       */
      index: number;
      kind: Proposal | Exploration | Cooldown | Promotion | Adoption;
      /**
       * The relative position of the first level of the period with respect to the first level of the Alpha family of protocols.
       */
      start_position: number;
    };
    /**
     * The position of the block within the voting period.
     */
    position: number;
    /**
     * The number of blocks remaining till the end of the voting period.
     */
    remaining: number;
  };
  nonce_hash: _014_PtKathma$ContractId | None;
  deactivated: _014_PtKathma$ContractId[];
  balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  liquidity_baking_toggle_ema: number;
  implicit_operations_results: _014_PtKathma$Operation$Alpha$SuccessfulManagerOperationResult[];
  consumed_milligas: PositiveBigNumber;
  dal_slot_availability?: BigNumber;
}
export interface NotRunning {
  status: "not_running";
}
export interface Forking {
  status: "forking";
  protocol: _014_PtKathma$ContractId;
  expiration: _014_PtKathma$ContractId;
}
export interface Running {
  status: "running";
  chain_id: _014_PtKathma$ContractId;
  genesis: _014_PtKathma$ContractId;
  protocol: _014_PtKathma$ContractId;
  expiration: _014_PtKathma$ContractId;
}
export interface Contract {
  kind: "contract";
  contract: _014_PtKathma$ContractId;
  change: BitIntegers;
  origin: BlockApplication | ProtocolMigration | Subsidy | Simulation;
}
export interface BlockFees {
  kind: "accumulator";
  category: "block fees";
  change: BitIntegers;
  origin: BlockApplication1 | ProtocolMigration1 | Subsidy1 | Simulation1;
}
export interface Deposits {
  kind: "freezer";
  category: "deposits";
  delegate: _014_PtKathma$ContractId;
  change: BitIntegers;
  origin: BlockApplication2 | ProtocolMigration2 | Subsidy2 | Simulation2;
}
export interface NonceRevelationRewards {
  kind: "minted";
  category: "nonce revelation rewards";
  change: BitIntegers;
  origin: BlockApplication3 | ProtocolMigration3 | Subsidy3 | Simulation3;
}
export interface DoubleSigningEvidenceRewards {
  kind: "minted";
  category: "double signing evidence rewards";
  change: BitIntegers;
  origin: BlockApplication4 | ProtocolMigration4 | Subsidy4 | Simulation4;
}
export interface EndorsingRewards {
  kind: "minted";
  category: "endorsing rewards";
  change: BitIntegers;
  origin: BlockApplication5 | ProtocolMigration5 | Subsidy5 | Simulation5;
}
export interface BakingRewards {
  kind: "minted";
  category: "baking rewards";
  change: BitIntegers;
  origin: BlockApplication6 | ProtocolMigration6 | Subsidy6 | Simulation6;
}
export interface BakingBonuses {
  kind: "minted";
  category: "baking bonuses";
  change: BitIntegers;
  origin: BlockApplication7 | ProtocolMigration7 | Subsidy7 | Simulation7;
}
export interface StorageFees {
  kind: "burned";
  category: "storage fees";
  change: BitIntegers;
  origin: BlockApplication8 | ProtocolMigration8 | Subsidy8 | Simulation8;
}
export interface DoubleSigningPunishments {
  kind: "burned";
  category: "punishments";
  change: BitIntegers;
  origin: BlockApplication9 | ProtocolMigration9 | Subsidy9 | Simulation9;
}
export interface LostEndorsingRewards {
  kind: "burned";
  category: "lost endorsing rewards";
  delegate: _014_PtKathma$ContractId;
  participation: boolean;
  revelation: boolean;
  change: BitIntegers;
  origin: BlockApplication10 | ProtocolMigration10 | Subsidy10 | Simulation10;
}
export interface LiquidityBakingSubsidies {
  kind: "minted";
  category: "subsidy";
  change: BitIntegers;
  origin: BlockApplication11 | ProtocolMigration11 | Subsidy11 | Simulation11;
}
export interface Burned {
  kind: "burned";
  category: "burned";
  change: BitIntegers;
  origin: BlockApplication12 | ProtocolMigration12 | Subsidy12 | Simulation12;
}
export interface Commitments {
  kind: "commitment";
  category: "commitment";
  committer: _014_PtKathma$ContractId;
  change: BitIntegers;
  origin: BlockApplication13 | ProtocolMigration13 | Subsidy13 | Simulation13;
}
export interface Bootstrap {
  kind: "minted";
  category: "bootstrap";
  change: BitIntegers;
  origin: BlockApplication14 | ProtocolMigration14 | Subsidy14 | Simulation14;
}
export interface Invoice {
  kind: "minted";
  category: "invoice";
  change: BitIntegers;
  origin: BlockApplication15 | ProtocolMigration15 | Subsidy15 | Simulation15;
}
export interface InitialCommitments {
  kind: "minted";
  category: "commitment";
  change: BitIntegers;
  origin: BlockApplication16 | ProtocolMigration16 | Subsidy16 | Simulation16;
}
export interface Minted {
  kind: "minted";
  category: "minted";
  change: BitIntegers;
  origin: BlockApplication17 | ProtocolMigration17 | Subsidy17 | Simulation17;
}
export interface FrozenBonds {
  kind: "freezer";
  category: "bonds";
  contract: _014_PtKathma$ContractId;
  bond_id: _014_PtKathma$BondId;
  change: BitIntegers;
  origin: BlockApplication18 | ProtocolMigration18 | Subsidy18 | Simulation18;
}
export interface TxRollupBondId {
  tx_rollup: _014_PtKathma$ContractId;
}
export interface ScRollupBondId {
  sc_rollup: _014_PtKathma$ContractId;
}
export interface TxRollupRejectionRewards {
  kind: "minted";
  category: "tx_rollup_rejection_rewards";
  change: BitIntegers;
  origin: BlockApplication19 | ProtocolMigration19 | Subsidy19 | Simulation19;
}
export interface TxRollupRejectionPunishments {
  kind: "burned";
  category: "tx_rollup_rejection_punishments";
  change: BitIntegers;
  origin: BlockApplication20 | ProtocolMigration20 | Subsidy20 | Simulation20;
}
export interface ScRollupRefutationPunishments {
  kind: "burned";
  category: "sc_rollup_refutation_punishments";
  change: BitIntegers;
  origin: BlockApplication21 | ProtocolMigration21 | Subsidy21 | Simulation21;
}
export interface Reveal {
  kind: "reveal";
  consumed_milligas?: PositiveBigNumber;
}
export interface ToContract {
  kind: "transaction";
  storage?: Micheline$014_PtKathma$MichelsonV1$Expression;
  balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _014_PtKathma$ContractId[];
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  allocated_destination_contract?: boolean;
  lazy_storage_diff?: _014_PtKathma$LazyStorageDiff;
}
export interface Int {
  int: BigNumber;
}
export interface String {
  string: _014_PtKathma$ContractId;
}
export interface Bytes {
  bytes: string;
}
/**
 * Generic primitive (any number of args with or without annotations)
 */
export interface Prim_Generic {
  prim: _014_PtKathma$Michelson$V1$Primitives;
  args?: Micheline$014_PtKathma$MichelsonV1$Expression[];
  annots?: string[];
}
export interface BigMap {
  kind: "big_map";
  id: BigNumber;
  diff: Update | Remove | Copy | Alloc;
}
export interface Update {
  action: "update";
  updates: {
    key_hash: _014_PtKathma$ContractId;
    key: Micheline$014_PtKathma$MichelsonV1$Expression;
    value?: Micheline$014_PtKathma$MichelsonV1$Expression;
  }[];
}
export interface Remove {
  action: "remove";
}
export interface Copy {
  action: "copy";
  source: BigNumber;
  updates: {
    key_hash: _014_PtKathma$ContractId;
    key: Micheline$014_PtKathma$MichelsonV1$Expression;
    value?: Micheline$014_PtKathma$MichelsonV1$Expression;
  }[];
}
export interface Alloc {
  action: "alloc";
  updates: {
    key_hash: _014_PtKathma$ContractId;
    key: Micheline$014_PtKathma$MichelsonV1$Expression;
    value?: Micheline$014_PtKathma$MichelsonV1$Expression;
  }[];
  key_type: Micheline$014_PtKathma$MichelsonV1$Expression;
  value_type: Micheline$014_PtKathma$MichelsonV1$Expression;
}
export interface SaplingState {
  kind: "sapling_state";
  id: BigNumber;
  diff: Update1 | Remove1 | Copy1 | Alloc1;
}
export interface Update1 {
  action: "update";
  updates: {
    commitments_and_ciphertexts:
      | []
      | [Sapling$Transaction$Commitment]
      | [Sapling$Transaction$Commitment, Sapling$Transaction$Ciphertext][];
    nullifiers: Sapling$Transaction$Nullifier[];
  };
}
export interface Sapling$Transaction$Ciphertext {
  cv: Sapling$Transaction$CommitmentValue;
  epk: Sapling$DH$Epk;
  payload_enc: string;
  nonce_enc: string;
  payload_out: string;
  nonce_out: string;
}
export interface Remove1 {
  action: "remove";
}
export interface Copy1 {
  action: "copy";
  source: BigNumber;
  updates: {
    commitments_and_ciphertexts:
      | []
      | [Sapling$Transaction$Commitment]
      | [Sapling$Transaction$Commitment, Sapling$Transaction$Ciphertext][];
    nullifiers: Sapling$Transaction$Nullifier[];
  };
}
export interface Alloc1 {
  action: "alloc";
  updates: {
    commitments_and_ciphertexts:
      | []
      | [Sapling$Transaction$Commitment]
      | [Sapling$Transaction$Commitment, Sapling$Transaction$Ciphertext][];
    nullifiers: Sapling$Transaction$Nullifier[];
  };
  memo_size: number;
}
export interface ToTxRollup {
  kind: "transaction";
  balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  ticket_hash: _014_PtKathma$ContractId;
  paid_storage_size_diff: PositiveBigNumber;
}
export interface ToScRollup {
  kind: "transaction";
  consumed_milligas?: PositiveBigNumber;
  inbox_after: {
    rollup: _014_PtKathma$ContractId;
    message_counter: PositiveBigNumber;
    nb_available_messages: BitIntegers;
    nb_messages_in_commitment_period: BitIntegers;
    starting_level_of_current_commitment_period: number;
    level: number;
    current_messages_hash: _014_PtKathma$ContractId;
    old_levels_messages: {
      index: number;
      content: _014_PtKathma$ContractId;
      back_pointers: _014_PtKathma$ContractId[];
    };
  };
}
export interface Origination {
  kind: "origination";
  balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _014_PtKathma$ContractId[];
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  lazy_storage_diff?: _014_PtKathma$LazyStorageDiff;
}
export interface Delegation {
  kind: "delegation";
  consumed_milligas?: PositiveBigNumber;
}
export interface SetDepositsLimit {
  kind: "set_deposits_limit";
  consumed_milligas?: PositiveBigNumber;
}
export interface IncreasePaidStorage {
  kind: "increase_paid_storage";
  balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
}
export interface ScRollupOriginate {
  kind: "sc_rollup_originate";
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  address: _014_PtKathma$ContractId;
  consumed_milligas?: PositiveBigNumber;
  size: BigNumber;
}
export interface Endorsement {
  kind: "endorsement";
  slot: number;
  level: number;
  round: number;
  block_payload_hash: _014_PtKathma$ContractId;
}
export interface Preendorsement {
  kind: "preendorsement";
  slot: number;
  level: number;
  round: number;
  block_payload_hash: _014_PtKathma$ContractId;
}
export interface DalSlotAvailability {
  kind: "dal_slot_availability";
  endorser: _014_PtKathma$ContractId;
  endorsement: BigNumber;
}
export interface SeedNonceRevelation {
  kind: "seed_nonce_revelation";
  level: number;
  nonce: string;
}
export interface VdfRevelation {
  kind: "vdf_revelation";
  solution: [] | [string] | [string, string];
}
export interface DoubleEndorsementEvidence {
  kind: "double_endorsement_evidence";
  op1: _014_PtKathma$Inlined$Endorsement;
  op2: _014_PtKathma$Inlined$Endorsement;
}
/**
 * An operation's shell header.
 */
export interface _014_PtKathma$Inlined$Endorsement {
  branch: _014_PtKathma$ContractId;
  operations: _014_PtKathma$Inlined$EndorsementMempool$Contents;
  signature?: _014_PtKathma$ContractId;
}
export interface Endorsement1 {
  kind: "endorsement";
  slot: number;
  level: number;
  round: number;
  block_payload_hash: _014_PtKathma$ContractId;
}
export interface DoublePreendorsementEvidence {
  kind: "double_preendorsement_evidence";
  op1: _014_PtKathma$Inlined$Preendorsement;
  op2: _014_PtKathma$Inlined$Preendorsement;
}
/**
 * An operation's shell header.
 */
export interface _014_PtKathma$Inlined$Preendorsement {
  branch: _014_PtKathma$ContractId;
  operations: _014_PtKathma$Inlined$Preendorsement$Contents;
  signature?: _014_PtKathma$ContractId;
}
export interface Preendorsement1 {
  kind: "preendorsement";
  slot: number;
  level: number;
  round: number;
  block_payload_hash: _014_PtKathma$ContractId;
}
export interface DoubleBakingEvidence {
  kind: "double_baking_evidence";
  bh1: ShellHeader1;
  bh2: ShellHeader1;
}
/**
 * Block header's shell-related content. It contains information such as the block level, its predecessor and timestamp.
 */
export interface ShellHeader1 {
  level: number;
  proto: number;
  predecessor: _014_PtKathma$ContractId;
  timestamp: _014_PtKathma$ContractId;
  validation_pass: number;
  operations_hash: _014_PtKathma$ContractId;
  fitness: BlockFitness;
  context: _014_PtKathma$ContractId;
  payload_hash: _014_PtKathma$ContractId;
  payload_round: number;
  proof_of_work_nonce: string;
  seed_nonce_hash?: _014_PtKathma$ContractId;
  liquidity_baking_toggle_vote: _014_PtKathma$LiquidityBakingToggleVote;
  signature: _014_PtKathma$ContractId;
}
export interface ActivateAccount {
  kind: "activate_account";
  pkh: _014_PtKathma$ContractId;
  secret: string;
}
export interface Proposals {
  kind: "proposals";
  source: _014_PtKathma$ContractId;
  period: number;
  proposals: _014_PtKathma$ContractId[];
}
export interface Ballot {
  kind: "ballot";
  source: _014_PtKathma$ContractId;
  period: number;
  proposal: _014_PtKathma$ContractId;
  ballot: "nay" | "yay" | "pass";
}
export interface Reveal1 {
  kind: "reveal";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  public_key: _014_PtKathma$ContractId;
}
export interface Transaction {
  kind: "transaction";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  amount: PositiveBigNumber;
  destination: _014_PtKathma$ContractId;
  parameters?: {
    entrypoint: _014_PtKathma$Entrypoint;
    value: Micheline$014_PtKathma$MichelsonV1$Expression;
  };
}
export interface Origination1 {
  kind: "origination";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  balance: PositiveBigNumber;
  delegate?: _014_PtKathma$ContractId;
  script: _014_PtKathma$Scripted$Contracts;
}
export interface _014_PtKathma$Scripted$Contracts {
  code: Micheline$014_PtKathma$MichelsonV1$Expression;
  storage: Micheline$014_PtKathma$MichelsonV1$Expression;
}
export interface Delegation1 {
  kind: "delegation";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  delegate?: _014_PtKathma$ContractId;
}
export interface SetDepositsLimit1 {
  kind: "set_deposits_limit";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  limit?: PositiveBigNumber;
}
export interface IncreasePaidStorage1 {
  kind: "increase_paid_storage";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  amount: BigNumber;
  destination: _014_PtKathma$ContractId;
}
export interface FailingNoop {
  kind: "failing_noop";
  arbitrary: _014_PtKathma$ContractId;
}
export interface RegisterGlobalConstant {
  kind: "register_global_constant";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  value: Micheline$014_PtKathma$MichelsonV1$Expression;
}
export interface TxRollupOrigination {
  kind: "tx_rollup_origination";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  tx_rollup_origination: unknown;
}
export interface TxRollupSubmitBatch {
  kind: "tx_rollup_submit_batch";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _014_PtKathma$ContractId;
  content: string;
  burn_limit?: PositiveBigNumber;
}
export interface TxRollupCommit {
  kind: "tx_rollup_commit";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _014_PtKathma$ContractId;
  commitment: {
    level: number;
    messages: _014_PtKathma$ContractId[];
    predecessor: _014_PtKathma$ContractId | None1;
    inbox_merkle_root: _014_PtKathma$ContractId;
  };
}
export interface TxRollupReturnBond {
  kind: "tx_rollup_return_bond";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _014_PtKathma$ContractId;
}
export interface TxRollupFinalizeCommitment {
  kind: "tx_rollup_finalize_commitment";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _014_PtKathma$ContractId;
}
export interface TxRollupRemoveCommitment {
  kind: "tx_rollup_remove_commitment";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _014_PtKathma$ContractId;
}
export interface TxRollupRejection {
  kind: "tx_rollup_rejection";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _014_PtKathma$ContractId;
  level: number;
  message: Batch | Deposit;
  message_position: PositiveBigNumber;
  message_path: _014_PtKathma$ContractId[];
  message_result_hash: _014_PtKathma$ContractId;
  message_result_path: _014_PtKathma$ContractId[];
  previous_message_result: {
    context_hash: _014_PtKathma$ContractId;
    withdraw_list_hash: _014_PtKathma$ContractId;
  };
  previous_message_result_path: _014_PtKathma$ContractId[];
  proof: {
    version: number;
    before: Value | Node;
    after: Value1 | Node1;
    state: (Inode | OtherElts)[];
  };
}
export interface Batch {
  batch: string;
}
export interface Deposit {
  deposit: {
    sender: _014_PtKathma$ContractId;
    destination: _014_PtKathma$ContractId;
    ticket_hash: _014_PtKathma$ContractId;
    amount: BitIntegers;
  };
}
export interface Value {
  value: _014_PtKathma$ContractId;
}
export interface Node {
  node: _014_PtKathma$ContractId;
}
export interface Value1 {
  value: _014_PtKathma$ContractId;
}
export interface Node1 {
  node: _014_PtKathma$ContractId;
}
export interface Inode {
  inode: {
    length: BitIntegers;
    proofs:
      | []
      | [None2 | _014_PtKathma$ContractId]
      | [None2 | _014_PtKathma$ContractId, None3 | _014_PtKathma$ContractId];
  };
}
export interface OtherElts {
  other_elts: Node2 | OtherElts1;
}
export interface Node2 {
  node: [] | [string] | [string, Value2 | Node3][];
}
export interface Value2 {
  value: _014_PtKathma$ContractId;
}
export interface Node3 {
  node: _014_PtKathma$ContractId;
}
export interface OtherElts1 {
  other_elts: Value3 | InodeExtender;
}
export interface Value3 {
  value: ShortBytes | MediumBytes | LongBytes | UnlimitedBytes;
}
/**
 * This case is void. No data is accepted.
 */
export interface LongBytes {
  [k: string]: unknown;
}
export interface InodeExtender {
  inode_extender: {
    length: BitIntegers;
    segment: string;
    proof: _014_PtKathma$ContractId;
  };
}
export interface TxRollupDispatchTickets {
  kind: "tx_rollup_dispatch_tickets";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  tx_rollup: _014_PtKathma$ContractId;
  level: number;
  context_hash: _014_PtKathma$ContractId;
  message_index: number;
  message_result_path: _014_PtKathma$ContractId[];
  tickets_info: {
    contents: Micheline$014_PtKathma$MichelsonV1$Expression;
    ty: Micheline$014_PtKathma$MichelsonV1$Expression;
    ticketer: _014_PtKathma$ContractId;
    amount: BitIntegers;
    claimer: _014_PtKathma$ContractId;
  }[];
}
export interface TransferTicket {
  kind: "transfer_ticket";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  ticket_contents: Micheline$014_PtKathma$MichelsonV1$Expression;
  ticket_ty: Micheline$014_PtKathma$MichelsonV1$Expression;
  ticket_ticketer: _014_PtKathma$ContractId;
  ticket_amount: PositiveBigNumber;
  destination: _014_PtKathma$ContractId;
  entrypoint: _014_PtKathma$ContractId;
}
export interface DalPublishSlotHeader {
  kind: "dal_publish_slot_header";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  slot: {
    level: number;
    index: number;
    header: number;
  };
}
export interface ScRollupOriginate1 {
  kind: ExampleArithSmartContractRollupKind | Wasm200SmartContractRollupKind;
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  boot_sector: _014_PtKathma$ContractId;
  parameters_ty: Micheline$014_PtKathma$MichelsonV1$Expression;
}
export interface ExampleArithSmartContractRollupKind {
  [k: string]: unknown;
}
export interface Wasm200SmartContractRollupKind {
  [k: string]: unknown;
}
export interface ScRollupAddMessages {
  kind: "sc_rollup_add_messages";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _014_PtKathma$ContractId;
  message: _014_PtKathma$ContractId[];
}
export interface ScRollupCement {
  kind: "sc_rollup_cement";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _014_PtKathma$ContractId;
  commitment: _014_PtKathma$ContractId;
}
export interface ScRollupPublish {
  kind: "sc_rollup_publish";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _014_PtKathma$ContractId;
  commitment: {
    compressed_state: _014_PtKathma$ContractId;
    inbox_level: number;
    predecessor: _014_PtKathma$ContractId;
    number_of_messages: number;
    number_of_ticks: number;
  };
}
export interface ScRollupRefute {
  kind: "sc_rollup_refute";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _014_PtKathma$ContractId;
  opponent: _014_PtKathma$ContractId;
  refutation: {
    choice: PositiveBigNumber;
    step: Dissection | Proof;
  };
  is_opening_move: boolean;
}
export interface Proof {
  pvm_step: ArithmeticPVMWithProof | Wasm200PVMWithProof;
  inbox: Some2 | None9;
}
export interface ArithmeticPVMWithProof {
  tree_proof: {
    version: number;
    before: Value4 | Node4;
    after: Value5 | Node5;
    state: TreeEncoding;
  };
  given: Some | None7;
  requested: NoInputRequired | Initial | FirstAfter;
}
export interface Value4 {
  value: _014_PtKathma$ContractId;
}
export interface Node4 {
  node: _014_PtKathma$ContractId;
}
export interface Value5 {
  value: _014_PtKathma$ContractId;
}
export interface Node5 {
  node: _014_PtKathma$ContractId;
}
export interface Value6 {
  value: string;
}
export interface BlindedValue {
  blinded_value: _014_PtKathma$ContractId;
}
export interface Node6 {
  node: [] | [string] | [string, TreeEncoding][];
}
export interface BlindedNode {
  blinded_node: _014_PtKathma$ContractId;
}
export interface Inode1 {
  inode: {
    length: BitIntegers;
    proofs: SparseProof | DenseProof1;
  };
}
export interface SparseProof {
  sparse_proof: [] | [number] | [number, InodeTree][];
}
export interface BlindedInode {
  blinded_inode: _014_PtKathma$ContractId;
}
export interface InodeValues {
  inode_values: [] | [string] | [string, TreeEncoding][];
}
export interface InodeTree1 {
  inode_tree: {
    length: BitIntegers;
    proofs: SparseProof1 | DenseProof;
  };
}
export interface SparseProof1 {
  sparse_proof: [] | [number] | [number, InodeTree][];
}
export interface DenseProof {
  dense_proof: InodeTree[];
}
export interface InodeExtender1 {
  inode_extender: {
    length: BitIntegers;
    segment: string;
    proof: InodeTree;
  };
}
export interface None5 {
  none: null;
}
export interface DenseProof1 {
  dense_proof: InodeTree[];
}
export interface Extender {
  extender: {
    length: BitIntegers;
    segment: string;
    proof: InodeTree;
  };
}
export interface None6 {
  none: null;
}
export interface Some {
  inbox_level: number;
  message_counter: PositiveBigNumber;
  payload: _014_PtKathma$ContractId;
}
export interface NoInputRequired {
  no_input_required: unknown;
}
export interface Initial {
  initial: unknown;
}
export interface Wasm200PVMWithProof {
  tree_proof: {
    version: number;
    before: Value7 | Node7;
    after: Value8 | Node8;
    state: TreeEncoding;
  };
  given: Some1 | None8;
  requested: NoInputRequired1 | Initial1 | FirstAfter1;
}
export interface Value7 {
  value: _014_PtKathma$ContractId;
}
export interface Node7 {
  node: _014_PtKathma$ContractId;
}
export interface Value8 {
  value: _014_PtKathma$ContractId;
}
export interface Node8 {
  node: _014_PtKathma$ContractId;
}
export interface Some1 {
  inbox_level: number;
  message_counter: PositiveBigNumber;
  payload: _014_PtKathma$ContractId;
}
export interface NoInputRequired1 {
  no_input_required: unknown;
}
export interface Initial1 {
  initial: unknown;
}
export interface Some2 {
  skips:
    | []
    | [
        {
          rollup: _014_PtKathma$ContractId;
          message_counter: PositiveBigNumber;
          nb_available_messages: BitIntegers;
          nb_messages_in_commitment_period: BitIntegers;
          starting_level_of_current_commitment_period: number;
          level: number;
          current_messages_hash: _014_PtKathma$ContractId;
          old_levels_messages: {
            index: number;
            content: _014_PtKathma$ContractId;
            back_pointers: _014_PtKathma$ContractId[];
          };
        }
      ]
    | [
        {
          rollup: _014_PtKathma$ContractId;
          message_counter: PositiveBigNumber;
          nb_available_messages: BitIntegers;
          nb_messages_in_commitment_period: BitIntegers;
          starting_level_of_current_commitment_period: number;
          level: number;
          current_messages_hash: _014_PtKathma$ContractId;
          old_levels_messages: {
            index: number;
            content: _014_PtKathma$ContractId;
            back_pointers: _014_PtKathma$ContractId[];
          };
        },
        {
          index: number;
          content: _014_PtKathma$ContractId;
          back_pointers: _014_PtKathma$ContractId[];
        }[]
      ][];
  level: {
    rollup: _014_PtKathma$ContractId;
    message_counter: PositiveBigNumber;
    nb_available_messages: BitIntegers;
    nb_messages_in_commitment_period: BitIntegers;
    starting_level_of_current_commitment_period: number;
    level: number;
    current_messages_hash: _014_PtKathma$ContractId;
    old_levels_messages: {
      index: number;
      content: _014_PtKathma$ContractId;
      back_pointers: _014_PtKathma$ContractId[];
    };
  };
  inc: {
    index: number;
    content: _014_PtKathma$ContractId;
    back_pointers: _014_PtKathma$ContractId[];
  }[];
  message_proof: {
    version: number;
    before: Value9 | Node9;
    after: Value10 | Node10;
    state: TreeEncoding;
  };
}
export interface Value9 {
  value: _014_PtKathma$ContractId;
}
export interface Node9 {
  node: _014_PtKathma$ContractId;
}
export interface Value10 {
  value: _014_PtKathma$ContractId;
}
export interface Node10 {
  node: _014_PtKathma$ContractId;
}
export interface ScRollupTimeout {
  kind: "sc_rollup_timeout";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _014_PtKathma$ContractId;
  stakers: {
    alice: _014_PtKathma$ContractId;
    bob: _014_PtKathma$ContractId;
  };
}
export interface ScRollupExecuteOutboxMessage {
  kind: "sc_rollup_execute_outbox_message";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _014_PtKathma$ContractId;
  cemented_commitment: _014_PtKathma$ContractId;
  outbox_level: number;
  message_index: number;
  inclusion_proof?: _014_PtKathma$ContractId;
  message: _014_PtKathma$ContractId;
}
export interface ScRollupRecoverBond {
  kind: "sc_rollup_recover_bond";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _014_PtKathma$ContractId;
}
export interface ScRollupDalSlotSubscribe {
  kind: "sc_rollup_dal_slot_subscribe";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _014_PtKathma$ContractId;
  slot_index: number;
}
export interface SeedNonceRevelation1 {
  kind: "seed_nonce_revelation";
  level: number;
  nonce: string;
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  };
}
export interface VdfRevelation1 {
  kind: "vdf_revelation";
  solution: [] | [string] | [string, string];
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  };
}
export interface Endorsement2 {
  kind: "endorsement";
  slot: number;
  level: number;
  round: number;
  block_payload_hash: _014_PtKathma$ContractId;
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
    delegate: _014_PtKathma$ContractId;
    endorsement_power: number;
  };
}
export interface Preendorsement2 {
  kind: "preendorsement";
  slot: number;
  level: number;
  round: number;
  block_payload_hash: _014_PtKathma$ContractId;
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
    delegate: _014_PtKathma$ContractId;
    preendorsement_power: number;
  };
}
export interface DalSlotAvailability1 {
  kind: "dal_slot_availability";
  endorser: _014_PtKathma$ContractId;
  endorsement: BigNumber;
  metadata: {
    delegate: _014_PtKathma$ContractId;
  };
}
export interface DoublePreendorsementEvidence1 {
  kind: "double_preendorsement_evidence";
  op1: _014_PtKathma$Inlined$Preendorsement;
  op2: _014_PtKathma$Inlined$Preendorsement;
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  };
}
export interface DoubleEndorsementEvidence1 {
  kind: "double_endorsement_evidence";
  op1: _014_PtKathma$Inlined$Endorsement;
  op2: _014_PtKathma$Inlined$Endorsement;
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  };
}
export interface DoubleBakingEvidence1 {
  kind: "double_baking_evidence";
  bh1: ShellHeader1;
  bh2: ShellHeader1;
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  };
}
export interface ActivateAccount1 {
  kind: "activate_account";
  pkh: _014_PtKathma$ContractId;
  secret: string;
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  };
}
export interface Proposals1 {
  kind: "proposals";
  source: _014_PtKathma$ContractId;
  period: number;
  proposals: _014_PtKathma$ContractId[];
  metadata: {};
}
export interface Ballot1 {
  kind: "ballot";
  source: _014_PtKathma$ContractId;
  period: number;
  proposal: _014_PtKathma$ContractId;
  ballot: "nay" | "yay" | "pass";
  metadata: {};
}
export interface Reveal2 {
  kind: "reveal";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  public_key: _014_PtKathma$ContractId;
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _014_PtKathma$Operation$Alpha$OperationResult$Reveal;
    internal_operation_results?: _014_PtKathma$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied {
  status: "applied";
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
/**
 * The full list of RPC errors would be too long to include.
 * It is available at RPC `/errors` (GET).
 * Errors specific to protocol Alpha have an id that starts with `proto.alpha`.
 */
export interface _014_PtKathma$Error {
  [k: string]: unknown;
}
export interface Skipped {
  status: "skipped";
}
export interface Backtracked {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  consumed_milligas?: PositiveBigNumber;
}
export interface Transaction1 {
  kind: "transaction";
  source: _014_PtKathma$ContractId;
  nonce: number;
  amount: PositiveBigNumber;
  destination: _014_PtKathma$ContractId;
  parameters?: {
    entrypoint: _014_PtKathma$Entrypoint;
    value: Micheline$014_PtKathma$MichelsonV1$Expression;
  };
  result: _014_PtKathma$Operation$Alpha$InternalOperationResult$Transaction;
}
export interface ToContract1 {
  status: "applied";
  storage?: Micheline$014_PtKathma$MichelsonV1$Expression;
  balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _014_PtKathma$ContractId[];
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  allocated_destination_contract?: boolean;
  lazy_storage_diff?: _014_PtKathma$LazyStorageDiff;
}
export interface ToTxRollup1 {
  status: "applied";
  balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  ticket_hash: _014_PtKathma$ContractId;
  paid_storage_size_diff: PositiveBigNumber;
}
export interface ToScRollup1 {
  status: "applied";
  consumed_milligas?: PositiveBigNumber;
  inbox_after: {
    rollup: _014_PtKathma$ContractId;
    message_counter: PositiveBigNumber;
    nb_available_messages: BitIntegers;
    nb_messages_in_commitment_period: BitIntegers;
    starting_level_of_current_commitment_period: number;
    level: number;
    current_messages_hash: _014_PtKathma$ContractId;
    old_levels_messages: {
      index: number;
      content: _014_PtKathma$ContractId;
      back_pointers: _014_PtKathma$ContractId[];
    };
  };
}
export interface Failed1 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped1 {
  status: "skipped";
}
export interface ToContract2 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  storage?: Micheline$014_PtKathma$MichelsonV1$Expression;
  balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _014_PtKathma$ContractId[];
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  allocated_destination_contract?: boolean;
  lazy_storage_diff?: _014_PtKathma$LazyStorageDiff;
}
export interface ToTxRollup2 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  ticket_hash: _014_PtKathma$ContractId;
  paid_storage_size_diff: PositiveBigNumber;
}
export interface ToScRollup2 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  consumed_milligas?: PositiveBigNumber;
  inbox_after: {
    rollup: _014_PtKathma$ContractId;
    message_counter: PositiveBigNumber;
    nb_available_messages: BitIntegers;
    nb_messages_in_commitment_period: BitIntegers;
    starting_level_of_current_commitment_period: number;
    level: number;
    current_messages_hash: _014_PtKathma$ContractId;
    old_levels_messages: {
      index: number;
      content: _014_PtKathma$ContractId;
      back_pointers: _014_PtKathma$ContractId[];
    };
  };
}
export interface Origination2 {
  kind: "origination";
  source: _014_PtKathma$ContractId;
  nonce: number;
  balance: PositiveBigNumber;
  delegate?: _014_PtKathma$ContractId;
  script: _014_PtKathma$Scripted$Contracts;
  result: _014_PtKathma$Operation$Alpha$InternalOperationResult$Origination;
}
export interface Applied1 {
  status: "applied";
  balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _014_PtKathma$ContractId[];
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  lazy_storage_diff?: _014_PtKathma$LazyStorageDiff;
}
export interface Failed2 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped2 {
  status: "skipped";
}
export interface Backtracked1 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _014_PtKathma$ContractId[];
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  lazy_storage_diff?: _014_PtKathma$LazyStorageDiff;
}
export interface Delegation2 {
  kind: "delegation";
  source: _014_PtKathma$ContractId;
  nonce: number;
  delegate?: _014_PtKathma$ContractId;
  result: _014_PtKathma$Operation$Alpha$InternalOperationResult$Delegation;
}
export interface Applied2 {
  status: "applied";
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed3 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped3 {
  status: "skipped";
}
export interface Backtracked2 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  consumed_milligas?: PositiveBigNumber;
}
export interface Event {
  kind: "event";
  source: _014_PtKathma$ContractId;
  nonce: number;
  type: Micheline$014_PtKathma$MichelsonV1$Expression;
  tag?: _014_PtKathma$Entrypoint;
  payload?: Micheline$014_PtKathma$MichelsonV1$Expression;
  result: _014_PtKathma$Operation$Alpha$InternalOperationResult$Event;
}
export interface Applied3 {
  status: "applied";
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed4 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped4 {
  status: "skipped";
}
export interface Backtracked3 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  consumed_milligas?: PositiveBigNumber;
}
export interface Transaction2 {
  kind: "transaction";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  amount: PositiveBigNumber;
  destination: _014_PtKathma$ContractId;
  parameters?: {
    entrypoint: _014_PtKathma$Entrypoint;
    value: Micheline$014_PtKathma$MichelsonV1$Expression;
  };
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _014_PtKathma$Operation$Alpha$OperationResult$Transaction;
    internal_operation_results?: _014_PtKathma$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface ToContract3 {
  status: "applied";
  storage?: Micheline$014_PtKathma$MichelsonV1$Expression;
  balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _014_PtKathma$ContractId[];
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  allocated_destination_contract?: boolean;
  lazy_storage_diff?: _014_PtKathma$LazyStorageDiff;
}
export interface ToTxRollup3 {
  status: "applied";
  balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  ticket_hash: _014_PtKathma$ContractId;
  paid_storage_size_diff: PositiveBigNumber;
}
export interface ToScRollup3 {
  status: "applied";
  consumed_milligas?: PositiveBigNumber;
  inbox_after: {
    rollup: _014_PtKathma$ContractId;
    message_counter: PositiveBigNumber;
    nb_available_messages: BitIntegers;
    nb_messages_in_commitment_period: BitIntegers;
    starting_level_of_current_commitment_period: number;
    level: number;
    current_messages_hash: _014_PtKathma$ContractId;
    old_levels_messages: {
      index: number;
      content: _014_PtKathma$ContractId;
      back_pointers: _014_PtKathma$ContractId[];
    };
  };
}
export interface Failed5 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped5 {
  status: "skipped";
}
export interface ToContract4 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  storage?: Micheline$014_PtKathma$MichelsonV1$Expression;
  balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _014_PtKathma$ContractId[];
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  allocated_destination_contract?: boolean;
  lazy_storage_diff?: _014_PtKathma$LazyStorageDiff;
}
export interface ToTxRollup4 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  ticket_hash: _014_PtKathma$ContractId;
  paid_storage_size_diff: PositiveBigNumber;
}
export interface ToScRollup4 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  consumed_milligas?: PositiveBigNumber;
  inbox_after: {
    rollup: _014_PtKathma$ContractId;
    message_counter: PositiveBigNumber;
    nb_available_messages: BitIntegers;
    nb_messages_in_commitment_period: BitIntegers;
    starting_level_of_current_commitment_period: number;
    level: number;
    current_messages_hash: _014_PtKathma$ContractId;
    old_levels_messages: {
      index: number;
      content: _014_PtKathma$ContractId;
      back_pointers: _014_PtKathma$ContractId[];
    };
  };
}
export interface Origination3 {
  kind: "origination";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  balance: PositiveBigNumber;
  delegate?: _014_PtKathma$ContractId;
  script: _014_PtKathma$Scripted$Contracts;
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _014_PtKathma$Operation$Alpha$OperationResult$Origination;
    internal_operation_results?: _014_PtKathma$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied4 {
  status: "applied";
  balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _014_PtKathma$ContractId[];
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  lazy_storage_diff?: _014_PtKathma$LazyStorageDiff;
}
export interface Failed6 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped6 {
  status: "skipped";
}
export interface Backtracked4 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  originated_contracts?: _014_PtKathma$ContractId[];
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  paid_storage_size_diff?: BigNumber;
  lazy_storage_diff?: _014_PtKathma$LazyStorageDiff;
}
export interface Delegation3 {
  kind: "delegation";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  delegate?: _014_PtKathma$ContractId;
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _014_PtKathma$Operation$Alpha$OperationResult$Delegation;
    internal_operation_results?: _014_PtKathma$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied5 {
  status: "applied";
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed7 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped7 {
  status: "skipped";
}
export interface Backtracked5 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  consumed_milligas?: PositiveBigNumber;
}
export interface RegisterGlobalConstant1 {
  kind: "register_global_constant";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  value: Micheline$014_PtKathma$MichelsonV1$Expression;
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _014_PtKathma$Operation$Alpha$OperationResult$RegisterGlobalConstant;
    internal_operation_results?: _014_PtKathma$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied6 {
  status: "applied";
  balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  global_address: _014_PtKathma$ContractId;
}
export interface Failed8 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped8 {
  status: "skipped";
}
export interface Backtracked6 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  storage_size?: BigNumber;
  global_address: _014_PtKathma$ContractId;
}
export interface SetDepositsLimit2 {
  kind: "set_deposits_limit";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  limit?: PositiveBigNumber;
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _014_PtKathma$Operation$Alpha$OperationResult$SetDepositsLimit;
    internal_operation_results?: _014_PtKathma$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied7 {
  status: "applied";
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed9 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped9 {
  status: "skipped";
}
export interface Backtracked7 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  consumed_milligas?: PositiveBigNumber;
}
export interface IncreasePaidStorage2 {
  kind: "increase_paid_storage";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  amount: BigNumber;
  destination: _014_PtKathma$ContractId;
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _014_PtKathma$Operation$Alpha$OperationResult$IncreasePaidStorage;
    internal_operation_results?: _014_PtKathma$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied8 {
  status: "applied";
  balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed10 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped10 {
  status: "skipped";
}
export interface Backtracked8 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
}
export interface TxRollupOrigination1 {
  kind: "tx_rollup_origination";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  tx_rollup_origination: unknown;
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _014_PtKathma$Operation$Alpha$OperationResult$TxRollupOrigination;
    internal_operation_results?: _014_PtKathma$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied9 {
  status: "applied";
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  originated_rollup: _014_PtKathma$ContractId;
}
export interface Failed11 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped11 {
  status: "skipped";
}
export interface Backtracked9 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  originated_rollup: _014_PtKathma$ContractId;
}
export interface TxRollupSubmitBatch1 {
  kind: "tx_rollup_submit_batch";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _014_PtKathma$ContractId;
  content: string;
  burn_limit?: PositiveBigNumber;
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _014_PtKathma$Operation$Alpha$OperationResult$TxRollupSubmitBatch;
    internal_operation_results?: _014_PtKathma$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied10 {
  status: "applied";
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  paid_storage_size_diff: PositiveBigNumber;
}
export interface Failed12 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped12 {
  status: "skipped";
}
export interface Backtracked10 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  paid_storage_size_diff: PositiveBigNumber;
}
export interface TxRollupCommit1 {
  kind: "tx_rollup_commit";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _014_PtKathma$ContractId;
  commitment: {
    level: number;
    messages: _014_PtKathma$ContractId[];
    predecessor: _014_PtKathma$ContractId | None10;
    inbox_merkle_root: _014_PtKathma$ContractId;
  };
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _014_PtKathma$Operation$Alpha$OperationResult$TxRollupCommit;
    internal_operation_results?: _014_PtKathma$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied11 {
  status: "applied";
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed13 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped13 {
  status: "skipped";
}
export interface Backtracked11 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
}
export interface TxRollupReturnBond1 {
  kind: "tx_rollup_return_bond";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _014_PtKathma$ContractId;
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _014_PtKathma$Operation$Alpha$OperationResult$TxRollupReturnBond;
    internal_operation_results?: _014_PtKathma$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied12 {
  status: "applied";
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed14 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped14 {
  status: "skipped";
}
export interface Backtracked12 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
}
export interface TxRollupFinalizeCommitment1 {
  kind: "tx_rollup_finalize_commitment";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _014_PtKathma$ContractId;
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _014_PtKathma$Operation$Alpha$OperationResult$TxRollupFinalizeCommitment;
    internal_operation_results?: _014_PtKathma$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied13 {
  status: "applied";
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  level: number;
}
export interface Failed15 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped15 {
  status: "skipped";
}
export interface Backtracked13 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  level: number;
}
export interface TxRollupRemoveCommitment1 {
  kind: "tx_rollup_remove_commitment";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _014_PtKathma$ContractId;
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _014_PtKathma$Operation$Alpha$OperationResult$TxRollupRemoveCommitment;
    internal_operation_results?: _014_PtKathma$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied14 {
  status: "applied";
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  level: number;
}
export interface Failed16 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped16 {
  status: "skipped";
}
export interface Backtracked14 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  level: number;
}
export interface TxRollupRejection1 {
  kind: "tx_rollup_rejection";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _014_PtKathma$ContractId;
  level: number;
  message: Batch1 | Deposit1;
  message_position: PositiveBigNumber;
  message_path: _014_PtKathma$ContractId[];
  message_result_hash: _014_PtKathma$ContractId;
  message_result_path: _014_PtKathma$ContractId[];
  previous_message_result: {
    context_hash: _014_PtKathma$ContractId;
    withdraw_list_hash: _014_PtKathma$ContractId;
  };
  previous_message_result_path: _014_PtKathma$ContractId[];
  proof: {
    version: number;
    before: Value11 | Node11;
    after: Value12 | Node12;
    state: (Inode2 | OtherElts2)[];
  };
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _014_PtKathma$Operation$Alpha$OperationResult$TxRollupRejection;
    internal_operation_results?: _014_PtKathma$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Batch1 {
  batch: string;
}
export interface Deposit1 {
  deposit: {
    sender: _014_PtKathma$ContractId;
    destination: _014_PtKathma$ContractId;
    ticket_hash: _014_PtKathma$ContractId;
    amount: BitIntegers;
  };
}
export interface Value11 {
  value: _014_PtKathma$ContractId;
}
export interface Node11 {
  node: _014_PtKathma$ContractId;
}
export interface Value12 {
  value: _014_PtKathma$ContractId;
}
export interface Node12 {
  node: _014_PtKathma$ContractId;
}
export interface Inode2 {
  inode: {
    length: BitIntegers;
    proofs:
      | []
      | [None11 | _014_PtKathma$ContractId]
      | [None11 | _014_PtKathma$ContractId, None12 | _014_PtKathma$ContractId];
  };
}
export interface OtherElts2 {
  other_elts: Node13 | OtherElts3;
}
export interface Node13 {
  node: [] | [string] | [string, Value13 | Node14][];
}
export interface Value13 {
  value: _014_PtKathma$ContractId;
}
export interface Node14 {
  node: _014_PtKathma$ContractId;
}
export interface OtherElts3 {
  other_elts: Value14 | InodeExtender2;
}
export interface Value14 {
  value: ShortBytes1 | MediumBytes1 | LongBytes1 | UnlimitedBytes1;
}
/**
 * This case is void. No data is accepted.
 */
export interface LongBytes1 {
  [k: string]: unknown;
}
export interface InodeExtender2 {
  inode_extender: {
    length: BitIntegers;
    segment: string;
    proof: _014_PtKathma$ContractId;
  };
}
export interface Applied15 {
  status: "applied";
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed17 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped17 {
  status: "skipped";
}
export interface Backtracked15 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
}
export interface TransferTicket1 {
  kind: "transfer_ticket";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  ticket_contents: Micheline$014_PtKathma$MichelsonV1$Expression;
  ticket_ty: Micheline$014_PtKathma$MichelsonV1$Expression;
  ticket_ticketer: _014_PtKathma$ContractId;
  ticket_amount: PositiveBigNumber;
  destination: _014_PtKathma$ContractId;
  entrypoint: _014_PtKathma$ContractId;
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _014_PtKathma$Operation$Alpha$OperationResult$TransferTicket;
    internal_operation_results?: _014_PtKathma$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied16 {
  status: "applied";
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  paid_storage_size_diff?: BigNumber;
}
export interface Failed18 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped18 {
  status: "skipped";
}
export interface Backtracked16 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  paid_storage_size_diff?: BigNumber;
}
export interface DalPublishSlotHeader1 {
  kind: "dal_publish_slot_header";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  slot: {
    level: number;
    index: number;
    header: number;
  };
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _014_PtKathma$Operation$Alpha$OperationResult$DalPublishSlotHeader;
    internal_operation_results?: _014_PtKathma$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied17 {
  status: "applied";
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed19 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped19 {
  status: "skipped";
}
export interface Backtracked17 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  consumed_milligas?: PositiveBigNumber;
}
export interface TxRollupDispatchTickets1 {
  kind: "tx_rollup_dispatch_tickets";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  tx_rollup: _014_PtKathma$ContractId;
  level: number;
  context_hash: _014_PtKathma$ContractId;
  message_index: number;
  message_result_path: _014_PtKathma$ContractId[];
  tickets_info: {
    contents: Micheline$014_PtKathma$MichelsonV1$Expression;
    ty: Micheline$014_PtKathma$MichelsonV1$Expression;
    ticketer: _014_PtKathma$ContractId;
    amount: BitIntegers;
    claimer: _014_PtKathma$ContractId;
  }[];
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _014_PtKathma$Operation$Alpha$OperationResult$TxRollupDispatchTickets;
    internal_operation_results?: _014_PtKathma$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied18 {
  status: "applied";
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  paid_storage_size_diff?: BigNumber;
}
export interface Failed20 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped20 {
  status: "skipped";
}
export interface Backtracked18 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  paid_storage_size_diff?: BigNumber;
}
export interface ScRollupOriginate2 {
  kind: ExampleArithSmartContractRollupKind1 | Wasm200SmartContractRollupKind1;
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  boot_sector: _014_PtKathma$ContractId;
  parameters_ty: Micheline$014_PtKathma$MichelsonV1$Expression;
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _014_PtKathma$Operation$Alpha$OperationResult$ScRollupOriginate;
    internal_operation_results?: _014_PtKathma$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface ExampleArithSmartContractRollupKind1 {
  [k: string]: unknown;
}
export interface Wasm200SmartContractRollupKind1 {
  [k: string]: unknown;
}
export interface Applied19 {
  status: "applied";
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  address: _014_PtKathma$ContractId;
  consumed_milligas?: PositiveBigNumber;
  size: BigNumber;
}
export interface Failed21 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped21 {
  status: "skipped";
}
export interface Backtracked19 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  address: _014_PtKathma$ContractId;
  consumed_milligas?: PositiveBigNumber;
  size: BigNumber;
}
export interface ScRollupAddMessages1 {
  kind: "sc_rollup_add_messages";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _014_PtKathma$ContractId;
  message: _014_PtKathma$ContractId[];
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _014_PtKathma$Operation$Alpha$OperationResult$ScRollupAddMessages;
    internal_operation_results?: _014_PtKathma$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied20 {
  status: "applied";
  consumed_milligas?: PositiveBigNumber;
  inbox_after: {
    rollup: _014_PtKathma$ContractId;
    message_counter: PositiveBigNumber;
    nb_available_messages: BitIntegers;
    nb_messages_in_commitment_period: BitIntegers;
    starting_level_of_current_commitment_period: number;
    level: number;
    current_messages_hash: _014_PtKathma$ContractId;
    old_levels_messages: {
      index: number;
      content: _014_PtKathma$ContractId;
      back_pointers: _014_PtKathma$ContractId[];
    };
  };
}
export interface Failed22 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped22 {
  status: "skipped";
}
export interface Backtracked20 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  consumed_milligas?: PositiveBigNumber;
  inbox_after: {
    rollup: _014_PtKathma$ContractId;
    message_counter: PositiveBigNumber;
    nb_available_messages: BitIntegers;
    nb_messages_in_commitment_period: BitIntegers;
    starting_level_of_current_commitment_period: number;
    level: number;
    current_messages_hash: _014_PtKathma$ContractId;
    old_levels_messages: {
      index: number;
      content: _014_PtKathma$ContractId;
      back_pointers: _014_PtKathma$ContractId[];
    };
  };
}
export interface ScRollupCement1 {
  kind: "sc_rollup_cement";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _014_PtKathma$ContractId;
  commitment: _014_PtKathma$ContractId;
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _014_PtKathma$Operation$Alpha$OperationResult$ScRollupCement;
    internal_operation_results?: _014_PtKathma$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied21 {
  status: "applied";
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed23 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped23 {
  status: "skipped";
}
export interface Backtracked21 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  consumed_milligas?: PositiveBigNumber;
}
export interface ScRollupPublish1 {
  kind: "sc_rollup_publish";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _014_PtKathma$ContractId;
  commitment: {
    compressed_state: _014_PtKathma$ContractId;
    inbox_level: number;
    predecessor: _014_PtKathma$ContractId;
    number_of_messages: number;
    number_of_ticks: number;
  };
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _014_PtKathma$Operation$Alpha$OperationResult$ScRollupPublish;
    internal_operation_results?: _014_PtKathma$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied22 {
  status: "applied";
  consumed_milligas?: PositiveBigNumber;
  staked_hash: _014_PtKathma$ContractId;
  published_at_level: number;
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
}
export interface Failed24 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped24 {
  status: "skipped";
}
export interface Backtracked22 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  consumed_milligas?: PositiveBigNumber;
  staked_hash: _014_PtKathma$ContractId;
  published_at_level: number;
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
}
export interface ScRollupRefute1 {
  kind: "sc_rollup_refute";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _014_PtKathma$ContractId;
  opponent: _014_PtKathma$ContractId;
  refutation: {
    choice: PositiveBigNumber;
    step: Dissection1 | Proof1;
  };
  is_opening_move: boolean;
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _014_PtKathma$Operation$Alpha$OperationResult$ScRollupRefute;
    internal_operation_results?: _014_PtKathma$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Proof1 {
  pvm_step: ArithmeticPVMWithProof1 | Wasm200PVMWithProof1;
  inbox: Some5 | None16;
}
export interface ArithmeticPVMWithProof1 {
  tree_proof: {
    version: number;
    before: Value15 | Node15;
    after: Value16 | Node16;
    state: TreeEncoding;
  };
  given: Some3 | None14;
  requested: NoInputRequired2 | Initial2 | FirstAfter2;
}
export interface Value15 {
  value: _014_PtKathma$ContractId;
}
export interface Node15 {
  node: _014_PtKathma$ContractId;
}
export interface Value16 {
  value: _014_PtKathma$ContractId;
}
export interface Node16 {
  node: _014_PtKathma$ContractId;
}
export interface Some3 {
  inbox_level: number;
  message_counter: PositiveBigNumber;
  payload: _014_PtKathma$ContractId;
}
export interface NoInputRequired2 {
  no_input_required: unknown;
}
export interface Initial2 {
  initial: unknown;
}
export interface Wasm200PVMWithProof1 {
  tree_proof: {
    version: number;
    before: Value17 | Node17;
    after: Value18 | Node18;
    state: TreeEncoding;
  };
  given: Some4 | None15;
  requested: NoInputRequired3 | Initial3 | FirstAfter3;
}
export interface Value17 {
  value: _014_PtKathma$ContractId;
}
export interface Node17 {
  node: _014_PtKathma$ContractId;
}
export interface Value18 {
  value: _014_PtKathma$ContractId;
}
export interface Node18 {
  node: _014_PtKathma$ContractId;
}
export interface Some4 {
  inbox_level: number;
  message_counter: PositiveBigNumber;
  payload: _014_PtKathma$ContractId;
}
export interface NoInputRequired3 {
  no_input_required: unknown;
}
export interface Initial3 {
  initial: unknown;
}
export interface Some5 {
  skips:
    | []
    | [
        {
          rollup: _014_PtKathma$ContractId;
          message_counter: PositiveBigNumber;
          nb_available_messages: BitIntegers;
          nb_messages_in_commitment_period: BitIntegers;
          starting_level_of_current_commitment_period: number;
          level: number;
          current_messages_hash: _014_PtKathma$ContractId;
          old_levels_messages: {
            index: number;
            content: _014_PtKathma$ContractId;
            back_pointers: _014_PtKathma$ContractId[];
          };
        }
      ]
    | [
        {
          rollup: _014_PtKathma$ContractId;
          message_counter: PositiveBigNumber;
          nb_available_messages: BitIntegers;
          nb_messages_in_commitment_period: BitIntegers;
          starting_level_of_current_commitment_period: number;
          level: number;
          current_messages_hash: _014_PtKathma$ContractId;
          old_levels_messages: {
            index: number;
            content: _014_PtKathma$ContractId;
            back_pointers: _014_PtKathma$ContractId[];
          };
        },
        {
          index: number;
          content: _014_PtKathma$ContractId;
          back_pointers: _014_PtKathma$ContractId[];
        }[]
      ][];
  level: {
    rollup: _014_PtKathma$ContractId;
    message_counter: PositiveBigNumber;
    nb_available_messages: BitIntegers;
    nb_messages_in_commitment_period: BitIntegers;
    starting_level_of_current_commitment_period: number;
    level: number;
    current_messages_hash: _014_PtKathma$ContractId;
    old_levels_messages: {
      index: number;
      content: _014_PtKathma$ContractId;
      back_pointers: _014_PtKathma$ContractId[];
    };
  };
  inc: {
    index: number;
    content: _014_PtKathma$ContractId;
    back_pointers: _014_PtKathma$ContractId[];
  }[];
  message_proof: {
    version: number;
    before: Value19 | Node19;
    after: Value20 | Node20;
    state: TreeEncoding;
  };
}
export interface Value19 {
  value: _014_PtKathma$ContractId;
}
export interface Node19 {
  node: _014_PtKathma$ContractId;
}
export interface Value20 {
  value: _014_PtKathma$ContractId;
}
export interface Node20 {
  node: _014_PtKathma$ContractId;
}
export interface Applied23 {
  status: Ongoing | Ended;
  consumed_milligas?: PositiveBigNumber;
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
}
export interface Ongoing {
  [k: string]: unknown;
}
export interface ConflictResolved {
  [k: string]: unknown;
}
export interface Timeout {
  [k: string]: unknown;
}
export interface Failed25 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped25 {
  status: "skipped";
}
export interface Backtracked23 {
  status: Ongoing1 | Ended1;
  errors?: _014_PtKathma$Error[];
  consumed_milligas?: PositiveBigNumber;
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
}
export interface Ongoing1 {
  [k: string]: unknown;
}
export interface ConflictResolved1 {
  [k: string]: unknown;
}
export interface Timeout1 {
  [k: string]: unknown;
}
export interface ScRollupTimeout1 {
  kind: "sc_rollup_timeout";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _014_PtKathma$ContractId;
  stakers: {
    alice: _014_PtKathma$ContractId;
    bob: _014_PtKathma$ContractId;
  };
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _014_PtKathma$Operation$Alpha$OperationResult$ScRollupTimeout;
    internal_operation_results?: _014_PtKathma$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied24 {
  status: Ongoing2 | Ended2;
  consumed_milligas?: PositiveBigNumber;
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
}
export interface Ongoing2 {
  [k: string]: unknown;
}
export interface ConflictResolved2 {
  [k: string]: unknown;
}
export interface Timeout2 {
  [k: string]: unknown;
}
export interface Failed26 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped26 {
  status: "skipped";
}
export interface Backtracked24 {
  status: Ongoing3 | Ended3;
  errors?: _014_PtKathma$Error[];
  consumed_milligas?: PositiveBigNumber;
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
}
export interface Ongoing3 {
  [k: string]: unknown;
}
export interface ConflictResolved3 {
  [k: string]: unknown;
}
export interface Timeout3 {
  [k: string]: unknown;
}
export interface ScRollupExecuteOutboxMessage1 {
  kind: "sc_rollup_execute_outbox_message";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _014_PtKathma$ContractId;
  cemented_commitment: _014_PtKathma$ContractId;
  outbox_level: number;
  message_index: number;
  inclusion_proof?: _014_PtKathma$ContractId;
  message: _014_PtKathma$ContractId;
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _014_PtKathma$Operation$Alpha$OperationResult$ScRollupExecuteOutboxMessage;
    internal_operation_results?: _014_PtKathma$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied25 {
  status: "applied";
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  paid_storage_size_diff?: BigNumber;
}
export interface Failed27 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped27 {
  status: "skipped";
}
export interface Backtracked25 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
  paid_storage_size_diff?: BigNumber;
}
export interface ScRollupRecoverBond1 {
  kind: "sc_rollup_recover_bond";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _014_PtKathma$ContractId;
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _014_PtKathma$Operation$Alpha$OperationResult$ScRollupRecoverBond;
    internal_operation_results?: _014_PtKathma$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied26 {
  status: "applied";
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
}
export interface Failed28 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped28 {
  status: "skipped";
}
export interface Backtracked26 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  balance_updates: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
  consumed_milligas?: PositiveBigNumber;
}
export interface ScRollupDalSlotSubscribe1 {
  kind: "sc_rollup_dal_slot_subscribe";
  source: _014_PtKathma$ContractId;
  fee: PositiveBigNumber;
  counter: PositiveBigNumber;
  gas_limit: PositiveBigNumber;
  storage_limit: PositiveBigNumber;
  rollup: _014_PtKathma$ContractId;
  slot_index: number;
  metadata: {
    balance_updates?: _014_PtKathma$OperationMetadata$Alpha$BalanceUpdates;
    operation_result: _014_PtKathma$Operation$Alpha$OperationResult$ScRollupDalSlotSubscribe;
    internal_operation_results?: _014_PtKathma$ApplyInternalResults$Alpha$OperationResult[];
  };
}
export interface Applied27 {
  status: "applied";
  consumed_milligas?: PositiveBigNumber;
  slot_index: number;
  level: number;
}
export interface Failed29 {
  status: "failed";
  errors: _014_PtKathma$Error[];
}
export interface Skipped29 {
  status: "skipped";
}
export interface Backtracked27 {
  status: "backtracked";
  errors?: _014_PtKathma$Error[];
  consumed_milligas?: PositiveBigNumber;
  slot_index: number;
  level: number;
}
